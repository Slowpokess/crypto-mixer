# Kubernetes Deployment - infrastructure/kubernetes/mixer-deployment.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: crypto-mixer

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: mixer-config
  namespace: crypto-mixer
data:
  NODE_ENV: "production"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "mixer_db"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  RABBITMQ_HOST: "rabbitmq-service"
  RABBITMQ_PORT: "5672"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: mixer-secrets
  namespace: crypto-mixer
type: Opaque
stringData:
  DB_PASSWORD: "your-secure-db-password"
  REDIS_PASSWORD: "your-secure-redis-password"
  RABBITMQ_PASSWORD: "your-secure-rabbitmq-password"
  JWT_SECRET: "your-secure-jwt-secret"
  ENCRYPTION_KEY: "your-secure-encryption-key"
  MASTER_KEY: "your-secure-master-key"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: crypto-mixer
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: mixer-config
              key: DB_NAME
        - name: POSTGRES_USER
          value: mixer_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mixer-secrets
              key: DB_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: crypto-mixer
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: crypto-mixer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args: ["--requirepass", "$(REDIS_PASSWORD)", "--appendonly", "yes"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mixer-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: crypto-mixer
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: crypto-mixer
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Mixer API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mixer-api
  namespace: crypto-mixer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mixer-api
  template:
    metadata:
      labels:
        app: mixer-api
    spec:
      containers:
      - name: mixer-api
        image: crypto-mixer/mixer-api:latest
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: mixer-config
        - secretRef:
            name: mixer-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Mixer API Service
apiVersion: v1
kind: Service
metadata:
  name: mixer-api-service
  namespace: crypto-mixer
spec:
  selector:
    app: mixer-api
  ports:
  - port: 3000
    targetPort: 3000

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mixer-ingress
  namespace: crypto-mixer
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
spec:
  tls:
  - hosts:
    - mixer.yourdomain.com
    secretName: mixer-tls
  rules:
  - host: mixer.yourdomain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: mixer-api-service
            port:
              number: 3000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mixer-network-policy
  namespace: crypto-mixer
spec:
  podSelector:
    matchLabels:
      app: mixer-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mixer-api-hpa
  namespace: crypto-mixer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mixer-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80