# ============================================================================
# CRYPTO MIXER BACKEND - PRODUCTION MULTI-STAGE DOCKERFILE
# ============================================================================
# РУССКИЙ: Оптимизированный multi-stage build для максимальной безопасности и производительности
# Версия: 3.0.0 - Полная производственная готовность
# Особенности: HSM поддержка, мультисетевая архитектура, продвинутое логирование

# ============================================================================
# STAGE 1: БАЗОВЫЙ ОБРАЗ С ПРОДВИНУТОЙ БЕЗОПАСНОСТЬЮ
# ============================================================================
FROM node:20.10.0-alpine3.19 AS base

# МЕТКИ ДЛЯ ПРОДАКШН
LABEL maintainer="Crypto Mixer Security Team <security@cryptomixer.local>"
LABEL description="Production-ready crypto mixer backend with enterprise security"
LABEL version="3.0.0"
LABEL architecture="multi-stage,hardened,hsm-ready"

# РУССКИЙ: Установка критических системных компонентов и библиотек безопасности
RUN apk add --no-cache \
    # Системные утилиты
    dumb-init \
    tini \
    curl \
    wget \
    ca-certificates \
    tzdata \
    coreutils \
    # Криптографические библиотеки и HSM поддержка
    openssl \
    openssl-dev \
    libssl3 \
    pcsc-lite \
    pcsc-lite-dev \
    ccid \
    opensc \
    # Компиляция нативных модулей
    python3 \
    make \
    g++ \
    gcc \
    linux-headers \
    # Мониторинг и диагностика
    htop \
    iotop \
    strace \
    lsof \
    netcat-openbsd \
    tcpdump \
    bind-tools \
    # Безопасность
    fail2ban \
    sudo \
    shadow \
    # Логирование
    logrotate \
    rsyslog \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# РУССКИЙ: Создание пользователя с улучшенной безопасностью
RUN addgroup -g 3000 -S mixer && \
    adduser -u 3000 -S -G mixer -h /app -s /bin/sh -D mixer && \
    # Создание директорий с правильными правами
    mkdir -p /app/{logs,keys,config,temp,secrets,ssl,cache,uploads} && \
    mkdir -p /var/log/mixer /var/cache/mixer /var/run/mixer && \
    # Установка владения
    chown -R mixer:mixer /app /var/log/mixer /var/cache/mixer /var/run/mixer && \
    # Установка строгих прав доступа
    chmod 755 /app && \
    chmod 750 /app/{logs,temp,cache,uploads} && \
    chmod 700 /app/{keys,secrets,ssl} && \
    chmod 755 /app/config

# РУССКИЙ: Настройка часового пояса и локали
ENV TZ=UTC
RUN cp /usr/share/zoneinfo/UTC /etc/localtime && \
    echo "UTC" > /etc/timezone

# РУССКИЙ: Продвинутая конфигурация Node.js для высокой производительности
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=4096 --enable-source-maps --trace-warnings --unhandled-rejections=strict" \
    UV_THREADPOOL_SIZE=16 \
    MALLOC_ARENA_MAX=2 \
    MALLOC_TRIM_THRESHOLD_=131072 \
    NPM_CONFIG_LOGLEVEL=warn \
    NPM_CONFIG_PROGRESS=false

# ============================================================================
# STAGE 2: УСТАНОВКА И КЭШИРОВАНИЕ ЗАВИСИМОСТЕЙ
# ============================================================================
FROM base AS dependencies

WORKDIR /app

# РУССКИЙ: Оптимизация npm registry и настройки для продакшн
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-factor 10 && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set audit-level high && \
    npm config set fund false

# РУССКИЙ: Копирование файлов зависимостей для эффективного кэширования Docker layers
COPY --chown=mixer:mixer package*.json ./
COPY --chown=mixer:mixer tsconfig*.json ./
COPY --chown=mixer:mixer .npmrc* ./

# РУССКИЙ: Переключение на безопасного пользователя
USER mixer

# РУССКИЙ: Установка production зависимостей с валидацией безопасности
RUN npm ci --only=production --no-audit --no-fund --ignore-scripts && \
    # Проверка уязвимостей
    npm audit --audit-level=high --only=prod || true && \
    # Очистка кэша для экономии места
    npm cache clean --force

# РУССКИЙ: Отдельный этап для dev зависимостей (для сборки)
RUN npm ci --only=development --no-audit --no-fund && \
    npm cache clean --force

# ============================================================================
# STAGE 3: SECURITY SCANNING - Проверка безопасности зависимостей
# ============================================================================
FROM dependencies AS security-checker

# РУССКИЙ: Проверка уязвимостей с помощью npm audit
RUN npm audit --audit-level=moderate --only=prod --json > /tmp/audit-prod.json || true
RUN npm audit --audit-level=moderate --only=dev --json > /tmp/audit-dev.json || true

# РУССКИЙ: Анализ лицензий
RUN npx license-checker --production --json > /tmp/licenses.json || true

# ============================================================================
# STAGE 4: КОМПИЛЯЦИЯ И ОПТИМИЗАЦИЯ
# ============================================================================
FROM dependencies AS builder

WORKDIR /app

# РУССКИЙ: Копирование исходного кода
COPY --chown=mixer:mixer . .

# РУССКИЙ: Настройка environment variables для сборки
ENV NODE_ENV=production
ENV BUILD_ENV=production
ENV GENERATE_SOURCEMAP=true

# РУССКИЙ: Компиляция TypeScript с максимальными оптимизациями
RUN npm run build:production 2>&1 | tee /tmp/build.log

# РУССКИЙ: Оптимизация и очистка после сборки
RUN if [ -d "dist" ]; then \
        # Удаление исходных TypeScript файлов
        find . -name "*.ts" -not -path "./node_modules/*" -not -path "./dist/*" -delete; \
        find . -name "*.tsx" -not -path "./node_modules/*" -not -path "./dist/*" -delete; \
        # Удаление тестовых файлов
        find . -name "*.test.*" -not -path "./node_modules/*" -delete; \
        find . -name "*.spec.*" -not -path "./node_modules/*" -delete; \
        # Удаление файлов разработки
        rm -rf src/ tests/ test/ __tests__ *.test.* *.spec.* coverage/ .nyc_output/; \
        rm -f tsconfig*.json .eslintrc* .prettierrc* jest.config* vitest.config*; \
        # Проверка размера dist директории
        du -sh dist/; \
    else \
        echo "ERROR: dist directory not found after build!" && exit 1; \
    fi

# РУССКИЙ: Удаление dev зависимостей и оставление только production
RUN npm prune --production && \
    npm cache clean --force

# РУССКИЙ: Создание архива для бэкапа исходников (опционально)
RUN tar -czf /tmp/source-backup.tar.gz --exclude=node_modules --exclude=dist .

# ============================================================================
# STAGE 5: FINAL PRODUCTION IMAGE - Финальный hardened образ
# ============================================================================
FROM base AS production

# РУССКИЙ: Установка дополнительных production инструментов
RUN apk add --no-cache \
    # Продвинутый мониторинг
    procps \
    sysstat \
    # Сетевые утилиты для диагностики
    iproute2 \
    iptables \
    iputils \
    # Безопасность
    rng-tools \
    haveged \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# РУССКИЙ: Копирование скомпилированного приложения с оптимизированными правами
COPY --from=builder --chown=mixer:mixer /app/dist ./dist
COPY --from=builder --chown=mixer:mixer /app/node_modules ./node_modules
COPY --from=builder --chown=mixer:mixer /app/package*.json ./

# РУССКИЙ: Копирование служебных скриптов
COPY --chown=mixer:mixer scripts/docker-entrypoint.sh ./entrypoint.sh
COPY --chown=mixer:mixer scripts/healthcheck.sh ./healthcheck.sh
COPY --chown=mixer:mixer scripts/cleanup.sh ./cleanup.sh

# РУССКИЙ: Создание конфигурационных файлов
RUN mkdir -p /app/config/production && \
    chown -R mixer:mixer /app/config

# РУССКИЙ: Установка производственных конфигураций
COPY --chown=mixer:mixer config/production/ ./config/production/
COPY --chown=mixer:mixer config/logging/ ./config/logging/
COPY --chown=mixer:mixer config/security/ ./config/security/

# РУССКИЙ: Настройка logrotate для продакшн логирования
COPY config/logrotate.conf /etc/logrotate.d/mixer

# РУССКИЙ: Установка исполняемых прав на скрипты
RUN chmod +x ./entrypoint.sh ./healthcheck.sh ./cleanup.sh

# РУССКИЙ: Создание пользовательских директорий с правильными правами
RUN mkdir -p \
    /var/log/mixer/{app,security,audit,performance} \
    /var/cache/mixer \
    /var/run/mixer \
    && chown -R mixer:mixer /var/log/mixer /var/cache/mixer /var/run/mixer \
    && chmod 755 /var/log/mixer \
    && chmod 750 /var/log/mixer/{app,security,audit,performance} \
    && chmod 755 /var/cache/mixer /var/run/mixer

# РУССКИЙ: Переключение на безопасного пользователя
USER mixer

# РУССКИЙ: Настройка production переменных окружения
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=4096 --enable-source-maps --trace-warnings" \
    UV_THREADPOOL_SIZE=16 \
    MALLOC_ARENA_MAX=2 \
    MALLOC_TRIM_THRESHOLD_=131072 \
    MALLOC_MMAP_THRESHOLD_=131072 \
    MALLOC_TOP_PAD_=131072 \
    MALLOC_MMAP_MAX_=65536 \
    # Логирование
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    LOG_ROTATION=daily \
    LOG_RETENTION=30 \
    # Безопасность
    SECURITY_HARDENING=enabled \
    HSM_SUPPORT=enabled \
    # Мониторинг
    HEALTH_CHECK_ENABLED=true \
    METRICS_ENABLED=true \
    PROMETHEUS_ENABLED=true \
    # Производительность
    CLUSTER_MODE=true \
    WORKER_PROCESSES=auto

# РУССКИЙ: Проверка состояния приложения с расширенными метриками
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=5 \
    CMD ./healthcheck.sh || exit 1

# РУССКИЙ: Экспонирование портов
EXPOSE 5000 5001 5002

# РУССКИЙ: Настройка мониторинга ресурсов
VOLUME ["/var/log/mixer", "/var/cache/mixer"]

# РУССКИЙ: Финальные метки безопасности
LABEL stage="production" \
      security.hardened="true" \
      security.non-root="true" \
      security.hsm-ready="true" \
      performance.optimized="true" \
      monitoring.enabled="true" \
      compliance.level="enterprise"

# РУССКИЙ: Настройка entrypoint с tini для корректной обработки сигналов
ENTRYPOINT ["tini", "--", "./entrypoint.sh"]

# РУССКИЙ: Команда запуска по умолчанию
CMD ["node", "dist/server.js"]

# ============================================================================
# STAGE 6: DEVELOPMENT - Образ для разработки
# ============================================================================
FROM dependencies AS development

WORKDIR /app

# РУССКИЙ: Копирование всех файлов для разработки
COPY --chown=mixer:mixer . .

# РУССКИЙ: Установка дополнительных инструментов разработки
RUN apk add --no-cache \
    git \
    vim \
    nano \
    bash \
    fish \
    zsh \
    tree \
    jq \
    && rm -rf /var/cache/apk/*

# РУССКИЙ: Установка глобальных dev пакетов
RUN npm install -g \
    nodemon \
    ts-node \
    typescript \
    @types/node \
    eslint \
    prettier \
    concurrently

USER mixer

ENV NODE_ENV=development \
    PORT=3000 \
    DEBUG="mixer:*"

EXPOSE 3000 9229 5555

# РУССКИЙ: Команда для разработки с hot reload
CMD ["npm", "run", "dev"]

# ============================================================================
# STAGE 7: TESTING - Образ для CI/CD тестирования
# ============================================================================
FROM dependencies AS testing

WORKDIR /app

COPY --chown=mixer:mixer . .

# РУССКИЙ: Установка тестовых зависимостей
RUN npm install --only=dev

# РУССКИЙ: Установка дополнительных тестовых инструментов
RUN npm install -g \
    nyc \
    mocha \
    jest \
    supertest

USER mixer

ENV NODE_ENV=test \
    CI=true \
    COVERAGE=true

# РУССКИЙ: Команда для запуска полного набора тестов
CMD ["npm", "run", "test:coverage"]

# ============================================================================
# BUILD ARGUMENTS И ФИНАЛЬНЫЕ МЕТКИ
# ============================================================================
ARG BUILD_TIMESTAMP
ARG GIT_COMMIT
ARG VERSION
ARG BUILD_NUMBER

# РУССКИЙ: Финальные метки с информацией о сборке
LABEL build.timestamp="${BUILD_TIMESTAMP}" \
      git.commit="${GIT_COMMIT}" \
      version="${VERSION}" \
      build.number="${BUILD_NUMBER}" \
      multistage.optimized="true" \
      security.scanned="true" \
      production.ready="true"