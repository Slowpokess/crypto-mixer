"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testLitecoinClient = testLitecoinClient;
exports.testDashClient = testDashClient;
exports.testZcashClient = testZcashClient;
exports.testBlockchainManager = testBlockchainManager;
exports.testAddressValidation = testAddressValidation;
exports.runTests = runTests;
const LitecoinCoreClient_1 = require("./blockchain/nodes/LitecoinCoreClient");
const DashCoreClient_1 = require("./blockchain/nodes/DashCoreClient");
const ZcashClient_1 = require("./blockchain/nodes/ZcashClient");
const BlockchainManager_1 = require("./blockchain/nodes/BlockchainManager");
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 *
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:
 * - Litecoin (LTC)
 * - Dash (DASH)
 * - Zcash (ZEC)
 *
 * –í–ê–ñ–ù–û: –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –Ω–æ–¥–∞–º.
 * –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
 */
// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –Ω–æ–¥–∞–º
const testConfigs = {
    litecoin: {
        host: 'localhost',
        port: 9332,
        username: 'litecoinrpc',
        password: 'ltcpassword',
        timeout: 30000,
        maxRetries: 3,
        retryDelay: 1000,
        ssl: false
    },
    dash: {
        host: 'localhost',
        port: 9998,
        username: 'dashrpc',
        password: 'dashpassword',
        timeout: 30000,
        maxRetries: 3,
        retryDelay: 1000,
        ssl: false,
        enableInstantSend: true,
        enablePrivateSend: false,
        privateSendRounds: 2
    },
    zcash: {
        host: 'localhost',
        port: 8232,
        username: 'zcashrpc',
        password: 'zcashpassword',
        timeout: 30000,
        maxRetries: 3,
        retryDelay: 1000,
        ssl: false,
        enableShielded: true,
        defaultShieldedAddress: 'sapling',
        autoShieldTransparent: false,
        shieldingThreshold: 0.1
    }
};
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Litecoin –∫–ª–∏–µ–Ω—Ç–∞
 */
async function testLitecoinClient() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Litecoin Core Client...');
    try {
        const ltcClient = new LitecoinCoreClient_1.LitecoinCoreClient(testConfigs.litecoin);
        // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log('   ‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        const isConnected = await ltcClient.ping();
        if (!isConnected) {
            console.log('   ‚ö†Ô∏è  Litecoin –Ω–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)');
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–µ
            console.log('   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...');
            const address = ltcClient.createLitecoinAddress('bech32');
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω Litecoin bech32 –∞–¥—Ä–µ—Å: ${address.address.substring(0, 20)}...`);
            return true;
        }
        // –ï—Å–ª–∏ –Ω–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã
        console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Litecoin Core —É—Å–ø–µ—à–Ω–æ');
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        const blockchainInfo = await ltcClient.getBlockchainInfo();
        console.log(`   ‚úÖ –í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞: ${blockchainInfo.blocks}`);
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const perfStats = await ltcClient.getPerformanceStats();
        console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –±–ª–æ–∫–æ–≤ ${perfStats.currentBlockHeight}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ${perfStats.connectionCount}`);
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        const newAddress = await ltcClient.getNewAddress('test-label', 'bech32');
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å: ${newAddress}`);
        await ltcClient.disconnect();
        return true;
    }
    catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Litecoin: ${error.message}`);
        return false;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dash –∫–ª–∏–µ–Ω—Ç–∞
 */
async function testDashClient() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dash Core Client...');
    try {
        const dashClient = new DashCoreClient_1.DashCoreClient(testConfigs.dash);
        // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log('   ‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        const isConnected = await dashClient.ping();
        if (!isConnected) {
            console.log('   ‚ö†Ô∏è  Dash –Ω–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)');
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–µ
            console.log('   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...');
            const address = dashClient.createDashAddress();
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω Dash –∞–¥—Ä–µ—Å: ${address.address.substring(0, 20)}...`);
            return true;
        }
        // –ï—Å–ª–∏ –Ω–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã
        console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dash Core —É—Å–ø–µ—à–Ω–æ');
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        const blockchainInfo = await dashClient.getBlockchainInfo();
        console.log(`   ‚úÖ –í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞: ${blockchainInfo.blocks}`);
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–Ω–æ–¥–∞—Ö
        try {
            const masternodeCount = await dashClient.getMasternodeCount();
            console.log(`   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–Ω–æ–¥: ${masternodeCount.total}`);
        }
        catch (error) {
            console.log('   ‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–Ω–æ–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const perfStats = await dashClient.getPerformanceStats();
        console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –±–ª–æ–∫–æ–≤ ${perfStats.currentBlockHeight}, InstantSend locks ${perfStats.instantSendLocks}`);
        await dashClient.disconnect();
        return true;
    }
    catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Dash: ${error.message}`);
        return false;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Zcash –∫–ª–∏–µ–Ω—Ç–∞
 */
async function testZcashClient() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Zcash Client...');
    try {
        const zcashClient = new ZcashClient_1.ZcashClient(testConfigs.zcash);
        // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log('   ‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        const isConnected = await zcashClient.ping();
        if (!isConnected) {
            console.log('   ‚ö†Ô∏è  Zcash –Ω–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)');
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–µ
            console.log('   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è transparent –∞–¥—Ä–µ—Å–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...');
            const address = zcashClient.createTransparentAddress();
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω Zcash transparent –∞–¥—Ä–µ—Å: ${address.address.substring(0, 20)}...`);
            return true;
        }
        // –ï—Å–ª–∏ –Ω–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã
        console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Zcash —É—Å–ø–µ—à–Ω–æ');
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        const blockchainInfo = await zcashClient.getBlockchainInfo();
        console.log(`   ‚úÖ –í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞: ${blockchainInfo.blocks}`);
        console.log(`   ‚úÖ Value pools: ${blockchainInfo.valuePools.length}`);
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        try {
            const totalBalance = await zcashClient.getTotalBalance();
            console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å: transparent ${totalBalance.transparent}, shielded ${totalBalance.shielded}`);
        }
        catch (error) {
            console.log('   ‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è transparent –∞–¥—Ä–µ—Å–∞
        const newAddress = await zcashClient.getNewAddress('test-label');
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π transparent –∞–¥—Ä–µ—Å: ${newAddress}`);
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è shielded –∞–¥—Ä–µ—Å–∞
        try {
            const shieldedAddress = await zcashClient.getNewShieldedAddress('sapling');
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π sapling –∞–¥—Ä–µ—Å: ${shieldedAddress.substring(0, 20)}...`);
        }
        catch (error) {
            console.log('   ‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ shielded –∞–¥—Ä–µ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        }
        await zcashClient.disconnect();
        return true;
    }
    catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Zcash: ${error.message}`);
        return false;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BlockchainManager —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
 */
async function testBlockchainManager() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BlockchainManager...');
    try {
        const blockchainManager = new BlockchainManager_1.BlockchainManager({
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            // bitcoin: { host: 'localhost', port: 8332, username: 'bitcoin', password: 'pass', enabled: false },
            // ethereum: { httpUrl: 'http://localhost:8545', enabled: false },
            // solana: { rpcUrl: 'http://localhost:8899', enabled: false },
            litecoin: { ...testConfigs.litecoin, enabled: false }, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            dash: { ...testConfigs.dash, enabled: false }, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            zcash: { ...testConfigs.zcash, enabled: false }, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            healthCheckInterval: 60000
        });
        // –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π)
        console.log('   ‚û§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BlockchainManager...');
        await blockchainManager.initialize();
        console.log('   ‚úÖ BlockchainManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
        const supportedCurrencies = blockchainManager.getSupportedCurrencies();
        console.log(`   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: ${supportedCurrencies.join(', ')}`);
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        const clientsStatus = blockchainManager.getClientsStatus();
        console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω: ${clientsStatus.length} –∑–∞–ø–∏—Å–µ–π`);
        await blockchainManager.shutdown();
        console.log('   ‚úÖ BlockchainManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return true;
    }
    catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BlockchainManager: ${error.message}`);
        return false;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
 */
function testAddressValidation() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤...');
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const testAddresses = {
        LTC: {
            valid: [
                'LdP8Qox1VAhCzLJNqrr74YovaWYyNBUWvL', // Legacy P2PKH
                'ltc1qw508d6qejxtdg4y5r3zarvary0c5xw7kxw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k8far5d', // Bech32
                'MVdScWvhsWjbTNm1Jhe7SQFHg7iiozYGpE' // P2SH
            ],
            invalid: [
                'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4', // Bitcoin bech32
                '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', // Bitcoin legacy
                'invalid_address'
            ]
        },
        DASH: {
            valid: [
                'XemjUJmNnFLYtaVUgkN5pMDMD8E9LmHGJ4' // Dash mainnet
            ],
            invalid: [
                'DsYZhMnP3y5nR7QqVcE9gAjX3C8VHQEP12', // Invalid format
                '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa' // Bitcoin address
            ]
        },
        ZEC: {
            valid: [
                't1RdnJKtfKPjM7DVFD3h4T1A8eQUa9vKrWX', // Transparent t1
                't3ZqQXGmE6FZ4x8VHHZMcV5Yx6AhKYE2bQT', // Transparent t3
                'zs1w6nkameazjfkdm5l4yw5xpfe0rr6m8vvnqgn8eyu89c4l9f26apy8z6c4y2l2h9rqm8vvnqgn8e' // Sapling
            ],
            invalid: [
                '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', // Bitcoin address
                'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7k', // Bitcoin bech32
                'invalid_zcash_address'
            ]
        }
    };
    let allPassed = true;
    // –§–∏–∫—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è frontend –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    const validateAddress = (address, currency) => {
        const patterns = {
            LTC: [
                /^[LM][a-km-zA-HJ-NP-Z1-9]{26,33}$/,
                /^ltc1[a-z0-9]{39,59}$/,
                /^[M3][a-km-zA-HJ-NP-Z1-9]{26,33}$/
            ],
            DASH: [
                /^X[1-9A-HJ-NP-Za-km-z]{33}$/
            ],
            ZEC: [
                /^t1[a-km-zA-HJ-NP-Z1-9]{33}$/,
                /^t3[a-km-zA-HJ-NP-Z1-9]{33}$/,
                /^zs[a-km-zA-HJ-NP-Z1-9]{76}$/,
                /^zc[a-km-zA-HJ-NP-Z1-9]{93}$/
            ]
        };
        const currencyPatterns = patterns[currency];
        if (!currencyPatterns)
            return false;
        return currencyPatterns.some(pattern => pattern.test(address));
    };
    Object.entries(testAddresses).forEach(([currency, addresses]) => {
        console.log(`   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ${currency} –∞–¥—Ä–µ—Å–æ–≤...`);
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        addresses.valid.forEach((address, index) => {
            const isValid = validateAddress(address, currency);
            if (isValid) {
                console.log(`   ‚úÖ ${currency} –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É`);
            }
            else {
                console.log(`   ‚ùå ${currency} –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –ù–ï –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: ${address}`);
                allPassed = false;
            }
        });
        // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        addresses.invalid.forEach((address, index) => {
            const isValid = validateAddress(address, currency);
            if (!isValid) {
                console.log(`   ‚úÖ ${currency} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
            }
            else {
                console.log(`   ‚ùå ${currency} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –ù–ï –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${address}`);
                allPassed = false;
            }
        });
    });
    return allPassed;
}
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
    console.log('üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç');
    console.log('='.repeat(60));
    const results = {};
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.litecoin = await testLitecoinClient();
    results.dash = await testDashClient();
    results.zcash = await testZcashClient();
    results.blockchainManager = await testBlockchainManager();
    results.addressValidation = testAddressValidation();
    // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('='.repeat(60));
    Object.entries(results).forEach(([testName, passed]) => {
        const status = passed ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
        const formattedName = testName.charAt(0).toUpperCase() + testName.slice(1);
        console.log(`${status} ${formattedName}`);
    });
    const passedCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;
    console.log('='.repeat(60));
    console.log(`üèÜ –ò–¢–û–ì–û: ${passedCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ`);
    if (passedCount === totalCount) {
        console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
        console.log('‚ú® –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (LTC, DASH, ZEC) –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    }
    else {
        console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
    }
    console.log('\nüí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:');
    console.log('   –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:');
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –Ω–æ–¥–∞–º');
    console.log('   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è');
}
// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
        process.exit(1);
    });
}
//# sourceMappingURL=test-new-cryptocurrencies.js.map