"use strict";
/**
 * Redis Session Manager –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–∏–∫—Å–µ—Ä–∞
 *
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç:
 * - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
 * - Rate limiting –∏ anti-spam –∑–∞—â–∏—Ç–∞
 * - Distributed locks –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * - User fingerprinting –∏ fraud detection
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisSessionManager = void 0;
const logger_1 = require("../logger");
const events_1 = require("events");
const crypto_1 = require("crypto");
/**
 * –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π Session Manager –Ω–∞ Redis
 */
class RedisSessionManager extends events_1.EventEmitter {
    constructor(cache) {
        super();
        // Prefixes –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        this.PREFIXES = {
            SESSION: 'session:',
            RATE_LIMIT: 'rate_limit:',
            LOCK: 'lock:',
            ANTI_SPAM: 'anti_spam:',
            TEMP_DATA: 'temp_data:',
            TOKEN: 'token:',
            FINGERPRINT: 'fingerprint:',
            IP_TRACKING: 'ip_track:'
        };
        // TTL –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        this.TTL = {
            SESSION: 3600 * 2, // 2 —á–∞—Å–∞
            RATE_LIMIT: 3600, // 1 —á–∞—Å
            LOCK: 300, // 5 –º–∏–Ω—É—Ç
            ANTI_SPAM: 3600 * 24, // 24 —á–∞—Å–∞
            TEMP_DATA: 1800, // 30 –º–∏–Ω—É—Ç
            TOKEN: 3600, // 1 —á–∞—Å
            FINGERPRINT: 3600 * 24 * 7, // 1 –Ω–µ–¥–µ–ª—è
            IP_TRACKING: 3600 * 24 // 24 —á–∞—Å–∞
        };
        this.cache = cache;
        logger_1.enhancedDbLogger.info('üîê RedisSessionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    /**
     * SESSION MANAGEMENT
     */
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
     */
    async createSession(ipAddress, userAgent, userId) {
        try {
            const sessionId = this.generateSecureId();
            const fingerprint = this.generateFingerprint(ipAddress, userAgent);
            const session = {
                id: sessionId,
                userId,
                ipAddress,
                userAgent,
                fingerprint,
                createdAt: new Date(),
                lastActivity: new Date(),
                isAuthenticated: !!userId,
                permissions: [],
                metadata: {}
            };
            const key = `${this.PREFIXES.SESSION}${sessionId}`;
            await this.cache.set(key, session, this.TTL.SESSION);
            // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ fingerprint –¥–ª—è fraud detection
            const fingerprintKey = `${this.PREFIXES.FINGERPRINT}${fingerprint}`;
            const existingSessions = await this.cache.get(fingerprintKey) || [];
            existingSessions.push(sessionId);
            await this.cache.set(fingerprintKey, existingSessions, this.TTL.FINGERPRINT);
            logger_1.enhancedDbLogger.debug('üîë –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞', {
                sessionId,
                fingerprint: fingerprint.substring(0, 16),
                isAuthenticated: session.isAuthenticated
            });
            this.emit('session_created', session);
            return session;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏', { ipAddress, error });
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    async getSession(sessionId) {
        try {
            const key = `${this.PREFIXES.SESSION}${sessionId}`;
            const session = await this.cache.get(key);
            if (session) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                session.lastActivity = new Date();
                await this.cache.set(key, session, this.TTL.SESSION);
            }
            return session;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏', { sessionId, error });
            return null;
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    async updateSession(sessionId, updates) {
        try {
            const session = await this.getSession(sessionId);
            if (!session)
                return false;
            const updatedSession = {
                ...session,
                ...updates,
                lastActivity: new Date()
            };
            const key = `${this.PREFIXES.SESSION}${sessionId}`;
            await this.cache.set(key, updatedSession, this.TTL.SESSION);
            logger_1.enhancedDbLogger.debug('üîÑ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', { sessionId });
            this.emit('session_updated', updatedSession);
            return true;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏', { sessionId, error });
            return false;
        }
    }
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (logout)
     */
    async destroySession(sessionId) {
        try {
            const session = await this.getSession(sessionId);
            if (!session)
                return false;
            const key = `${this.PREFIXES.SESSION}${sessionId}`;
            const deleted = await this.cache.delete(key);
            if (deleted) {
                logger_1.enhancedDbLogger.debug('üóëÔ∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞', { sessionId });
                this.emit('session_destroyed', { sessionId, userId: session.userId });
            }
            return deleted;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏', { sessionId, error });
            return false;
        }
    }
    /**
     * RATE LIMITING
     */
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ rate limit
     */
    async checkRateLimit(identifier, maxRequests, windowMs) {
        try {
            const key = `${this.PREFIXES.RATE_LIMIT}${identifier}`;
            const now = new Date();
            let rateLimitData = await this.cache.get(key);
            if (!rateLimitData) {
                // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
                rateLimitData = {
                    key: identifier,
                    requests: 1,
                    resetTime: new Date(now.getTime() + windowMs),
                    blocked: false,
                    firstRequest: now
                };
                await this.cache.set(key, rateLimitData, Math.ceil(windowMs / 1000));
                return {
                    allowed: true,
                    remaining: maxRequests - 1,
                    resetTime: rateLimitData.resetTime
                };
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ window
            if (now >= rateLimitData.resetTime) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                rateLimitData = {
                    key: identifier,
                    requests: 1,
                    resetTime: new Date(now.getTime() + windowMs),
                    blocked: false,
                    firstRequest: now
                };
                await this.cache.set(key, rateLimitData, Math.ceil(windowMs / 1000));
                return {
                    allowed: true,
                    remaining: maxRequests - 1,
                    resetTime: rateLimitData.resetTime
                };
            }
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            rateLimitData.requests++;
            const allowed = rateLimitData.requests <= maxRequests;
            const remaining = Math.max(0, maxRequests - rateLimitData.requests);
            if (!allowed && !rateLimitData.blocked) {
                rateLimitData.blocked = true;
                logger_1.enhancedDbLogger.warn('üö´ Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω', {
                    identifier: identifier.substring(0, 16) + '...',
                    requests: rateLimitData.requests,
                    maxRequests
                });
                this.emit('rate_limit_exceeded', { identifier, requests: rateLimitData.requests });
            }
            await this.cache.set(key, rateLimitData, Math.ceil(windowMs / 1000));
            return {
                allowed,
                remaining,
                resetTime: rateLimitData.resetTime
            };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit', { identifier, error });
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
            return {
                allowed: true,
                remaining: maxRequests,
                resetTime: new Date(Date.now() + windowMs)
            };
        }
    }
    /**
     * DISTRIBUTED LOCKING
     */
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ distributed lock
     */
    async acquireLock(lockKey, timeoutMs = 30000, owner) {
        try {
            const lockOwner = owner || this.generateSecureId();
            const key = `${this.PREFIXES.LOCK}${lockKey}`;
            const now = new Date();
            const expiresAt = new Date(now.getTime() + timeoutMs);
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å lock —Å –ø–æ–º–æ—â—å—é SET NX EX
            const acquired = await this.cache.executeCommand('set', [
                key,
                lockOwner,
                'PX',
                timeoutMs,
                'NX'
            ], false);
            if (acquired === 'OK') {
                const lock = {
                    key: lockKey,
                    owner: lockOwner,
                    acquiredAt: now,
                    expiresAt
                };
                logger_1.enhancedDbLogger.debug('üîí Distributed lock –ø–æ–ª—É—á–µ–Ω', {
                    lockKey,
                    owner: lockOwner.substring(0, 16)
                });
                this.emit('lock_acquired', lock);
                return { acquired: true, lock };
            }
            return { acquired: false };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è distributed lock', { lockKey, error });
            return { acquired: false };
        }
    }
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ distributed lock
     */
    async releaseLock(lockKey, owner) {
        try {
            const key = `${this.PREFIXES.LOCK}${lockKey}`;
            // Lua script –¥–ª—è atomic check and delete
            const luaScript = `
        if redis.call("get", KEYS[1]) == ARGV[1] then
          return redis.call("del", KEYS[1])
        else
          return 0
        end
      `;
            const result = await this.cache.executeCommand('eval', [
                luaScript,
                1,
                key,
                owner
            ], false);
            const released = result === 1;
            if (released) {
                logger_1.enhancedDbLogger.debug('üîì Distributed lock –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω', {
                    lockKey,
                    owner: owner.substring(0, 16)
                });
                this.emit('lock_released', { lockKey, owner });
            }
            return released;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è distributed lock', { lockKey, error });
            return false;
        }
    }
    /**
     * ANTI-SPAM & FRAUD DETECTION
     */
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    async trackSuspiciousActivity(identifier, activity, severity = 'MEDIUM') {
        try {
            const key = `${this.PREFIXES.ANTI_SPAM}${identifier}`;
            let antiSpamData = await this.cache.get(key);
            if (!antiSpamData) {
                antiSpamData = {
                    identifier,
                    requestCount: 1,
                    suspiciousActivity: [activity],
                    riskScore: this.calculateRiskScore(activity, severity),
                    lastRequest: new Date(),
                    blocked: false
                };
            }
            else {
                antiSpamData.requestCount++;
                antiSpamData.suspiciousActivity.push(activity);
                antiSpamData.riskScore += this.calculateRiskScore(activity, severity);
                antiSpamData.lastRequest = new Date();
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ risk score —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π
                if (antiSpamData.riskScore >= 100 && !antiSpamData.blocked) {
                    antiSpamData.blocked = true;
                    antiSpamData.blockReason = 'Suspicious activity threshold exceeded';
                    logger_1.enhancedDbLogger.warn('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', {
                        identifier: identifier.substring(0, 16) + '...',
                        riskScore: antiSpamData.riskScore,
                        activities: antiSpamData.suspiciousActivity.length
                    });
                    this.emit('user_blocked', antiSpamData);
                }
            }
            await this.cache.set(key, antiSpamData, this.TTL.ANTI_SPAM);
            return antiSpamData;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', {
                identifier,
                activity,
                error
            });
            throw error;
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async isBlocked(identifier) {
        try {
            const key = `${this.PREFIXES.ANTI_SPAM}${identifier}`;
            const antiSpamData = await this.cache.get(key);
            return antiSpamData?.blocked || false;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', { identifier, error });
            return false;
        }
    }
    /**
     * TEMPORARY DATA MANAGEMENT
     */
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async setTempData(key, data, ttlSeconds = this.TTL.TEMP_DATA) {
        try {
            const fullKey = `${this.PREFIXES.TEMP_DATA}${key}`;
            await this.cache.set(fullKey, data, ttlSeconds);
            logger_1.enhancedDbLogger.debug('üìù –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', { key, ttl: ttlSeconds });
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', { key, error });
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async getTempData(key) {
        try {
            const fullKey = `${this.PREFIXES.TEMP_DATA}${key}`;
            return await this.cache.get(fullKey);
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', { key, error });
            return null;
        }
    }
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async deleteTempData(key) {
        try {
            const fullKey = `${this.PREFIXES.TEMP_DATA}${key}`;
            return await this.cache.delete(fullKey);
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', { key, error });
            return false;
        }
    }
    /**
     * TOKEN MANAGEMENT
     */
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     */
    async createToken(purpose, data, ttlSeconds = this.TTL.TOKEN) {
        try {
            const token = this.generateSecureToken();
            const key = `${this.PREFIXES.TOKEN}${token}`;
            const tokenData = {
                purpose,
                data,
                createdAt: new Date(),
                expiresAt: new Date(Date.now() + ttlSeconds * 1000)
            };
            await this.cache.set(key, tokenData, ttlSeconds);
            logger_1.enhancedDbLogger.debug('üé´ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω', {
                token: token.substring(0, 16) + '...',
                purpose,
                ttl: ttlSeconds
            });
            return token;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', { purpose, error });
            throw error;
        }
    }
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
     */
    async validateToken(token, expectedPurpose) {
        try {
            const key = `${this.PREFIXES.TOKEN}${token}`;
            const tokenData = await this.cache.get(key);
            if (!tokenData)
                return null;
            if (expectedPurpose && tokenData.purpose !== expectedPurpose) {
                logger_1.enhancedDbLogger.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é', {
                    token: token.substring(0, 16) + '...',
                    expected: expectedPurpose,
                    actual: tokenData.purpose
                });
                return null;
            }
            return tokenData.data;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞', {
                token: token.substring(0, 16) + '...',
                error
            });
            return null;
        }
    }
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
     */
    async consumeToken(token, expectedPurpose) {
        try {
            const data = await this.validateToken(token, expectedPurpose);
            if (!data)
                return null;
            const key = `${this.PREFIXES.TOKEN}${token}`;
            await this.cache.delete(key);
            logger_1.enhancedDbLogger.debug('üé´ –¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏ —É–¥–∞–ª–µ–Ω', {
                token: token.substring(0, 16) + '...'
            });
            return data;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', {
                token: token.substring(0, 16) + '...',
                error
            });
            return null;
        }
    }
    /**
     * UTILITY METHODS
     */
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ ID
     */
    generateSecureId() {
        return (0, crypto_1.randomBytes)(32).toString('hex');
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
     */
    generateSecureToken() {
        return (0, crypto_1.randomBytes)(48).toString('base64url');
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fingerprint –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    generateFingerprint(ipAddress, userAgent) {
        const data = `${ipAddress}:${userAgent}`;
        return (0, crypto_1.createHash)('sha256').update(data).digest('hex');
    }
    /**
     * –†–∞—Å—á–µ—Ç risk score –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    calculateRiskScore(activity, severity) {
        const baseScores = {
            'LOW': 5,
            'MEDIUM': 15,
            'HIGH': 30
        };
        const activityMultipliers = {
            'rapid_requests': 2,
            'suspicious_ip': 1.5,
            'invalid_parameters': 1.2,
            'potential_bot': 2.5,
            'blacklisted_address': 3,
            'unusual_pattern': 1.8
        };
        const baseScore = baseScores[severity];
        const multiplier = activityMultipliers[activity] || 1;
        return Math.round(baseScore * multiplier);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π
     */
    getSessionStats() {
        return {
            ...this.cache.getStats(),
            prefixes: Object.keys(this.PREFIXES),
            ttlSettings: this.TTL
        };
    }
    /**
     * Graceful shutdown
     */
    async shutdown() {
        logger_1.enhancedDbLogger.info('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RedisSessionManager...');
        this.removeAllListeners();
        logger_1.enhancedDbLogger.info('‚úÖ RedisSessionManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}
exports.RedisSessionManager = RedisSessionManager;
exports.default = RedisSessionManager;
//# sourceMappingURL=RedisSessionManager.js.map