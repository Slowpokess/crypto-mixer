"use strict";
/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –ø—É–ª–∞
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - Graceful degradation –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ë–î
 * - Connection warming –∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
 * - Read/Write —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è support
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionPoolManager = void 0;
const sequelize_1 = require("sequelize");
const logger_1 = require("../logger");
const events_1 = require("events");
/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
class ConnectionPoolManager extends events_1.EventEmitter {
    constructor(databaseUrl, config = {}) {
        super();
        this.readPools = [];
        this.healthStatus = new Map();
        this.isShuttingDown = false;
        this.acquireTimes = [];
        this.MAX_ACQUIRE_SAMPLES = 100;
        this.config = {
            minConnections: 5,
            maxConnections: 20,
            acquireTimeout: 60000,
            idleTimeout: 30000,
            evictTimeout: 180000,
            adaptivePooling: true,
            maxPoolSizeIncrease: 10,
            poolSizeDecreaseThreshold: 0.3,
            healthCheckInterval: 30000,
            healthCheckTimeout: 5000,
            maxRetries: 3,
            enableReadReplicas: false,
            readWriteRatio: 0.7,
            warmupConnections: true,
            warmupSize: 3,
            ...config
        };
        this.stats = {
            totalConnections: 0,
            activeConnections: 0,
            idleConnections: 0,
            waitingClients: 0,
            totalRequests: 0,
            failedRequests: 0,
            averageAcquireTime: 0,
            peakConnections: 0,
            poolUtilization: 0
        };
        this.initializePools(databaseUrl);
        this.startHealthChecks();
        this.startAdaptivePooling();
        logger_1.enhancedDbLogger.info('üèä‚Äç‚ôÇÔ∏è ConnectionPoolManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
            config: this.config,
            masterPool: true,
            readReplicas: this.readPools.length
        });
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    initializePools(databaseUrl) {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä –ø—É–ª (read/write)
        this.masterPool = new sequelize_1.Sequelize(databaseUrl, {
            pool: {
                min: this.config.minConnections,
                max: this.config.maxConnections,
                acquire: this.config.acquireTimeout,
                idle: this.config.idleTimeout,
                evict: this.config.evictTimeout
            },
            dialectOptions: {
                connectTimeout: 20000,
                acquireTimeout: this.config.acquireTimeout,
                timeout: 60000,
            },
            logging: (sql, timing) => {
                if (timing && timing > 1000) {
                    logger_1.enhancedDbLogger.warn('üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ master pool', {
                        sql: sql.substring(0, 200),
                        timing
                    });
                }
            },
            logQueryParameters: process.env.NODE_ENV === 'development',
            benchmark: true,
            retry: {
                max: this.config.maxRetries,
                backoffBase: 1000,
                backoffExponent: 2
            }
        });
        // –°–æ–∑–¥–∞–µ–º read replica –ø—É–ª—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if (this.config.enableReadReplicas && this.config.readReplicaUrls) {
            this.config.readReplicaUrls.forEach((url, index) => {
                const readPool = new sequelize_1.Sequelize(url, {
                    pool: {
                        min: Math.max(1, Math.floor(this.config.minConnections / 2)),
                        max: Math.floor(this.config.maxConnections * 0.6),
                        acquire: this.config.acquireTimeout,
                        idle: this.config.idleTimeout,
                        evict: this.config.evictTimeout
                    },
                    dialectOptions: {
                        connectTimeout: 20000,
                        acquireTimeout: this.config.acquireTimeout,
                        timeout: 60000,
                    },
                    logging: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è read —Ä–µ–ø–ª–∏–∫
                    retry: {
                        max: this.config.maxRetries,
                        backoffBase: 1000,
                        backoffExponent: 2
                    }
                });
                this.readPools.push(readPool);
                logger_1.enhancedDbLogger.info(`üìñ Read replica pool #${index + 1} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
            });
        }
        // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this.config.warmupConnections) {
            this.warmupConnections();
        }
    }
    /**
     * –ü—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è initial response time
     */
    async warmupConnections() {
        try {
            logger_1.enhancedDbLogger.info('üî• –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π', { warmupSize: this.config.warmupSize });
            const warmupPromises = [];
            // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º master pool
            for (let i = 0; i < this.config.warmupSize; i++) {
                warmupPromises.push(this.masterPool.query('SELECT 1 as warmup').catch(err => {
                    logger_1.enhancedDbLogger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ master pool —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', { error: err.message });
                }));
            }
            // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º read replicas
            this.readPools.forEach((pool, index) => {
                for (let i = 0; i < Math.max(1, Math.floor(this.config.warmupSize / 2)); i++) {
                    warmupPromises.push(pool.query('SELECT 1 as warmup').catch(err => {
                        logger_1.enhancedDbLogger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ read replica #${index + 1} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`, { error: err.message });
                    }));
                }
            });
            await Promise.allSettled(warmupPromises);
            logger_1.enhancedDbLogger.info('‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π', { error });
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     */
    getPool(isReadOnly = false) {
        // –ï—Å–ª–∏ read replicas –æ—Ç–∫–ª—é—á–µ–Ω—ã, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º master
        if (!this.config.enableReadReplicas || this.readPools.length === 0) {
            return this.masterPool;
        }
        // –î–ª—è write –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º master
        if (!isReadOnly) {
            return this.masterPool;
        }
        // –î–ª—è read –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–±–∏—Ä–∞–µ–º –∑–¥–æ—Ä–æ–≤—É—é replica –∏–ª–∏ fallback –Ω–∞ master
        const healthyReplicas = this.readPools.filter((_, index) => {
            const health = this.healthStatus.get(`read_replica_${index}`);
            return health?.isHealthy !== false;
        });
        if (healthyReplicas.length === 0) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è –ù–µ—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö read replicas, –∏—Å–ø–æ–ª—å–∑—É–µ–º master pool');
            return this.masterPool;
        }
        // Round-robin selection —Å—Ä–µ–¥–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö —Ä–µ–ø–ª–∏–∫
        const selectedIndex = Math.floor(Math.random() * healthyReplicas.length);
        return healthyReplicas[selectedIndex];
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    async getPoolStats() {
        try {
            const masterPoolStats = this.masterPool.connectionManager.pool;
            this.stats = {
                totalConnections: masterPoolStats.size,
                activeConnections: masterPoolStats.using,
                idleConnections: masterPoolStats.size - masterPoolStats.using,
                waitingClients: masterPoolStats.waiting,
                totalRequests: this.stats.totalRequests,
                failedRequests: this.stats.failedRequests,
                averageAcquireTime: this.calculateAverageAcquireTime(),
                peakConnections: Math.max(this.stats.peakConnections, masterPoolStats.size),
                poolUtilization: masterPoolStats.size > 0 ? (masterPoolStats.using / masterPoolStats.size) * 100 : 0
            };
            return { ...this.stats };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞', { error });
            return this.stats;
        }
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –ø—É–ª–æ–º
     */
    async executeTransaction(callback, isReadOnly = false) {
        const startTime = Date.now();
        const pool = this.getPool(isReadOnly);
        this.stats.totalRequests++;
        try {
            const result = await pool.transaction(callback);
            const acquireTime = Date.now() - startTime;
            this.recordAcquireTime(acquireTime);
            return result;
        }
        catch (error) {
            this.stats.failedRequests++;
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
                error,
                isReadOnly,
                pool: isReadOnly ? 'read' : 'master'
            });
            throw error;
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    startHealthChecks() {
        this.healthCheckTimer = setInterval(async () => {
            await this.performHealthChecks();
        }, this.config.healthCheckInterval);
        logger_1.enhancedDbLogger.info('üíì Health checks –∑–∞–ø—É—â–µ–Ω—ã', {
            interval: this.config.healthCheckInterval
        });
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è
     */
    async performHealthChecks() {
        if (this.isShuttingDown)
            return;
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º master pool
            await this.checkPoolHealth('master', this.masterPool);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º read replicas
            for (let i = 0; i < this.readPools.length; i++) {
                await this.checkPoolHealth(`read_replica_${i}`, this.readPools[i]);
            }
            this.emit('healthcheck_completed', this.healthStatus);
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ health check', { error });
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–ª–∞
     */
    async checkPoolHealth(poolName, pool) {
        const startTime = Date.now();
        try {
            await Promise.race([
                pool.query('SELECT 1 as health_check'),
                new Promise((_, reject) => setTimeout(() => reject(new Error('Health check timeout')), this.config.healthCheckTimeout))
            ]);
            const responseTime = Date.now() - startTime;
            this.healthStatus.set(poolName, {
                isHealthy: true,
                responseTime,
                lastCheck: new Date()
            });
            if (responseTime > 5000) {
                logger_1.enhancedDbLogger.warn(`üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π health check –¥–ª—è ${poolName}`, { responseTime });
            }
        }
        catch (error) {
            this.healthStatus.set(poolName, {
                isHealthy: false,
                responseTime: Date.now() - startTime,
                errorMessage: error.message,
                lastCheck: new Date()
            });
            logger_1.enhancedDbLogger.error(`‚ùå Health check failed –¥–ª—è ${poolName}`, {
                error: error.message
            });
            this.emit('pool_unhealthy', { poolName, error });
        }
    }
    /**
     * –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –ø—É–ª–∞
     */
    startAdaptivePooling() {
        if (!this.config.adaptivePooling)
            return;
        this.adaptiveTimer = setInterval(async () => {
            await this.adjustPoolSize();
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        logger_1.enhancedDbLogger.info('üéõÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–ª–æ–º –∑–∞–ø—É—â–µ–Ω–æ');
    }
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞
     */
    async adjustPoolSize() {
        if (this.isShuttingDown)
            return;
        try {
            const stats = await this.getPoolStats();
            // –ï—Å–ª–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤—ã—Å–æ–∫–∞—è –∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
            if (stats.poolUtilization > 80 && stats.waitingClients > 0) {
                const currentMax = this.masterPool.options.pool?.max || this.config.maxConnections;
                const newMax = Math.min(currentMax + this.config.maxPoolSizeIncrease, this.config.maxConnections * 2 // –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ–º —É–¥–≤–æ–µ–Ω–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                );
                if (newMax > currentMax) {
                    logger_1.enhancedDbLogger.info('üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞', {
                        oldMax: currentMax,
                        newMax,
                        utilization: stats.poolUtilization,
                        waitingClients: stats.waitingClients
                    });
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                    await this.resizePool(newMax);
                }
            }
            // –ï—Å–ª–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∑–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            else if (stats.poolUtilization < this.config.poolSizeDecreaseThreshold * 100) {
                const currentMax = this.masterPool.options.pool?.max || this.config.maxConnections;
                const newMax = Math.max(Math.floor(currentMax * 0.8), this.config.minConnections);
                if (newMax < currentMax) {
                    logger_1.enhancedDbLogger.info('üìâ –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞', {
                        oldMax: currentMax,
                        newMax,
                        utilization: stats.poolUtilization
                    });
                    await this.resizePool(newMax);
                }
            }
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–ª–æ–º', { error });
        }
    }
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞
     */
    async resizePool(newMaxSize) {
        try {
            // Sequelize –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞
            // –ü–æ—ç—Ç–æ–º—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            logger_1.enhancedDbLogger.info('‚ÑπÔ∏è –†–∞–∑–º–µ—Ä –ø—É–ª–∞ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏', {
                newMaxSize
            });
            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.emit('pool_resize_requested', { newMaxSize });
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞', { error });
        }
    }
    /**
     * –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    recordAcquireTime(time) {
        this.acquireTimes.push(time);
        if (this.acquireTimes.length > this.MAX_ACQUIRE_SAMPLES) {
            this.acquireTimes.shift();
        }
    }
    /**
     * –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    calculateAverageAcquireTime() {
        if (this.acquireTimes.length === 0)
            return 0;
        const sum = this.acquireTimes.reduce((a, b) => a + b, 0);
        return sum / this.acquireTimes.length;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ
     */
    getHealthStatus() {
        return new Map(this.healthStatus);
    }
    /**
     * Graceful shutdown –≤—Å–µ—Ö –ø—É–ª–æ–≤
     */
    async shutdown() {
        this.isShuttingDown = true;
        logger_1.enhancedDbLogger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown ConnectionPoolManager');
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if (this.healthCheckTimer)
            clearInterval(this.healthCheckTimer);
        if (this.adaptiveTimer)
            clearInterval(this.adaptiveTimer);
        try {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—É–ª—ã
            const closePromises = [
                this.masterPool.close(),
                ...this.readPools.map(pool => pool.close())
            ];
            await Promise.all(closePromises);
            logger_1.enhancedDbLogger.info('‚úÖ ConnectionPoolManager —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown ConnectionPoolManager', { error });
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ master –ø—É–ª–∞ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á)
     */
    getMasterPool() {
        return this.masterPool;
    }
    /**
     * –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—É–ª–æ–≤
     */
    async reconnectAll() {
        logger_1.enhancedDbLogger.info('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—É–ª–æ–≤');
        try {
            await this.masterPool.authenticate();
            for (const [index, pool] of this.readPools.entries()) {
                try {
                    await pool.authenticate();
                }
                catch (error) {
                    logger_1.enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è read replica #${index + 1}`, { error });
                }
            }
            logger_1.enhancedDbLogger.info('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è master pool', { error });
            throw error;
        }
    }
}
exports.ConnectionPoolManager = ConnectionPoolManager;
exports.default = ConnectionPoolManager;
//# sourceMappingURL=ConnectionPoolManager.js.map