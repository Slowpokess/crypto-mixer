"use strict";
/**
 * Redis-powered –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Query Builder
 *
 * –†–∞—Å—à–∏—Ä—è–µ—Ç OptimizedQueryBuilder —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
 * - –ó–∞–º–µ–Ω–∞ in-memory –∫—ç—à–∞ –Ω–∞ Redis
 * - Intelligent cache invalidation
 * - Query result caching —Å smart TTL
 * - Database query optimization with Redis backing
 * - Performance monitoring —Å Redis analytics
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisOptimizedQueryBuilder = void 0;
const sequelize_1 = require("sequelize");
const logger_1 = require("../logger");
const ErrorTypes_1 = require("../../utils/errors/ErrorTypes");
/**
 * Redis-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Query Builder
 */
class RedisOptimizedQueryBuilder {
    constructor(sequelize, redisCache, performanceMonitor) {
        this.queryStats = new Map();
        // Cache invalidation mapping
        this.invalidationTagsMap = new Map();
        this.sequelize = sequelize;
        this.redisCache = redisCache;
        this.performanceMonitor = performanceMonitor;
        logger_1.enhancedDbLogger.info('üöÄ RedisOptimizedQueryBuilder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Redis backing');
    }
    /**
     * REDIS-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è MixRequest
     */
    async getMixRequestStatistics(filters = {}) {
        const operationId = await logger_1.enhancedDbLogger.startOperation('getMixRequestStatistics');
        const span = this.performanceMonitor?.startSpan('redis_db_mix_request_stats', 'database');
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π cache key
            const cacheKey = this.generateSmartCacheKey('mix_request_stats', filters);
            const invalidationTags = ['mix_requests', 'statistics'];
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis –∫—ç—à–∞
            const cachedResult = await this.redisCache.get(cacheKey);
            if (cachedResult) {
                if (span)
                    this.performanceMonitor?.finishSpan(span, 'success');
                await logger_1.enhancedDbLogger.endOperation(operationId, true);
                logger_1.enhancedDbLogger.debug('‚úÖ Redis cache hit –¥–ª—è MixRequest —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', { cacheKey });
                return cachedResult;
            }
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            const whereClause = this.buildDateFilter(filters.startDate, filters.endDate);
            const currencyFilter = filters.currency ? `AND currency = :currency` : '';
            // –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
            const [statsResult] = await this.executeQuery(`
        SELECT 
          COUNT(*) as total,
          SUM(CASE WHEN status = 'COMPLETED' THEN 1 ELSE 0 END) as completed,
          SUM(CASE WHEN status = 'PENDING' THEN 1 ELSE 0 END) as pending,
          SUM(CASE WHEN status = 'DEPOSITED' THEN 1 ELSE 0 END) as deposited,
          SUM(CASE WHEN status = 'POOLING' THEN 1 ELSE 0 END) as pooling,
          SUM(CASE WHEN status = 'MIXING' THEN 1 ELSE 0 END) as mixing,
          SUM(CASE WHEN status = 'FAILED' THEN 1 ELSE 0 END) as failed,
          SUM(CASE WHEN status = 'CANCELLED' THEN 1 ELSE 0 END) as cancelled
        FROM mix_requests 
        WHERE 1=1 ${whereClause} ${currencyFilter}
      `, {
                startDate: filters.startDate,
                endDate: filters.endDate,
                currency: filters.currency
            }, {
                cache: false, // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Redis, –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫—ç—à
                explain: process.env.NODE_ENV === 'development'
            });
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º
            const currencyStats = await this.executeQuery(`
        SELECT 
          currency,
          COUNT(*) as count,
          SUM(input_amount) as total_amount,
          AVG(input_amount) as avg_amount
        FROM mix_requests 
        WHERE 1=1 ${whereClause} ${currencyFilter}
        GROUP BY currency
      `, {
                startDate: filters.startDate,
                endDate: filters.endDate,
                currency: filters.currency
            }, {
                cache: false
            });
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const total = Number(statsResult[0]?.total || 0);
            const completed = Number(statsResult[0]?.completed || 0);
            const byStatus = {
                COMPLETED: Number(statsResult[0]?.completed || 0),
                PENDING: Number(statsResult[0]?.pending || 0),
                DEPOSITED: Number(statsResult[0]?.deposited || 0),
                POOLING: Number(statsResult[0]?.pooling || 0),
                MIXING: Number(statsResult[0]?.mixing || 0),
                FAILED: Number(statsResult[0]?.failed || 0),
                CANCELLED: Number(statsResult[0]?.cancelled || 0)
            };
            const byCurrency = {};
            const totalAmount = {};
            const averageAmount = {};
            currencyStats.forEach(stat => {
                const currency = stat.currency;
                byCurrency[currency] = Number(stat.count);
                totalAmount[currency] = Number(stat.total_amount || 0);
                averageAmount[currency] = Number(stat.avg_amount || 0);
            });
            const successRate = total > 0 ? (completed / total) * 100 : 0;
            const result = {
                total,
                byStatus,
                byCurrency,
                totalAmount,
                averageAmount,
                successRate
            };
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis —Å —É–º–Ω—ã–º TTL
            const ttl = this.calculateSmartTTL(total, 'statistics');
            await this.redisCache.set(cacheKey, result, ttl);
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º invalidation tags
            this.registerInvalidationTags(cacheKey, invalidationTags);
            if (span)
                this.performanceMonitor?.finishSpan(span, 'success');
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.debug('üíæ MixRequest —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –≤ Redis', {
                cacheKey,
                ttl,
                total
            });
            return result;
        }
        catch (error) {
            if (span)
                this.performanceMonitor?.finishSpan(span, 'error');
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw new ErrorTypes_1.DatabaseError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ MixRequest', ErrorTypes_1.ErrorCode.QUERY_FAILED, { operation: 'getMixRequestStatistics', filters });
        }
    }
    /**
     * REDIS-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è Wallet
     */
    async getWalletStatistics() {
        const operationId = await logger_1.enhancedDbLogger.startOperation('getWalletStatistics');
        const span = this.performanceMonitor?.startSpan('redis_db_wallet_stats', 'database');
        try {
            const cacheKey = 'wallet_statistics';
            const invalidationTags = ['wallets', 'statistics'];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫—ç—à
            const cachedResult = await this.redisCache.get(cacheKey);
            if (cachedResult) {
                if (span)
                    this.performanceMonitor?.finishSpan(span, 'success');
                await logger_1.enhancedDbLogger.endOperation(operationId, true);
                logger_1.enhancedDbLogger.debug('‚úÖ Redis cache hit –¥–ª—è Wallet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                return cachedResult;
            }
            // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const [mainStats] = await this.executeQuery(`
        SELECT 
          COUNT(*) as total,
          SUM(CASE WHEN is_active = true THEN 1 ELSE 0 END) as active_wallets,
          SUM(CASE WHEN is_locked = true THEN 1 ELSE 0 END) as locked_wallets
        FROM wallets
      `, {}, {
                cache: false
            });
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            const typeStats = await this.executeQuery(`
        SELECT 
          type,
          COUNT(*) as count
        FROM wallets 
        GROUP BY type
      `, {}, {
                cache: false
            });
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º –∏ –±–∞–ª–∞–Ω—Å–∞–º
            const currencyStats = await this.executeQuery(`
        SELECT 
          currency,
          COUNT(*) as count,
          SUM(balance) as total_balance
        FROM wallets 
        GROUP BY currency
      `, {}, {
                cache: false
            });
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const byType = {};
            typeStats.forEach(stat => {
                byType[stat.type] = Number(stat.count);
            });
            const byCurrency = {};
            const totalBalance = {};
            currencyStats.forEach(stat => {
                const currency = stat.currency;
                byCurrency[currency] = Number(stat.count);
                totalBalance[currency] = Number(stat.total_balance || 0);
            });
            const result = {
                total: Number(mainStats[0]?.total || 0),
                byType,
                byCurrency,
                totalBalance,
                activeWallets: Number(mainStats[0]?.active_wallets || 0),
                lockedWallets: Number(mainStats[0]?.locked_wallets || 0)
            };
            // –ö—ç—à–∏—Ä—É–µ–º –≤ Redis
            const ttl = this.calculateSmartTTL(result.total, 'wallet_stats');
            await this.redisCache.set(cacheKey, result, ttl);
            this.registerInvalidationTags(cacheKey, invalidationTags);
            if (span)
                this.performanceMonitor?.finishSpan(span, 'success');
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.debug('üíæ Wallet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞ –≤ Redis', {
                cacheKey,
                ttl
            });
            return result;
        }
        catch (error) {
            if (span)
                this.performanceMonitor?.finishSpan(span, 'error');
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw new ErrorTypes_1.DatabaseError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Wallet', ErrorTypes_1.ErrorCode.QUERY_FAILED, { operation: 'getWalletStatistics' });
        }
    }
    /**
     * REDIS-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ MixRequest —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
     */
    async findMixRequestsWithRelations(filters) {
        const operationId = await logger_1.enhancedDbLogger.startOperation('findMixRequestsWithRelations');
        const span = this.performanceMonitor?.startSpan('redis_db_mix_request_find', 'database');
        try {
            const page = filters.page || 1;
            const limit = Math.min(filters.limit || 20, 100);
            const offset = (page - 1) * limit;
            // –£–º–Ω—ã–π cache key —É—á–∏—Ç—ã–≤–∞—é—â–∏–π –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
            const cacheKey = this.generateSmartCacheKey('mix_requests_with_relations', {
                ...filters,
                page,
                limit
            });
            const invalidationTags = ['mix_requests', 'deposit_addresses', 'output_transactions'];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫—ç—à
            const cachedResult = await this.redisCache.get(cacheKey);
            if (cachedResult) {
                if (span)
                    this.performanceMonitor?.finishSpan(span, 'success');
                await logger_1.enhancedDbLogger.endOperation(operationId, true);
                logger_1.enhancedDbLogger.debug('‚úÖ Redis cache hit –¥–ª—è MixRequest –ø–æ–∏—Å–∫–∞', { cacheKey });
                return cachedResult;
            }
            // –°—Ç—Ä–æ–∏–º WHERE —É—Å–ª–æ–≤–∏—è
            const whereConditions = ['1=1'];
            const replacements = { limit, offset };
            if (filters.currency) {
                whereConditions.push('mr.currency = :currency');
                replacements.currency = filters.currency;
            }
            if (filters.status) {
                if (Array.isArray(filters.status)) {
                    whereConditions.push('mr.status IN (:statuses)');
                    replacements.statuses = filters.status;
                }
                else {
                    whereConditions.push('mr.status = :status');
                    replacements.status = filters.status;
                }
            }
            if (filters.minAmount) {
                whereConditions.push('mr.input_amount >= :minAmount');
                replacements.minAmount = filters.minAmount;
            }
            if (filters.maxAmount) {
                whereConditions.push('mr.input_amount <= :maxAmount');
                replacements.maxAmount = filters.maxAmount;
            }
            const dateFilter = this.buildDateFilter(filters.startDate, filters.endDate, 'mr.');
            if (dateFilter) {
                whereConditions.push(dateFilter.replace('WHERE', ''));
                if (filters.startDate)
                    replacements.startDate = filters.startDate;
                if (filters.endDate)
                    replacements.endDate = filters.endDate;
            }
            const whereClause = whereConditions.join(' AND ');
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JOIN –∑–∞–ø—Ä–æ—Å
            const query = `
        SELECT 
          mr.*,
          da.id as deposit_address_id,
          da.address as deposit_address,
          da.used as deposit_address_used,
          COUNT(ot.id) as output_transactions_count,
          JSON_ARRAYAGG(
            CASE WHEN ot.id IS NOT NULL 
            THEN JSON_OBJECT(
              'id', ot.id,
              'address', ot.address,
              'amount', ot.amount,
              'txid', ot.txid,
              'output_index', ot.output_index,
              'status', ot.status
            ) END
          ) as output_transactions
        FROM mix_requests mr
        LEFT JOIN deposit_addresses da ON mr.id = da.mix_request_id
        LEFT JOIN output_transactions ot ON mr.id = ot.mix_request_id
        WHERE ${whereClause}
        GROUP BY mr.id, da.id
        ORDER BY mr.created_at DESC
        LIMIT :limit OFFSET :offset
      `;
            // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫—ç—à–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ)
            const countCacheKey = this.generateSmartCacheKey('mix_requests_count', filters);
            let total = await this.redisCache.get(countCacheKey);
            if (total === null) {
                const countQuery = `
          SELECT COUNT(DISTINCT mr.id) as total
          FROM mix_requests mr
          LEFT JOIN deposit_addresses da ON mr.id = da.mix_request_id  
          WHERE ${whereClause}
        `;
                const [countResult] = await this.executeQuery(countQuery, replacements, {
                    cache: false
                });
                total = Number(countResult?.total || 0);
                // –ö—ç—à–∏—Ä—É–µ–º count —Å –∫–æ—Ä–æ—Ç–∫–∏–º TTL
                await this.redisCache.set(countCacheKey, total, 300); // 5 –º–∏–Ω—É—Ç
                this.registerInvalidationTags(countCacheKey, invalidationTags);
            }
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            const rows = await this.executeQuery(query, replacements, {
                cache: false,
                explain: process.env.NODE_ENV === 'development'
            });
            const totalPages = Math.ceil(total / limit);
            const result = {
                rows: rows.map(this.processMixRequestRow),
                count: total,
                totalPages,
                currentPage: page,
                hasNext: page < totalPages,
                hasPrev: page > 1,
                limit,
                offset
            };
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–º–Ω—ã–º TTL
            const ttl = this.calculateSmartTTL(rows.length, 'search_results');
            await this.redisCache.set(cacheKey, result, ttl);
            this.registerInvalidationTags(cacheKey, invalidationTags);
            if (span)
                this.performanceMonitor?.finishSpan(span, 'success');
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.debug('üíæ MixRequest –ø–æ–∏—Å–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω –≤ Redis', {
                cacheKey,
                ttl,
                rowsCount: rows.length
            });
            return result;
        }
        catch (error) {
            if (span)
                this.performanceMonitor?.finishSpan(span, 'error');
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw new ErrorTypes_1.DatabaseError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ MixRequest —Å relations', ErrorTypes_1.ErrorCode.QUERY_FAILED, { operation: 'findMixRequestsWithRelations', filters });
        }
    }
    /**
     * REDIS-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
     */
    async findWalletsWithSufficientBalance(currency, minAmount, limit = 10) {
        const operationId = await logger_1.enhancedDbLogger.startOperation('findWalletsWithSufficientBalance');
        const span = this.performanceMonitor?.startSpan('redis_db_wallet_find_balance', 'database');
        try {
            const cacheKey = `wallets_balance_${currency}_${minAmount}_${limit}`;
            const invalidationTags = ['wallets', 'balances'];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫—ç—à (–∫–æ—Ä–æ—Ç–∫–∏–π TTL –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤)
            const cachedResult = await this.redisCache.get(cacheKey);
            if (cachedResult) {
                if (span)
                    this.performanceMonitor?.finishSpan(span, 'success');
                await logger_1.enhancedDbLogger.endOperation(operationId, true);
                logger_1.enhancedDbLogger.debug('‚úÖ Redis cache hit –¥–ª—è Wallet balance –ø–æ–∏—Å–∫–∞', { cacheKey });
                return cachedResult;
            }
            const query = `
        SELECT 
          w.*,
          (w.balance - :minAmount) as available_amount
        FROM wallets w
        WHERE w.currency = :currency
          AND w.balance >= :minAmount
          AND w.is_active = true
          AND w.is_locked = false
          AND w.status = 'ACTIVE'
          AND w.type IN ('HOT', 'POOL')
        ORDER BY 
          w.balance DESC,
          w.last_used_at ASC
        LIMIT :limit
      `;
            const rows = await this.executeQuery(query, {
                currency,
                minAmount,
                limit
            }, {
                cache: false
            });
            // –ö—ç—à–∏—Ä—É–µ–º —Å –∫–æ—Ä–æ—Ç–∫–∏–º TTL (–±–∞–ª–∞–Ω—Å—ã —á–∞—Å—Ç–æ –º–µ–Ω—è—é—Ç—Å—è)
            const ttl = 60; // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤
            await this.redisCache.set(cacheKey, rows, ttl);
            this.registerInvalidationTags(cacheKey, invalidationTags);
            if (span)
                this.performanceMonitor?.finishSpan(span, 'success');
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.debug('üíæ Wallet balance –ø–æ–∏—Å–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω –≤ Redis', {
                cacheKey,
                ttl,
                rowsCount: rows.length
            });
            return rows;
        }
        catch (error) {
            if (span)
                this.performanceMonitor?.finishSpan(span, 'error');
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw new ErrorTypes_1.DatabaseError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º', ErrorTypes_1.ErrorCode.QUERY_FAILED, { operation: 'findWalletsWithSufficientBalance', currency, minAmount });
        }
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    async executeQuery(query, replacements = {}, options = {}) {
        const startTime = Date.now();
        const queryKey = options.cacheKey || this.generateQueryKey(query, replacements);
        try {
            // EXPLAIN –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ development
            if (options.explain && process.env.NODE_ENV === 'development') {
                try {
                    const explainResult = await this.sequelize.query(`EXPLAIN ${query}`, {
                        replacements,
                        type: sequelize_1.QueryTypes.SELECT
                    });
                    logger_1.enhancedDbLogger.debug('üìä EXPLAIN —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {
                        query: query.substring(0, 100),
                        explain: explainResult
                    });
                }
                catch (explainError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ EXPLAIN
                }
            }
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            const result = await this.sequelize.query(query, {
                replacements,
                type: sequelize_1.QueryTypes.SELECT,
                transaction: options.transaction,
                timeout: options.timeout,
                raw: options.raw !== false
            });
            const queryTime = Date.now() - startTime;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.queryStats.set(queryKey, {
                queryTime,
                rowsReturned: Array.isArray(result) ? result.length : 1,
                rowsExamined: 0,
                indexesUsed: [],
                cacheHit: false,
                cacheSource: 'none',
                optimizationTips: []
            });
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
            if (queryTime > 1000) {
                logger_1.enhancedDbLogger.warn('üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω', {
                    query: query.substring(0, 200),
                    queryTime,
                    rowsReturned: Array.isArray(result) ? result.length : 1
                });
            }
            return result;
        }
        catch (error) {
            const queryTime = Date.now() - startTime;
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞', {
                query: query.substring(0, 200),
                error: error.message,
                queryTime,
                replacements
            });
            throw error;
        }
    }
    /**
     * –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è cache key
     */
    generateSmartCacheKey(operation, params) {
        const paramsString = JSON.stringify(params, Object.keys(params).sort());
        const hash = require('crypto')
            .createHash('sha256')
            .update(`${operation}_${paramsString}`)
            .digest('hex')
            .substring(0, 16);
        return `query:${operation}:${hash}`;
    }
    /**
     * –†–∞—Å—á–µ—Ç —É–º–Ω–æ–≥–æ TTL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    calculateSmartTTL(dataSize, type) {
        switch (type) {
            case 'statistics':
                return dataSize > 1000 ? 1800 : 900; // 30 –º–∏–Ω –∏–ª–∏ 15 –º–∏–Ω
            case 'wallet_stats':
                return 300; // 5 –º–∏–Ω—É—Ç (—á–∞—Å—Ç–æ –º–µ–Ω—è—é—Ç—Å—è)
            case 'search_results':
                return dataSize > 50 ? 600 : 300; // 10 –º–∏–Ω –∏–ª–∏ 5 –º–∏–Ω
            case 'balances':
                return 60; // 1 –º–∏–Ω—É—Ç–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            default:
                return 600; // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è invalidation tags –¥–ª—è —É–º–Ω–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    registerInvalidationTags(cacheKey, tags) {
        for (const tag of tags) {
            if (!this.invalidationTagsMap.has(tag)) {
                this.invalidationTagsMap.set(tag, []);
            }
            this.invalidationTagsMap.get(tag).push(cacheKey);
        }
    }
    /**
     * –£–º–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ —Ç–µ–≥–∞–º
     */
    async invalidateByTags(tags) {
        let totalInvalidated = 0;
        for (const tag of tags) {
            const keysToInvalidate = this.invalidationTagsMap.get(tag) || [];
            for (const key of keysToInvalidate) {
                try {
                    const deleted = await this.redisCache.delete(key);
                    if (deleted)
                        totalInvalidated++;
                }
                catch (error) {
                    logger_1.enhancedDbLogger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞', { key, error });
                }
            }
            // –û—á–∏—â–∞–µ–º mapping
            this.invalidationTagsMap.set(tag, []);
        }
        logger_1.enhancedDbLogger.info('üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
            tags,
            totalInvalidated
        });
        return totalInvalidated;
    }
    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º
     */
    buildDateFilter(startDate, endDate, prefix = '') {
        if (!startDate && !endDate)
            return '';
        const conditions = [];
        if (startDate && endDate) {
            conditions.push(`${prefix}created_at BETWEEN :startDate AND :endDate`);
        }
        else if (startDate) {
            conditions.push(`${prefix}created_at >= :startDate`);
        }
        else if (endDate) {
            conditions.push(`${prefix}created_at <= :endDate`);
        }
        return conditions.length > 0 ? `AND ${conditions.join(' AND ')}` : '';
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∞
     */
    generateQueryKey(query, replacements) {
        const queryHash = Buffer.from(query).toString('base64').substring(0, 32);
        const paramsHash = Buffer.from(JSON.stringify(replacements)).toString('base64').substring(0, 16);
        return `query_${queryHash}_${paramsHash}`;
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ MixRequest
     */
    processMixRequestRow(row) {
        try {
            // –ü–∞—Ä—Å–∏–º JSON –¥–ª—è output_transactions
            if (row.output_transactions) {
                row.output_transactions = JSON.parse(row.output_transactions).filter((tx) => tx !== null);
            }
            else {
                row.output_transactions = [];
            }
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º deposit_address
            if (row.deposit_address_id) {
                row.deposit_address = {
                    id: row.deposit_address_id,
                    address: row.deposit_address,
                    used: row.deposit_address_used
                };
            }
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
            delete row.deposit_address_id;
            delete row.deposit_address_used;
            delete row.output_transactions_count;
            return row;
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ MixRequest', { error, row });
            return row;
        }
    }
    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (–ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –≤ Redis)
     */
    async invalidateCache(pattern) {
        await this.redisCache.invalidatePattern(pattern);
        logger_1.enhancedDbLogger.info('üóëÔ∏è Redis –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞', { pattern });
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    getCacheStats() {
        return this.redisCache.getStats();
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    getQueryStats() {
        return new Map(this.queryStats);
    }
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    clearQueryStats() {
        this.queryStats.clear();
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î —Å Redis –º–µ—Ç—Ä–∏–∫–∞–º–∏
     */
    async getDatabasePerformanceStats() {
        const operationId = await logger_1.enhancedDbLogger.startOperation('getDatabasePerformanceStats');
        try {
            // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            const stats = Array.from(this.queryStats.values());
            const avgQueryTime = stats.length > 0
                ? stats.reduce((sum, stat) => sum + stat.queryTime, 0) / stats.length
                : 0;
            // Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const redisStats = this.redisCache.getStats();
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            return {
                avgQueryTime,
                slowQueries: stats.filter(s => s.queryTime > 1000).length,
                totalQueries: stats.length,
                cacheHitRate: redisStats.hitRate,
                redisStats,
                connectionStats: {} // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            };
        }
        catch (error) {
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw new ErrorTypes_1.DatabaseError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î', ErrorTypes_1.ErrorCode.QUERY_FAILED, { operation: 'getDatabasePerformanceStats' });
        }
    }
}
exports.RedisOptimizedQueryBuilder = RedisOptimizedQueryBuilder;
exports.default = RedisOptimizedQueryBuilder;
//# sourceMappingURL=RedisOptimizedQueryBuilder.js.map