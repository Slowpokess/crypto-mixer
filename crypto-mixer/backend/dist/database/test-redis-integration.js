"use strict";
/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–∏–∫—Å–µ—Ä–∞
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * - Redis Connection Manager
 * - Cache Layer performance
 * - Critical Data Caching
 * - Session Management
 * - Rate Limiting & Anti-spam
 * - Distributed Locking
 * - Performance –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRedisIntegration = testRedisIntegration;
const RedisMasterManager_1 = __importDefault(require("./cache/RedisMasterManager"));
const logger_1 = require("./logger");
/**
 * –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
async function testRedisIntegration() {
    let redisMaster = null;
    try {
        logger_1.enhancedDbLogger.info('üß™ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å–∏—Å—Ç–µ–º—ã
        redisMaster = new RedisMasterManager_1.default({
            connection: {
                host: process.env.REDIS_HOST || 'localhost',
                port: parseInt(process.env.REDIS_PORT || '6379'),
                password: process.env.REDIS_PASSWORD,
                db: parseInt(process.env.REDIS_DB || '1'), // –¢–µ—Å—Ç–æ–≤–∞—è –ë–î
                keyPrefix: 'test_mixer:',
                enableCluster: false,
                enableReadWriteSplit: false
            },
            cache: {
                defaultTTL: 300, // 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                enableCompression: true,
                enableMultiLevel: true,
                enableBatching: true
            },
            monitoring: {
                enableHealthChecks: true,
                healthCheckInterval: 10000, // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                enablePerformanceTracking: true,
                enableAnalytics: true
            },
            security: {
                enableRateLimiting: true,
                enableAntiSpam: true,
                enableDistributedLocking: true
            }
        });
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await redisMaster.initialize();
        logger_1.enhancedDbLogger.info('‚úÖ Redis —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º Connection Manager
        await testConnectionManager(redisMaster);
        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Cache Layer
        await testCacheLayer(redisMaster);
        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º Critical Data Caching
        await testCriticalDataCaching(redisMaster);
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º Session Management
        await testSessionManagement(redisMaster);
        // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º Rate Limiting
        await testRateLimiting(redisMaster);
        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º Distributed Locking
        await testDistributedLocking(redisMaster);
        // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º Anti-spam –∑–∞—â–∏—Ç—É
        await testAntiSpamProtection(redisMaster);
        // 8. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await testPerformanceUnderLoad(redisMaster);
        // 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º Health Monitoring
        await testHealthMonitoring(redisMaster);
        logger_1.enhancedDbLogger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', { error });
        throw error;
    }
    finally {
        // Graceful shutdown
        if (redisMaster) {
            logger_1.enhancedDbLogger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            try {
                const cacheLayer = redisMaster.getCacheLayer();
                await cacheLayer.flush(); // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
            }
            catch (error) {
                logger_1.enhancedDbLogger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', { error });
            }
            await redisMaster.shutdown();
        }
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Connection Manager
 */
async function testConnectionManager(redisMaster) {
    logger_1.enhancedDbLogger.info('üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis Connection Manager...');
    try {
        const connectionManager = redisMaster.getConnectionManager();
        // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const connection = connectionManager.getConnection(false);
        const pingResult = await connection.ping();
        if (pingResult !== 'PONG') {
            throw new Error('Redis PING –Ω–µ—É—Å–ø–µ—à–µ–Ω');
        }
        // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        const stats = connectionManager.getConnectionStats();
        logger_1.enhancedDbLogger.info('Connection stats:', {
            totalConnections: stats.totalConnections,
            activeConnections: stats.activeConnections,
            averageResponseTime: stats.averageResponseTime
        });
        // –¢–µ—Å—Ç health status
        const healthStatus = connectionManager.getHealthStatus();
        if (!healthStatus.isHealthy) {
            throw new Error('Redis connection –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–µ');
        }
        logger_1.enhancedDbLogger.info('‚úÖ Connection Manager —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Connection Manager —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cache Layer
 */
async function testCacheLayer(redisMaster) {
    logger_1.enhancedDbLogger.info('üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis Cache Layer...');
    try {
        const cacheLayer = redisMaster.getCacheLayer();
        // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const testKey = 'test_cache_key';
        const testData = { message: 'Hello Redis!', timestamp: new Date(), number: 42 };
        await cacheLayer.set(testKey, testData, 60);
        const retrievedData = await cacheLayer.get(testKey);
        if (!retrievedData || retrievedData.message !== testData.message) {
            throw new Error('–ë–∞–∑–æ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç TTL
        const exists1 = await cacheLayer.exists(testKey);
        if (!exists1) {
            throw new Error('–ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å');
        }
        await cacheLayer.expire(testKey, 1); // 1 —Å–µ–∫—É–Ω–¥–∞
        await new Promise(resolve => setTimeout(resolve, 1100)); // –ñ–¥–µ–º –±–æ–ª—å—à–µ —Å–µ–∫—É–Ω–¥—ã
        const exists2 = await cacheLayer.exists(testKey);
        if (exists2) {
            throw new Error('–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã–ª –∏—Å—Ç–µ—á—å');
        }
        // –¢–µ—Å—Ç batch –æ–ø–µ—Ä–∞—Ü–∏–π
        const batchOps = [
            { type: 'set', key: 'batch1', value: 'value1', ttl: 300 },
            { type: 'set', key: 'batch2', value: 'value2', ttl: 300 },
            { type: 'set', key: 'batch3', value: 'value3', ttl: 300 }
        ];
        await cacheLayer.executeBatch({ operations: batchOps });
        const batchGetOps = [
            { type: 'get', key: 'batch1' },
            { type: 'get', key: 'batch2' },
            { type: 'get', key: 'batch3' }
        ];
        const batchResults = await cacheLayer.executeBatch({ operations: batchGetOps });
        if (batchResults.length !== 3 || !batchResults.every(result => result !== null)) {
            throw new Error('Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã');
        }
        // –¢–µ—Å—Ç compression (–¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        const largeData = 'x'.repeat(2000); // –ë–æ–ª—å—à–µ compression threshold
        await cacheLayer.set('large_data', largeData, 60);
        const retrievedLargeData = await cacheLayer.get('large_data');
        if (retrievedLargeData !== largeData) {
            throw new Error('Compression/decompression –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
        const cacheStats = cacheLayer.getStats();
        logger_1.enhancedDbLogger.info('Cache stats:', {
            hitRate: cacheStats.hitRate,
            totalKeys: cacheStats.totalKeys,
            memoryUsage: cacheStats.memoryUsage
        });
        logger_1.enhancedDbLogger.info('‚úÖ Cache Layer —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Cache Layer —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Critical Data Caching
 */
async function testCriticalDataCaching(redisMaster) {
    logger_1.enhancedDbLogger.info('üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º Critical Data Caching...');
    try {
        const criticalManager = redisMaster.getCriticalDataManager();
        // –¢–µ—Å—Ç mixing session
        const mixingSession = {
            id: 'test_session_123',
            currency: 'BTC',
            inputAmount: 0.1,
            outputAddresses: ['bc1test1', 'bc1test2'],
            depositAddress: 'bc1deposit_test',
            status: 'PENDING',
            expiresAt: new Date(Date.now() + 3600000),
            lastUpdated: new Date(),
            metadata: {
                userAgent: 'Test Agent',
                ipAddress: '127.0.0.1'
            }
        };
        await criticalManager.setMixingSession(mixingSession);
        const retrievedSession = await criticalManager.getMixingSession('test_session_123');
        if (!retrievedSession || retrievedSession.id !== mixingSession.id) {
            throw new Error('Mixing session –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ deposit address
        const foundSession = await criticalManager.findMixingSessionByDeposit('bc1deposit_test');
        if (!foundSession || foundSession.id !== mixingSession.id) {
            throw new Error('–ü–æ–∏—Å–∫ –ø–æ deposit address –Ω–µ—É—Å–ø–µ—à–µ–Ω');
        }
        // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const updated = await criticalManager.updateMixingSessionStatus('test_session_123', 'DEPOSITED');
        if (!updated) {
            throw new Error('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç wallet balance –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const walletBalance = {
            id: 'wallet_test_123',
            currency: 'BTC',
            balance: 1.5,
            availableBalance: 1.5,
            lockedBalance: 0,
            lastTransactionAt: new Date(),
            lastUpdated: new Date(),
            isActive: true,
            isLocked: false
        };
        await criticalManager.setWalletBalance(walletBalance);
        const retrievedBalance = await criticalManager.getWalletBalance('wallet_test_123');
        if (!retrievedBalance || retrievedBalance.balance !== walletBalance.balance) {
            throw new Error('Wallet balance –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç exchange rate –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const exchangeRate = {
            baseCurrency: 'BTC',
            quoteCurrency: 'USD',
            rate: 50000,
            timestamp: new Date(),
            source: 'TEST_EXCHANGE',
            confidence: 95
        };
        await criticalManager.setExchangeRate(exchangeRate);
        const retrievedRate = await criticalManager.getExchangeRate('BTC', 'USD');
        if (!retrievedRate || retrievedRate.rate !== exchangeRate.rate) {
            throw new Error('Exchange rate –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç blacklist
        const testAddress = 'bc1suspicious_address';
        await criticalManager.addToBlacklist(testAddress, 'Test blacklist');
        const isBlacklisted = await criticalManager.isBlacklisted(testAddress);
        if (!isBlacklisted) {
            throw new Error('Blacklist —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω–∞');
        }
        logger_1.enhancedDbLogger.info('‚úÖ Critical Data Caching —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Critical Data Caching —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Session Management
 */
async function testSessionManagement(redisMaster) {
    logger_1.enhancedDbLogger.info('üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º Session Management...');
    try {
        const sessionManager = redisMaster.getSessionManager();
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const session = await sessionManager.createSession('192.168.1.100', 'Mozilla/5.0 Test Browser', 'test_user_123');
        if (!session || !session.id) {
            throw new Error('–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const retrievedSession = await sessionManager.getSession(session.id);
        if (!retrievedSession || retrievedSession.id !== session.id) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const updated = await sessionManager.updateSession(session.id, {
            permissions: ['read', 'write'],
            metadata: { lastAction: 'test' }
        });
        if (!updated) {
            throw new Error('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç token management
        const tokenData = { userId: 'test_user_123', action: 'password_reset' };
        const token = await sessionManager.createToken('password_reset', tokenData, 300);
        if (!token) {
            throw new Error('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        const validatedData = await sessionManager.validateToken(token, 'password_reset');
        if (!validatedData || validatedData.userId !== tokenData.userId) {
            throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞');
        }
        // –¢–µ—Å—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        const consumedData = await sessionManager.consumeToken(token, 'password_reset');
        if (!consumedData) {
            throw new Error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const secondValidation = await sessionManager.validateToken(token, 'password_reset');
        if (secondValidation !== null) {
            throw new Error('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
        }
        // –¢–µ—Å—Ç temp data
        const tempKey = 'temp_test_key';
        const tempData = { message: 'temporary data', value: 42 };
        await sessionManager.setTempData(tempKey, tempData, 60);
        const retrievedTempData = await sessionManager.getTempData(tempKey);
        if (!retrievedTempData || retrievedTempData.message !== tempData.message) {
            throw new Error('Temporary data –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const destroyed = await sessionManager.destroySession(session.id);
        if (!destroyed) {
            throw new Error('–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        logger_1.enhancedDbLogger.info('‚úÖ Session Management —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Session Management —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rate Limiting
 */
async function testRateLimiting(redisMaster) {
    logger_1.enhancedDbLogger.info('üö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º Rate Limiting...');
    try {
        const sessionManager = redisMaster.getSessionManager();
        const testIdentifier = 'test_rate_limit_user';
        // –¢–µ—Å—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
        for (let i = 0; i < 5; i++) {
            const result = await sessionManager.checkRateLimit(testIdentifier, 10, 60000); // 10 req/min
            if (!result.allowed) {
                throw new Error(`–ó–∞–ø—Ä–æ—Å ${i + 1} –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω`);
            }
            logger_1.enhancedDbLogger.debug(`Rate limit check ${i + 1}/5:`, {
                allowed: result.allowed,
                remaining: result.remaining
            });
        }
        // –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        for (let i = 0; i < 8; i++) {
            await sessionManager.checkRateLimit(testIdentifier, 10, 60000);
        }
        // –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        const blockedResult = await sessionManager.checkRateLimit(testIdentifier, 10, 60000);
        if (blockedResult.allowed) {
            throw new Error('–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        }
        logger_1.enhancedDbLogger.info('Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç:', {
            allowed: blockedResult.allowed,
            remaining: blockedResult.remaining
        });
        logger_1.enhancedDbLogger.info('‚úÖ Rate Limiting —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Rate Limiting —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Distributed Locking
 */
async function testDistributedLocking(redisMaster) {
    logger_1.enhancedDbLogger.info('üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º Distributed Locking...');
    try {
        const sessionManager = redisMaster.getSessionManager();
        const lockKey = 'test_distributed_lock';
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è lock
        const lockResult = await sessionManager.acquireLock(lockKey, 10000);
        if (!lockResult.acquired || !lockResult.lock) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω–∏–µ distributed lock –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        const lockOwner = lockResult.lock.owner;
        // –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ lock (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω–æ)
        const duplicateLockResult = await sessionManager.acquireLock(lockKey, 5000);
        if (duplicateLockResult.acquired) {
            throw new Error('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ lock –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è lock
        const released = await sessionManager.releaseLock(lockKey, lockOwner);
        if (!released) {
            throw new Error('–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ lock –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è lock –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
        const newLockResult = await sessionManager.acquireLock(lockKey, 5000);
        if (!newLockResult.acquired) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω–∏–µ lock –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–æ');
        }
        // –û—á–∏—Å—Ç–∫–∞
        await sessionManager.releaseLock(lockKey, newLockResult.lock.owner);
        logger_1.enhancedDbLogger.info('‚úÖ Distributed Locking —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Distributed Locking —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Anti-spam –∑–∞—â–∏—Ç—ã
 */
async function testAntiSpamProtection(redisMaster) {
    logger_1.enhancedDbLogger.info('üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º Anti-spam –∑–∞—â–∏—Ç—É...');
    try {
        const sessionManager = redisMaster.getSessionManager();
        const testIdentifier = 'test_suspicious_user';
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await sessionManager.trackSuspiciousActivity(testIdentifier, 'rapid_requests', 'MEDIUM');
        await sessionManager.trackSuspiciousActivity(testIdentifier, 'suspicious_ip', 'HIGH');
        await sessionManager.trackSuspiciousActivity(testIdentifier, 'potential_bot', 'HIGH');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const isBlocked = await sessionManager.isBlocked(testIdentifier);
        if (!isBlocked) {
            // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á—Ç–æ–±—ã –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ø–æ—Ä–æ–≥
            await sessionManager.trackSuspiciousActivity(testIdentifier, 'blacklisted_address', 'HIGH');
            await sessionManager.trackSuspiciousActivity(testIdentifier, 'unusual_pattern', 'MEDIUM');
            const isBlockedNow = await sessionManager.isBlocked(testIdentifier);
            if (!isBlockedNow) {
                logger_1.enhancedDbLogger.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤—ã—Å–æ–∫–∏–π risk score');
            }
        }
        logger_1.enhancedDbLogger.info('‚úÖ Anti-spam Protection —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Anti-spam Protection —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
async function testPerformanceUnderLoad(redisMaster) {
    logger_1.enhancedDbLogger.info('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...');
    try {
        const cacheLayer = redisMaster.getCacheLayer();
        const sessionManager = redisMaster.getSessionManager();
        const startTime = Date.now();
        const concurrentOperations = 100;
        const promises = [];
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        for (let i = 0; i < concurrentOperations; i++) {
            // –ö—ç—à –æ–ø–µ—Ä–∞—Ü–∏–∏
            promises.push(cacheLayer.set(`load_test_${i}`, { data: `test_data_${i}`, timestamp: new Date() }, 300));
            // Session –æ–ø–µ—Ä–∞—Ü–∏–∏
            promises.push(sessionManager.createSession(`192.168.1.${i % 255}`, 'Load Test Browser', `user_${i}`));
            // Rate limit –ø—Ä–æ–≤–µ—Ä–∫–∏
            promises.push(sessionManager.checkRateLimit(`load_test_${i}`, 100, 60000));
        }
        const results = await Promise.allSettled(promises);
        const endTime = Date.now();
        const successful = results.filter(r => r.status === 'fulfilled').length;
        const failed = results.filter(r => r.status === 'rejected').length;
        const totalTime = endTime - startTime;
        const operationsPerSecond = (concurrentOperations * 3) / (totalTime / 1000); // 3 –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
        logger_1.enhancedDbLogger.info('–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
            concurrentOperations: concurrentOperations * 3,
            successful,
            failed,
            totalTime: totalTime + 'ms',
            operationsPerSecond: Math.round(operationsPerSecond)
        });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        if (failed > concurrentOperations * 0.1) { // –ë–æ–ª–µ–µ 10% –Ω–µ—É–¥–∞—á
            throw new Error(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${failed}/${concurrentOperations * 3}`);
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if (operationsPerSecond < 50) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π', { operationsPerSecond });
        }
        logger_1.enhancedDbLogger.info('‚úÖ Performance —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Performance —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health Monitoring
 */
async function testHealthMonitoring(redisMaster) {
    logger_1.enhancedDbLogger.info('üíì –¢–µ—Å—Ç–∏—Ä—É–µ–º Health Monitoring...');
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        const healthStatus = await redisMaster.performHealthCheck();
        logger_1.enhancedDbLogger.info('System Health:', {
            overall: healthStatus.overall,
            components: healthStatus.components,
            responseTime: healthStatus.details.responseTime,
            memoryUsage: healthStatus.details.memoryUsage
        });
        if (healthStatus.overall === 'CRITICAL') {
            throw new Error('–°–∏—Å—Ç–µ–º–∞ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
        }
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const performanceMetrics = redisMaster.getPerformanceMetrics();
        logger_1.enhancedDbLogger.info('Performance Metrics:', {
            connections: performanceMetrics.connections,
            cache: performanceMetrics.cache,
            operations: performanceMetrics.operations
        });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if (performanceMetrics.connections.total === 0) {
            throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
        }
        logger_1.enhancedDbLogger.info('‚úÖ Health Monitoring —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    }
    catch (error) {
        logger_1.enhancedDbLogger.error('‚ùå Health Monitoring —Ç–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω', { error });
        throw error;
    }
}
// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    testRedisIntegration()
        .then(() => {
        logger_1.enhancedDbLogger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
        process.exit(0);
    })
        .catch((error) => {
        logger_1.enhancedDbLogger.error('üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', { error });
        process.exit(1);
    });
}
//# sourceMappingURL=test-redis-integration.js.map