"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSimpleTests = runSimpleTests;
const LitecoinCoreClient_1 = require("./blockchain/nodes/LitecoinCoreClient");
const DashCoreClient_1 = require("./blockchain/nodes/DashCoreClient");
const ZcashClient_1 = require("./blockchain/nodes/ZcashClient");
/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ LTC, DASH –∏ ZEC –±–µ–∑ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
console.log('üéØ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (LTC, DASH, ZEC)');
console.log('='.repeat(60));
/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–¥–∞–º
 */
async function testAddressGeneration() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤...');
    try {
        // –¢–µ—Å—Ç Litecoin –∫–ª–∏–µ–Ω—Ç–∞
        console.log('   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Litecoin –∞–¥—Ä–µ—Å–æ–≤...');
        const ltcConfig = {
            host: 'localhost',
            port: 9332,
            username: 'test',
            password: 'test'
        };
        const ltcClient = new LitecoinCoreClient_1.LitecoinCoreClient(ltcConfig);
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
        const ltcLegacy = ltcClient.createLitecoinAddress('legacy');
        console.log(`   ‚úÖ LTC Legacy: ${ltcLegacy.address.substring(0, 15)}...`);
        const ltcSegwit = ltcClient.createLitecoinAddress('p2sh-segwit');
        console.log(`   ‚úÖ LTC P2SH-SegWit: ${ltcSegwit.address.substring(0, 15)}...`);
        const ltcBech32 = ltcClient.createLitecoinAddress('bech32');
        console.log(`   ‚úÖ LTC Bech32: ${ltcBech32.address.substring(0, 15)}...`);
        // –¢–µ—Å—Ç Dash –∫–ª–∏–µ–Ω—Ç–∞
        console.log('   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dash –∞–¥—Ä–µ—Å–æ–≤...');
        const dashConfig = {
            host: 'localhost',
            port: 9998,
            username: 'test',
            password: 'test'
        };
        const dashClient = new DashCoreClient_1.DashCoreClient(dashConfig);
        const dashAddress = dashClient.createDashAddress();
        console.log(`   ‚úÖ DASH Address: ${dashAddress.address.substring(0, 15)}...`);
        // –¢–µ—Å—Ç Zcash –∫–ª–∏–µ–Ω—Ç–∞
        console.log('   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Zcash –∞–¥—Ä–µ—Å–æ–≤...');
        const zcashConfig = {
            host: 'localhost',
            port: 8232,
            username: 'test',
            password: 'test'
        };
        const zcashClient = new ZcashClient_1.ZcashClient(zcashConfig);
        const zcashAddress = zcashClient.createTransparentAddress();
        console.log(`   ‚úÖ ZEC Transparent: ${zcashAddress.address.substring(0, 15)}...`);
        return true;
    }
    catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ${error.message}`);
        return false;
    }
}
/**
 * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
 */
function testAddressValidation() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤...');
    const testAddresses = {
        LTC: {
            valid: ['LdP8Qox1VAhCzLJNqrr74YovaWYyNBUWvL', 'ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755upcp6el'],
            invalid: ['1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', 'invalid_address']
        },
        DASH: {
            valid: ['XemjUJmNnFLYtaVUgkN5pMDMD8E9LmHGJ4'],
            invalid: ['1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', 'invalid_dash']
        },
        ZEC: {
            valid: ['t1RdnJKtfKPjM7DVFD3h4T1A8eQUa9vKrWX', 't3ZqQXGmE6FZ4x8VHHZMcV5Yx6AhKYE2bQT'],
            invalid: ['1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', 'invalid_zcash']
        }
    };
    const validateAddress = (address, currency) => {
        const patterns = {
            LTC: [
                /^[LM][a-km-zA-HJ-NP-Z1-9]{26,33}$/,
                /^ltc1[a-z0-9]{39,59}$/,
                /^[M3][a-km-zA-HJ-NP-Z1-9]{26,33}$/
            ],
            DASH: [
                /^X[1-9A-HJ-NP-Za-km-z]{33}$/
            ],
            ZEC: [
                /^t1[a-km-zA-HJ-NP-Z1-9]{33}$/,
                /^t3[a-km-zA-HJ-NP-Z1-9]{33}$/,
                /^zs[a-km-zA-HJ-NP-Z1-9]{76}$/,
                /^zc[a-km-zA-HJ-NP-Z1-9]{93}$/
            ]
        };
        const currencyPatterns = patterns[currency];
        if (!currencyPatterns)
            return false;
        return currencyPatterns.some(pattern => pattern.test(address));
    };
    let allPassed = true;
    Object.entries(testAddresses).forEach(([currency, addresses]) => {
        console.log(`   ‚û§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ${currency}...`);
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        addresses.valid.forEach((address, index) => {
            const isValid = validateAddress(address, currency);
            if (isValid) {
                console.log(`   ‚úÖ ${currency} –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –û–ö`);
            }
            else {
                console.log(`   ‚ùå ${currency} –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –ü–†–û–í–ê–õ–ï–ù`);
                allPassed = false;
            }
        });
        // –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        addresses.invalid.forEach((address, index) => {
            const isValid = validateAddress(address, currency);
            if (!isValid) {
                console.log(`   ‚úÖ ${currency} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
            }
            else {
                console.log(`   ‚ùå ${currency} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å #${index + 1} –ù–ï –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
                allPassed = false;
            }
        });
    });
    return allPassed;
}
/**
 * –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤–∞–ª—é—Ç
 */
function testCurrencyConfigs() {
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤–∞–ª—é—Ç...');
    const currencyConfigs = {
        LTC: {
            decimals: 8,
            minAmount: 0.01,
            maxAmount: 100,
            confirmations: 3,
            networkFee: 0.001
        },
        DASH: {
            decimals: 8,
            minAmount: 0.01,
            maxAmount: 100,
            confirmations: 2,
            networkFee: 0.0001
        },
        ZEC: {
            decimals: 8,
            minAmount: 0.001,
            maxAmount: 50,
            confirmations: 5,
            networkFee: 0.0001
        }
    };
    let allConfigsValid = true;
    Object.entries(currencyConfigs).forEach(([currency, config]) => {
        console.log(`   ‚û§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${currency}...`);
        if (config.decimals === 8) {
            console.log(`   ‚úÖ ${currency} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals (8)`);
        }
        else {
            console.log(`   ‚ùå ${currency} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals`);
            allConfigsValid = false;
        }
        if (config.minAmount > 0 && config.maxAmount > config.minAmount) {
            console.log(`   ‚úÖ ${currency} –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã (${config.minAmount} - ${config.maxAmount})`);
        }
        else {
            console.log(`   ‚ùå ${currency} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã`);
            allConfigsValid = false;
        }
        if (config.confirmations > 0) {
            console.log(`   ‚úÖ ${currency} —Ç—Ä–µ–±—É–µ—Ç ${config.confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π`);
        }
        else {
            console.log(`   ‚ùå ${currency} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π`);
            allConfigsValid = false;
        }
    });
    return allConfigsValid;
}
/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runSimpleTests() {
    const results = {};
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results.addressGeneration = await testAddressGeneration();
    results.addressValidation = testAddressValidation();
    results.currencyConfigs = testCurrencyConfigs();
    // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ü–†–û–©–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('='.repeat(60));
    Object.entries(results).forEach(([testName, passed]) => {
        const status = passed ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
        const formattedName = testName.charAt(0).toUpperCase() + testName.slice(1).replace(/([A-Z])/g, ' $1');
        console.log(`${status} ${formattedName}`);
    });
    const passedCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;
    console.log('='.repeat(60));
    console.log(`üèÜ –ò–¢–û–ì–û: ${passedCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ`);
    if (passedCount === totalCount) {
        console.log('üéâ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
        console.log('‚ú® –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log('\nüí° –£–°–ü–ï–®–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–û:');
        console.log('   ‚úÖ Litecoin (LTC) - Legacy, P2SH-SegWit, Bech32 –∞–¥—Ä–µ—Å–∞');
        console.log('   ‚úÖ Dash (DASH) - –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏ InstantSend –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
        console.log('   ‚úÖ Zcash (ZEC) - Transparent –∏ Shielded –∞–¥—Ä–µ—Å–∞');
        console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç');
        console.log('   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª—é—Ç');
    }
    else {
        console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
    }
    console.log('\nüìã –°–¢–ê–¢–£–° –ó–ê–î–ê–ß–ò:');
    console.log('   üéØ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (LTC, DASH, ZEC)');
    console.log('   üîß –°–æ–∑–¥–∞–Ω—ã –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç');
    console.log('   üé® –û–±–Ω–æ–≤–ª–µ–Ω frontend –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç');
    console.log('   ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
}
// –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runSimpleTests().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
        process.exit(1);
    });
}
//# sourceMappingURL=simple-crypto-test.js.map