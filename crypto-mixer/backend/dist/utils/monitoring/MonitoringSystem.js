"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringSystem = void 0;
const events_1 = require("events");
const logger_1 = require("../logger");
const PerformanceMonitor_1 = __importDefault(require("./PerformanceMonitor"));
const HealthCheckManager_1 = require("./HealthCheckManager");
const PrometheusExporter_1 = __importDefault(require("./PrometheusExporter"));
const AlertManager_1 = __importDefault(require("./AlertManager"));
const NotificationManager_1 = __importDefault(require("./NotificationManager"));
/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è crypto-mixer
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç PerformanceMonitor, HealthCheckManager –∏ PrometheusExporter
 */
class MonitoringSystem extends events_1.EventEmitter {
    constructor(config = {}) {
        super();
        this.isRunning = false;
        this.performanceMonitor = null;
        this.healthCheckManager = null;
        this.prometheusExporter = null;
        this.alertManager = null;
        this.notificationManager = null;
        this.config = this.buildConfig(config);
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
     */
    buildConfig(partialConfig) {
        return {
            enabled: process.env.MONITORING_ENABLED === 'true',
            performanceMonitoring: {
                enabled: process.env.PERFORMANCE_MONITORING === 'true',
                collectInterval: parseInt(process.env.METRICS_COLLECT_INTERVAL || '30'),
                retentionPeriod: parseInt(process.env.METRICS_RETENTION_PERIOD || '3600'),
                alerting: {
                    enabled: process.env.PERFORMANCE_ALERTING === 'true',
                    thresholds: {
                        cpu: parseFloat(process.env.CPU_ALERT_THRESHOLD || '80'),
                        memory: parseFloat(process.env.MEMORY_ALERT_THRESHOLD || '85'),
                        disk: parseFloat(process.env.DISK_ALERT_THRESHOLD || '90'),
                        responseTime: parseInt(process.env.RESPONSE_TIME_THRESHOLD || '5000'),
                        errorRate: parseFloat(process.env.ERROR_RATE_THRESHOLD || '5')
                    }
                }
            },
            healthChecks: {
                enabled: process.env.HEALTH_CHECKS_ENABLED === 'true',
                interval: parseInt(process.env.HEALTH_CHECK_INTERVAL || '60'),
                timeout: parseInt(process.env.HEALTH_CHECK_TIMEOUT || '30'),
                retries: parseInt(process.env.HEALTH_CHECK_RETRIES || '3'),
                services: this.getDefaultHealthCheckServices()
            },
            prometheus: {
                enabled: process.env.PROMETHEUS_ENABLED === 'true',
                port: parseInt(process.env.PROMETHEUS_PORT || '9090'),
                path: process.env.PROMETHEUS_PATH || '/metrics',
                namespace: process.env.PROMETHEUS_NAMESPACE || 'crypto_mixer'
            },
            alerting: {
                enabled: process.env.ALERTING_ENABLED === 'true',
                webhookUrl: process.env.ALERT_WEBHOOK_URL,
                slackChannel: process.env.SLACK_CHANNEL,
                emailRecipients: process.env.EMAIL_RECIPIENTS?.split(',')
            },
            ...partialConfig
        };
    }
    /**
     * –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è health checks
     */
    getDefaultHealthCheckServices() {
        return [
            // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            {
                name: 'postgresql',
                type: 'database',
                enabled: true,
                critical: true,
                timeout: 10
            },
            // –ö—ç—à
            {
                name: 'redis',
                type: 'redis',
                enabled: true,
                critical: true,
                host: process.env.REDIS_HOST || 'localhost',
                port: parseInt(process.env.REDIS_PORT || '6379'),
                timeout: 5
            },
            // –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            {
                name: 'rabbitmq',
                type: 'rabbitmq',
                enabled: true,
                critical: true,
                host: process.env.RABBITMQ_HOST || 'localhost',
                port: parseInt(process.env.RABBITMQ_PORT || '5672'),
                timeout: 10,
                metadata: {
                    auth: `${process.env.RABBITMQ_USER || 'guest'}:${process.env.RABBITMQ_PASS || 'guest'}`
                }
            },
            // Mixer API
            {
                name: 'mixer-api',
                type: 'http',
                enabled: true,
                critical: true,
                host: process.env.MIXER_API_HOST || 'localhost',
                port: parseInt(process.env.MIXER_API_PORT || '3000'),
                path: '/health',
                expectedStatus: 200,
                timeout: 5
            },
            // Blockchain —Å–µ—Ä–≤–∏—Å—ã
            {
                name: 'blockchain-service',
                type: 'http',
                enabled: true,
                critical: false,
                host: process.env.BLOCKCHAIN_SERVICE_HOST || 'localhost',
                port: parseInt(process.env.BLOCKCHAIN_SERVICE_PORT || '3001'),
                path: '/health',
                expectedStatus: 200,
                timeout: 10
            },
            // Wallet —Å–µ—Ä–≤–∏—Å
            {
                name: 'wallet-service',
                type: 'http',
                enabled: true,
                critical: true,
                host: process.env.WALLET_SERVICE_HOST || 'localhost',
                port: parseInt(process.env.WALLET_SERVICE_PORT || '3002'),
                path: '/health',
                expectedStatus: 200,
                timeout: 10
            },
            // Scheduler —Å–µ—Ä–≤–∏—Å
            {
                name: 'scheduler-service',
                type: 'http',
                enabled: true,
                critical: false,
                host: process.env.SCHEDULER_SERVICE_HOST || 'localhost',
                port: parseInt(process.env.SCHEDULER_SERVICE_PORT || '3003'),
                path: '/health',
                expectedStatus: 200,
                timeout: 10
            },
            // Vault (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            {
                name: 'vault',
                type: 'vault',
                enabled: process.env.VAULT_ENABLED === 'true',
                critical: false,
                host: process.env.VAULT_HOST || 'localhost',
                port: parseInt(process.env.VAULT_PORT || '8200'),
                timeout: 10
            },
            // HSM (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            {
                name: 'hsm',
                type: 'hsm',
                enabled: process.env.HSM_ENABLED === 'true',
                critical: false,
                timeout: 15
            }
        ];
    }
    /**
     * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async start() {
        if (this.isRunning) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è Monitoring System —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        if (!this.config.enabled) {
            logger_1.enhancedDbLogger.info('üìä Monitoring System –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            return;
        }
        const operationId = await logger_1.enhancedDbLogger.startOperation('monitoring_system_start');
        try {
            logger_1.enhancedDbLogger.info('üìä –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', {
                performanceMonitoring: this.config.performanceMonitoring.enabled,
                healthChecks: this.config.healthChecks.enabled,
                prometheus: this.config.prometheus.enabled,
                alerting: this.config.alerting.enabled
            });
            // –ó–∞–ø—É—Å–∫ Performance Monitor
            if (this.config.performanceMonitoring.enabled) {
                await this.startPerformanceMonitoring();
            }
            // –ó–∞–ø—É—Å–∫ Health Check Manager
            if (this.config.healthChecks.enabled) {
                await this.startHealthChecking();
            }
            // –ó–∞–ø—É—Å–∫ Prometheus Exporter
            if (this.config.prometheus.enabled) {
                await this.startPrometheusExporter();
            }
            // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
            if (this.config.alerting.enabled) {
                await this.startAlerting();
            }
            this.isRunning = true;
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.info('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
            this.emit('system_started', {
                timestamp: new Date(),
                components: {
                    performanceMonitoring: this.config.performanceMonitoring.enabled,
                    healthChecks: this.config.healthChecks.enabled,
                    prometheus: this.config.prometheus.enabled,
                    alerting: this.config.alerting.enabled,
                    notifications: this.config.alerting.enabled
                }
            });
        }
        catch (error) {
            this.isRunning = false;
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async stop() {
        if (!this.isRunning) {
            return;
        }
        logger_1.enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if (this.alertManager) {
            await this.alertManager.stop();
            this.alertManager = null;
        }
        if (this.notificationManager) {
            await this.notificationManager.stop();
            this.notificationManager = null;
        }
        if (this.prometheusExporter) {
            await this.prometheusExporter.stop();
            this.prometheusExporter = null;
        }
        if (this.healthCheckManager) {
            await this.healthCheckManager.stop();
            this.healthCheckManager = null;
        }
        if (this.performanceMonitor) {
            await this.performanceMonitor.stop();
            this.performanceMonitor = null;
        }
        this.isRunning = false;
        logger_1.enhancedDbLogger.info('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        this.emit('system_stopped', {
            timestamp: new Date()
        });
    }
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async startPerformanceMonitoring() {
        try {
            this.performanceMonitor = new PerformanceMonitor_1.default({
                enabled: true,
                collectInterval: this.config.performanceMonitoring.collectInterval,
                retentionPeriod: this.config.performanceMonitoring.retentionPeriod,
                prometheusEnabled: false, // –ë—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                alerting: this.config.performanceMonitoring.alerting
            });
            await this.performanceMonitor.start();
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            this.performanceMonitor.on('metrics_collected', (snapshot) => {
                this.emit('performance_metrics', snapshot);
            });
            this.performanceMonitor.on('threshold_exceeded', (alert) => {
                this.emit('performance_alert', alert);
                this.handlePerformanceAlert(alert);
            });
            logger_1.enhancedDbLogger.info('‚úÖ Performance Monitor –∑–∞–ø—É—â–µ–Ω');
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Performance Monitor', { error });
            throw error;
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async startHealthChecking() {
        try {
            const healthConfig = {
                enabled: true,
                interval: this.config.healthChecks.interval,
                timeout: this.config.healthChecks.timeout,
                retries: this.config.healthChecks.retries,
                parallelChecks: true,
                alertThresholds: {
                    consecutiveFailures: 3,
                    responseTimeWarning: 5000,
                    responseTimeCritical: 10000
                },
                services: this.config.healthChecks.services
            };
            this.healthCheckManager = new HealthCheckManager_1.HealthCheckManager(healthConfig);
            await this.healthCheckManager.start();
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è health checks
            this.healthCheckManager.on('health_check_completed', (systemHealth) => {
                this.emit('health_status', systemHealth);
            });
            this.healthCheckManager.on('status_change', (change) => {
                this.emit('health_status_change', change);
                this.handleHealthStatusChange(change);
            });
            this.healthCheckManager.on('service_alert', (alert) => {
                this.emit('service_alert', alert);
                this.handleServiceAlert(alert);
            });
            logger_1.enhancedDbLogger.info('‚úÖ Health Check Manager –∑–∞–ø—É—â–µ–Ω');
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Health Check Manager', { error });
            throw error;
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ Prometheus —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
     */
    async startPrometheusExporter() {
        try {
            this.prometheusExporter = new PrometheusExporter_1.default({
                enabled: true,
                port: this.config.prometheus.port,
                path: this.config.prometheus.path,
                namespace: this.config.prometheus.namespace
            });
            await this.prometheusExporter.start(this.performanceMonitor, this.healthCheckManager);
            logger_1.enhancedDbLogger.info('‚úÖ Prometheus Exporter –∑–∞–ø—É—â–µ–Ω', {
                url: this.prometheusExporter.getMetricsUrl()
            });
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Prometheus Exporter', { error });
            throw error;
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
     */
    async startAlerting() {
        try {
            // –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.notificationManager = new NotificationManager_1.default();
            await this.notificationManager.start();
            // –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤
            this.alertManager = new AlertManager_1.default({
                enabled: true,
                channels: this.config.alerting.enabled ? [
                    {
                        type: 'webhook',
                        enabled: !!this.config.alerting.webhookUrl,
                        config: {
                            url: this.config.alerting.webhookUrl,
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        },
                        retries: 3,
                        timeout: 10000
                    },
                    {
                        type: 'slack',
                        enabled: !!this.config.alerting.slackChannel,
                        config: {
                            webhookUrl: process.env.SLACK_WEBHOOK_URL,
                            channel: this.config.alerting.slackChannel,
                            username: 'Crypto Mixer Bot'
                        },
                        retries: 3,
                        timeout: 10000
                    },
                    {
                        type: 'email',
                        enabled: !!this.config.alerting.emailRecipients,
                        config: {
                            smtp: {
                                host: process.env.SMTP_HOST,
                                port: parseInt(process.env.SMTP_PORT || '587'),
                                secure: process.env.SMTP_SECURE === 'true',
                                auth: {
                                    user: process.env.SMTP_USER,
                                    pass: process.env.SMTP_PASS
                                }
                            },
                            from: process.env.ALERT_FROM_EMAIL || 'alerts@crypto-mixer.local',
                            recipients: this.config.alerting.emailRecipients || []
                        },
                        retries: 2,
                        timeout: 15000
                    }
                ] : []
            });
            await this.alertManager.start();
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
            this.setupAlertIntegration();
            logger_1.enhancedDbLogger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞');
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞', { error });
            throw error;
        }
    }
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    setupAlertIntegration() {
        if (!this.alertManager) {
            return;
        }
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Performance Monitor
        if (this.performanceMonitor) {
            this.performanceMonitor.on('threshold_exceeded', async (thresholdData) => {
                await this.alertManager.createAlert('performance', this.getSeverityByThreshold(thresholdData.type, thresholdData.value, thresholdData.threshold), `High ${thresholdData.type}`, `${thresholdData.type} (${thresholdData.value}${thresholdData.unit || '%'}) –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${thresholdData.threshold}${thresholdData.unit || '%'}`, 'performance_monitor', {
                    metric: thresholdData.type,
                    current: thresholdData.value,
                    threshold: thresholdData.threshold,
                    unit: thresholdData.unit,
                    timestamp: thresholdData.timestamp
                });
            });
        }
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Health Check Manager
        if (this.healthCheckManager) {
            this.healthCheckManager.on('status_change', async (statusChange) => {
                const severity = statusChange.to === 'down' ? 'critical' :
                    statusChange.to === 'critical' ? 'high' : 'medium';
                await this.alertManager.createAlert('health_status', severity, `Service Status Changed: ${statusChange.service}`, `Service ${statusChange.service} status changed from ${statusChange.from} to ${statusChange.to}`, 'health_check_manager', {
                    service: statusChange.service,
                    previousStatus: statusChange.from,
                    currentStatus: statusChange.to,
                    timestamp: statusChange.timestamp
                });
            });
            this.healthCheckManager.on('service_alert', async (serviceAlert) => {
                await this.alertManager.createAlert('service', serviceAlert.critical ? 'critical' : 'high', `Service Alert: ${serviceAlert.service}`, `Service ${serviceAlert.service} has ${serviceAlert.failures} consecutive failures`, 'health_check_manager', {
                    service: serviceAlert.service,
                    failures: serviceAlert.failures,
                    critical: serviceAlert.critical,
                    lastError: serviceAlert.lastError
                });
            });
        }
        logger_1.enhancedDbLogger.info('üì¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ—Ä–æ–≥–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
     */
    getSeverityByThreshold(type, value, threshold) {
        const ratio = value / threshold;
        if (ratio >= 1.5)
            return 'critical';
        if (ratio >= 1.2)
            return 'high';
        if (ratio >= 1.0)
            return 'medium';
        return 'low';
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    handlePerformanceAlert(alert) {
        logger_1.enhancedDbLogger.warn('‚ö†Ô∏è Performance Alert', {
            type: alert.type,
            value: alert.value,
            threshold: alert.threshold,
            timestamp: alert.timestamp
        });
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        this.sendAlert({
            type: 'performance',
            severity: 'warning',
            title: `Performance Alert: ${alert.type}`,
            description: `${alert.type} exceeded threshold: ${alert.value} > ${alert.threshold}`,
            timestamp: alert.timestamp
        });
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
     */
    handleHealthStatusChange(change) {
        const severity = change.to === 'down' ? 'critical' :
            change.to === 'critical' ? 'high' : 'medium';
        logger_1.enhancedDbLogger.warn('üè• Health Status Change', {
            from: change.from,
            to: change.to,
            timestamp: change.timestamp
        });
        this.sendAlert({
            type: 'health_status',
            severity,
            title: `System Health Changed: ${change.from} ‚Üí ${change.to}`,
            description: `System health status changed from ${change.from} to ${change.to}`,
            timestamp: change.timestamp
        });
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    handleServiceAlert(alert) {
        const severity = alert.critical ? 'critical' : 'high';
        logger_1.enhancedDbLogger.warn('üö® Service Alert', {
            service: alert.service,
            type: alert.type,
            failures: alert.failures,
            critical: alert.critical
        });
        this.sendAlert({
            type: 'service',
            severity,
            title: `Service Alert: ${alert.service}`,
            description: `Service ${alert.service} has ${alert.failures} consecutive failures`,
            timestamp: new Date()
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
     */
    sendAlert(alert) {
        // –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger_1.enhancedDbLogger.error('üö® ALERT', alert);
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ webhook, email, Slack –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        this.emit('alert_sent', alert);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    getSystemStatus() {
        return {
            running: this.isRunning,
            components: {
                performanceMonitor: this.performanceMonitor?.isActive() || false,
                healthCheckManager: this.healthCheckManager?.isActive() || false,
                prometheusExporter: this.prometheusExporter?.isActive() || false,
                alertManager: this.alertManager?.isActive() || false,
                notificationManager: this.notificationManager?.isActive() || false
            },
            metrics: {
                lastPerformanceSnapshot: this.performanceMonitor?.getLastSnapshot() || null,
                systemHealth: this.healthCheckManager?.getSystemHealth() || null,
                prometheusUrl: this.prometheusExporter?.getMetricsUrl() || null,
                activeAlerts: this.alertManager?.getActiveAlerts().length || 0,
                alertStatistics: this.alertManager?.getAlertStatistics() || null
            }
        };
    }
    /**
     * –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    recordRequest(responseTime, isError = false) {
        if (this.performanceMonitor) {
            this.performanceMonitor.recordRequest(responseTime, isError);
        }
    }
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkService(serviceName) {
        if (this.healthCheckManager) {
            return await this.healthCheckManager.checkServiceNow(serviceName);
        }
        throw new Error('Health Check Manager –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async checkAllServices() {
        if (this.healthCheckManager) {
            return await this.healthCheckManager.checkAllServicesNow();
        }
        throw new Error('Health Check Manager –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
     */
    addCustomMetric(name, type, help, value, labels) {
        if (this.prometheusExporter) {
            this.prometheusExporter.addCustomMetric(name, type, help, value, labels);
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        logger_1.enhancedDbLogger.info('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Monitoring System –æ–±–Ω–æ–≤–ª–µ–Ω–∞', newConfig);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
     */
    isActive() {
        return this.isRunning;
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
     */
    async createCustomAlert(type, severity, title, description, source, metadata = {}) {
        if (this.alertManager) {
            return await this.alertManager.createAlert(type, severity, title, description, source, metadata);
        }
        throw new Error('Alert Manager –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
     */
    async acknowledgeAlert(alertId, acknowledgedBy) {
        if (this.alertManager) {
            return await this.alertManager.acknowledgeAlert(alertId, acknowledgedBy);
        }
        return false;
    }
    /**
     * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
     */
    async resolveAlert(alertId) {
        if (this.alertManager) {
            return await this.alertManager.resolveAlert(alertId);
        }
        return false;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
     */
    getActiveAlerts() {
        if (this.alertManager) {
            return this.alertManager.getActiveAlerts();
        }
        return [];
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
     */
    getAlertHistory() {
        if (this.alertManager) {
            return this.alertManager.getAlertHistory();
        }
        return [];
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
     */
    getAlertStatistics() {
        if (this.alertManager) {
            return this.alertManager.getAlertStatistics();
        }
        return null;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    getNotificationStatistics() {
        if (this.notificationManager) {
            return this.notificationManager.getStats();
        }
        return null;
    }
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async testNotificationChannel(channelType) {
        if (!this.notificationManager) {
            return false;
        }
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const testChannel = this.createTestChannelConfig(channelType);
        if (!testChannel) {
            return false;
        }
        return await this.notificationManager.testChannel(testChannel);
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
     */
    createTestChannelConfig(channelType) {
        switch (channelType) {
            case 'webhook':
                return this.config.alerting.webhookUrl ? {
                    type: 'webhook',
                    enabled: true,
                    config: {
                        url: this.config.alerting.webhookUrl,
                        headers: { 'Content-Type': 'application/json' }
                    },
                    retries: 1,
                    timeout: 5000
                } : null;
            case 'slack':
                return this.config.alerting.slackChannel ? {
                    type: 'slack',
                    enabled: true,
                    config: {
                        webhookUrl: process.env.SLACK_WEBHOOK_URL,
                        channel: this.config.alerting.slackChannel,
                        username: 'Crypto Mixer Test Bot'
                    },
                    retries: 1,
                    timeout: 5000
                } : null;
            case 'email':
                return this.config.alerting.emailRecipients ? {
                    type: 'email',
                    enabled: true,
                    config: {
                        smtp: {
                            host: process.env.SMTP_HOST,
                            port: parseInt(process.env.SMTP_PORT || '587'),
                            secure: process.env.SMTP_SECURE === 'true',
                            auth: {
                                user: process.env.SMTP_USER,
                                pass: process.env.SMTP_PASS
                            }
                        },
                        from: process.env.ALERT_FROM_EMAIL || 'alerts@crypto-mixer.local',
                        recipients: this.config.alerting.emailRecipients
                    },
                    retries: 1,
                    timeout: 10000
                } : null;
            default:
                return null;
        }
    }
}
exports.MonitoringSystem = MonitoringSystem;
exports.default = MonitoringSystem;
//# sourceMappingURL=MonitoringSystem.js.map