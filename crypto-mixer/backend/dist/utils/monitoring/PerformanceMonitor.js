"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceMonitor = void 0;
const events_1 = require("events");
const os_1 = __importDefault(require("os"));
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const child_process_1 = require("child_process");
const logger_1 = require("../logger");
const DatabaseManager_1 = require("../../database/DatabaseManager");
/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è crypto-mixer
 * –°–æ–±–∏—Ä–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ, –ø—Ä–∏–ª–æ–∂–µ–Ω—á–µ—Å–∫–∏–µ –∏ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
 */
class PerformanceMonitor extends events_1.EventEmitter {
    constructor(config = {}) {
        super();
        this.isRunning = false;
        this.collectInterval = null;
        this.metricsHistory = [];
        this.lastSnapshot = null;
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.requestCounter = 0;
        this.responseTimes = [];
        this.errorCounter = 0;
        this.lastRequestTime = Date.now();
        // –ö—ç—à –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        this.lastCpuUsage = null;
        this.lastNetworkStats = null;
        this.config = {
            enabled: process.env.PERFORMANCE_MONITORING === 'true',
            collectInterval: parseInt(process.env.METRICS_COLLECT_INTERVAL || '30'),
            retentionPeriod: parseInt(process.env.METRICS_RETENTION_PERIOD || '3600'),
            prometheusEnabled: process.env.PROMETHEUS_ENABLED === 'true',
            prometheusPort: parseInt(process.env.PROMETHEUS_PORT || '9090'),
            alerting: {
                enabled: process.env.PERFORMANCE_ALERTING === 'true',
                thresholds: {
                    cpu: parseFloat(process.env.CPU_ALERT_THRESHOLD || '80'),
                    memory: parseFloat(process.env.MEMORY_ALERT_THRESHOLD || '85'),
                    disk: parseFloat(process.env.DISK_ALERT_THRESHOLD || '90'),
                    responseTime: parseInt(process.env.RESPONSE_TIME_THRESHOLD || '5000'),
                    errorRate: parseFloat(process.env.ERROR_RATE_THRESHOLD || '5')
                }
            },
            sampling: {
                enabled: process.env.PERFORMANCE_SAMPLING === 'true',
                rate: parseFloat(process.env.SAMPLING_RATE || '10')
            },
            ...config
        };
    }
    /**
     * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async start() {
        if (this.isRunning) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è Performance Monitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        if (!this.config.enabled) {
            logger_1.enhancedDbLogger.info('üìä Performance Monitor –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            return;
        }
        const operationId = await logger_1.enhancedDbLogger.startOperation('performance_monitor_start');
        try {
            logger_1.enhancedDbLogger.info('üìä –ó–∞–ø—É—Å–∫ Performance Monitor', {
                collectInterval: this.config.collectInterval,
                retentionPeriod: this.config.retentionPeriod,
                prometheusEnabled: this.config.prometheusEnabled,
                alertingEnabled: this.config.alerting.enabled
            });
            this.isRunning = true;
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
            await this.collectMetrics();
            // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞
            this.collectInterval = setInterval(async () => {
                try {
                    await this.collectMetrics();
                }
                catch (error) {
                    logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫', { error });
                }
            }, this.config.collectInterval * 1000);
            // –ó–∞–ø—É—Å–∫ Prometheus endpoint –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if (this.config.prometheusEnabled) {
                await this.startPrometheusEndpoint();
            }
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.info('‚úÖ Performance Monitor –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.isRunning = false;
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async stop() {
        if (!this.isRunning) {
            return;
        }
        logger_1.enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Performance Monitor');
        this.isRunning = false;
        if (this.collectInterval) {
            clearInterval(this.collectInterval);
            this.collectInterval = null;
        }
        logger_1.enhancedDbLogger.info('‚úÖ Performance Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    /**
     * –°–±–æ—Ä –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async collectMetrics() {
        const startTime = Date.now();
        try {
            logger_1.enhancedDbLogger.debug('üîç –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            const [systemMetrics, applicationMetrics, businessMetrics] = await Promise.all([
                this.collectSystemMetrics(),
                this.collectApplicationMetrics(),
                this.collectBusinessMetrics()
            ]);
            const snapshot = {
                timestamp: new Date(),
                system: systemMetrics,
                application: applicationMetrics,
                business: businessMetrics,
                uptime: process.uptime(),
                version: process.env.npm_package_version || '1.0.0'
            };
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞
            this.lastSnapshot = snapshot;
            this.metricsHistory.push(snapshot);
            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫
            this.cleanupOldMetrics();
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            if (this.config.alerting.enabled) {
                this.checkThresholds(snapshot);
            }
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
            this.emit('metrics_collected', snapshot);
            const duration = Date.now() - startTime;
            logger_1.enhancedDbLogger.debug('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã', {
                duration: `${duration}ms`,
                historySize: this.metricsHistory.length
            });
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫', { error });
            this.emit('metrics_error', error);
        }
    }
    /**
     * –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    async collectSystemMetrics() {
        // CPU –º–µ—Ç—Ä–∏–∫–∏
        const cpuUsage = process.cpuUsage(this.lastCpuUsage || undefined);
        this.lastCpuUsage = process.cpuUsage();
        const cpuPercent = this.calculateCpuPercent(cpuUsage);
        const cpus = os_1.default.cpus();
        const loadAverage = os_1.default.loadavg();
        // –ü–∞–º—è—Ç—å
        const totalMem = os_1.default.totalmem();
        const freeMem = os_1.default.freemem();
        const usedMem = totalMem - freeMem;
        const memUsage = (usedMem / totalMem) * 100;
        // Swap (–¥–ª—è Linux/macOS)
        let swap = { total: 0, used: 0, free: 0 };
        try {
            if (process.platform === 'linux') {
                swap = await this.getSwapInfo();
            }
        }
        catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è swap
        }
        // –î–∏—Å–∫
        const diskInfo = await this.getDiskInfo();
        // –°–µ—Ç—å
        const networkInfo = await this.getNetworkInfo();
        return {
            cpu: {
                usage: cpuPercent,
                loadAverage,
                cores: cpus.length,
                speed: cpus[0]?.speed || 0
            },
            memory: {
                total: totalMem,
                used: usedMem,
                free: freeMem,
                available: freeMem,
                usage: memUsage,
                swap
            },
            disk: diskInfo,
            network: networkInfo
        };
    }
    /**
     * –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async collectApplicationMetrics() {
        const now = Date.now();
        const timePeriod = (now - this.lastRequestTime) / 1000; // —Å–µ–∫—É–Ω–¥—ã
        this.lastRequestTime = now;
        // –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        const requestsPerSecond = timePeriod > 0 ? this.requestCounter / timePeriod : 0;
        const errorRate = this.requestCounter > 0 ? (this.errorCounter / this.requestCounter) * 100 : 0;
        const avgResponseTime = this.responseTimes.length > 0
            ? this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length
            : 0;
        // –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        const sortedTimes = [...this.responseTimes].sort((a, b) => a - b);
        const percentiles = {
            p50: this.getPercentile(sortedTimes, 50),
            p95: this.getPercentile(sortedTimes, 95),
            p99: this.getPercentile(sortedTimes, 99)
        };
        // –ú–µ—Ç—Ä–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const dbMetrics = await this.getDatabaseMetrics();
        // –ú–µ—Ç—Ä–∏–∫–∏ Redis
        const redisMetrics = await this.getRedisMetrics();
        // –ú–µ—Ç—Ä–∏–∫–∏ RabbitMQ
        const rabbitmqMetrics = await this.getRabbitMQMetrics();
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.requestCounter = 0;
        this.errorCounter = 0;
        this.responseTimes = [];
        return {
            requests: {
                total: this.requestCounter,
                perSecond: requestsPerSecond,
                errorRate,
                averageResponseTime: avgResponseTime,
                percentiles
            },
            database: dbMetrics,
            cache: {
                redis: redisMetrics
            },
            queues: {
                rabbitmq: rabbitmqMetrics
            }
        };
    }
    /**
     * –°–±–æ—Ä –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫
     */
    async collectBusinessMetrics() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
            const mixingMetrics = await this.getMixingMetrics();
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤
            const walletMetrics = await this.getWalletMetrics();
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–æ–≤
            const blockchainMetrics = await this.getBlockchainMetrics();
            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            const securityMetrics = await this.getSecurityMetrics();
            return {
                mixing: mixingMetrics,
                wallets: walletMetrics,
                blockchain: blockchainMetrics,
                security: securityMetrics
            };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫', { error });
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                mixing: {
                    operationsInProgress: 0,
                    operationsCompleted: 0,
                    operationsFailed: 0,
                    averageProcessingTime: 0,
                    totalVolume: { btc: 0, eth: 0, usdt: 0, sol: 0 },
                    successRate: 0
                },
                wallets: {
                    totalWallets: 0,
                    activeWallets: 0,
                    totalBalance: { btc: 0, eth: 0, usdt: 0, sol: 0 }
                },
                blockchain: {
                    bitcoin: { connected: false, blockHeight: 0, syncStatus: 0, transactionPool: 0 },
                    ethereum: { connected: false, blockNumber: 0, gasPrice: 0, pendingTransactions: 0 },
                    solana: { connected: false, slot: 0, epoch: 0, transactionCount: 0 }
                },
                security: {
                    alertsActive: 0,
                    blockedTransactions: 0,
                    riskScore: 0,
                    amlChecks: 0
                }
            };
        }
    }
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
     */
    calculateCpuPercent(cpuUsage) {
        const total = cpuUsage.user + cpuUsage.system;
        const totalMs = total / 1000; // –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        const interval = this.config.collectInterval * 1000; // —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        return Math.min(100, (totalMs / interval) * 100);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ swap
     */
    async getSwapInfo() {
        try {
            const swapInfo = (0, child_process_1.execSync)('free -b | grep Swap').toString().trim();
            const [, total, used, free] = swapInfo.split(/\s+/).map(Number);
            return { total, used, free };
        }
        catch (error) {
            return { total: 0, used: 0, free: 0 };
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ
     */
    async getDiskInfo() {
        try {
            let diskStats = {};
            if (process.platform === 'linux') {
                const dfOutput = (0, child_process_1.execSync)('df -B1 /').toString().trim().split('\n')[1];
                const [, total, used, free] = dfOutput.split(/\s+/).map(Number);
                diskStats = {
                    total,
                    used,
                    free,
                    usage: (used / total) * 100
                };
            }
            else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                const stats = await (0, util_1.promisify)(fs_1.default.stat)('/');
                diskStats = {
                    total: 1000000000000, // 1TB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    used: 500000000000, // 500GB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    free: 500000000000, // 500GB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    usage: 50
                };
            }
            // IOPS –ø–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            const iops = { read: 0, write: 0 };
            return { ...diskStats, iops };
        }
        catch (error) {
            return {
                usage: 0,
                total: 0,
                used: 0,
                free: 0,
                iops: { read: 0, write: 0 }
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
     */
    async getNetworkInfo() {
        try {
            const networkInterfaces = os_1.default.networkInterfaces();
            let bytesReceived = 0;
            let bytesSent = 0;
            // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
            for (const [name, interfaces] of Object.entries(networkInterfaces)) {
                if (interfaces) {
                    for (const iface of interfaces) {
                        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ Node.js –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
                        // –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ –∏–∑ –∫–æ—Ä–æ–±–∫–∏
                        if (!iface.internal) {
                            bytesReceived += 1000; // –ó–∞–≥–ª—É—à–∫–∞
                            bytesSent += 1000; // –ó–∞–≥–ª—É—à–∫–∞
                        }
                    }
                }
            }
            return {
                bytesReceived,
                bytesSent,
                packetsReceived: 0, // –ó–∞–≥–ª—É—à–∫–∞
                packetsSent: 0, // –ó–∞–≥–ª—É—à–∫–∞
                errors: 0 // –ó–∞–≥–ª—É—à–∫–∞
            };
        }
        catch (error) {
            return {
                bytesReceived: 0,
                bytesSent: 0,
                packetsReceived: 0,
                packetsSent: 0,
                errors: 0
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getDatabaseMetrics() {
        try {
            const dbManager = DatabaseManager_1.DatabaseManager.getInstance();
            const connectionInfo = dbManager.getConnectionInfo();
            return {
                connections: {
                    active: connectionInfo.activeConnections || 0,
                    idle: connectionInfo.idleConnections || 0,
                    total: connectionInfo.totalConnections || 0
                },
                queries: {
                    total: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
                    perSecond: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
                    averageTime: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
                    slowQueries: 0 // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                },
                transactions: {
                    total: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    perSecond: 0, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
                    rollbacks: 0 // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–∞—Ç–æ–≤
                }
            };
        }
        catch (error) {
            return {
                connections: { active: 0, idle: 0, total: 0 },
                queries: { total: 0, perSecond: 0, averageTime: 0, slowQueries: 0 },
                transactions: { total: 0, perSecond: 0, rollbacks: 0 }
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ Redis
     */
    async getRedisMetrics() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return {
            hitRate: 0,
            missRate: 0,
            evictions: 0,
            memoryUsage: 0,
            connections: 0
        };
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ RabbitMQ
     */
    async getRabbitMQMetrics() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return {
            messages: 0,
            consumers: 0,
            publishRate: 0,
            consumeRate: 0
        };
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async getMixingMetrics() {
        try {
            const dbManager = DatabaseManager_1.DatabaseManager.getInstance();
            // –ó–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
            const [inProgress, completed, failed] = await Promise.all([
                dbManager.query('SELECT COUNT(*) as count FROM mix_requests WHERE status = ?', ['in_progress']),
                dbManager.query('SELECT COUNT(*) as count FROM mix_requests WHERE status = ?', ['completed']),
                dbManager.query('SELECT COUNT(*) as count FROM mix_requests WHERE status = ?', ['failed'])
            ]);
            const operationsInProgress = inProgress[0]?.count || 0;
            const operationsCompleted = completed[0]?.count || 0;
            const operationsFailed = failed[0]?.count || 0;
            const totalOperations = operationsCompleted + operationsFailed;
            const successRate = totalOperations > 0 ? (operationsCompleted / totalOperations) * 100 : 0;
            return {
                operationsInProgress,
                operationsCompleted,
                operationsFailed,
                averageProcessingTime: 0, // TODO: –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                totalVolume: { btc: 0, eth: 0, usdt: 0, sol: 0 }, // TODO: –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–±—ä–µ–º—ã
                successRate
            };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è', { error });
            return {
                operationsInProgress: 0,
                operationsCompleted: 0,
                operationsFailed: 0,
                averageProcessingTime: 0,
                totalVolume: { btc: 0, eth: 0, usdt: 0, sol: 0 },
                successRate: 0
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–æ—à–µ–ª—å–∫–æ–≤
     */
    async getWalletMetrics() {
        try {
            const dbManager = DatabaseManager_1.DatabaseManager.getInstance();
            const [totalWallets, activeWallets] = await Promise.all([
                dbManager.query('SELECT COUNT(*) as count FROM wallets'),
                dbManager.query('SELECT COUNT(*) as count FROM wallets WHERE status = ?', ['active'])
            ]);
            return {
                totalWallets: totalWallets[0]?.count || 0,
                activeWallets: activeWallets[0]?.count || 0,
                totalBalance: { btc: 0, eth: 0, usdt: 0, sol: 0 } // TODO: –≤—ã—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã
            };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ—à–µ–ª—å–∫–æ–≤', { error });
            return {
                totalWallets: 0,
                activeWallets: 0,
                totalBalance: { btc: 0, eth: 0, usdt: 0, sol: 0 }
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–ª–æ–∫—á–µ–π–Ω–æ–≤
     */
    async getBlockchainMetrics() {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –±–ª–æ–∫—á–µ–π–Ω –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        return {
            bitcoin: { connected: false, blockHeight: 0, syncStatus: 0, transactionPool: 0 },
            ethereum: { connected: false, blockNumber: 0, gasPrice: 0, pendingTransactions: 0 },
            solana: { connected: false, slot: 0, epoch: 0, transactionCount: 0 }
        };
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async getSecurityMetrics() {
        try {
            const dbManager = DatabaseManager_1.DatabaseManager.getInstance();
            const blockedTransactions = await dbManager.query('SELECT COUNT(*) as count FROM audit_logs WHERE action = ? AND created_at > NOW() - INTERVAL 24 HOUR', ['transaction_blocked']);
            return {
                alertsActive: 0, // TODO: –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
                blockedTransactions: blockedTransactions[0]?.count || 0,
                riskScore: 0, // TODO: –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä
                amlChecks: 0 // TODO: –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AML –ø—Ä–æ–≤–µ—Ä–æ–∫
            };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', { error });
            return {
                alertsActive: 0,
                blockedTransactions: 0,
                riskScore: 0,
                amlChecks: 0
            };
        }
    }
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è
     */
    getPercentile(sortedArray, percentile) {
        if (sortedArray.length === 0)
            return 0;
        const index = Math.ceil((percentile / 100) * sortedArray.length) - 1;
        return sortedArray[Math.max(0, Math.min(index, sortedArray.length - 1))];
    }
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    cleanupOldMetrics() {
        const cutoffTime = Date.now() - (this.config.retentionPeriod * 1000);
        this.metricsHistory = this.metricsHistory.filter(snapshot => snapshot.timestamp.getTime() > cutoffTime);
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
     */
    checkThresholds(snapshot) {
        const { thresholds } = this.config.alerting;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        if (snapshot.system.cpu.usage > thresholds.cpu) {
            this.emit('threshold_exceeded', {
                type: 'cpu',
                value: snapshot.system.cpu.usage,
                threshold: thresholds.cpu,
                timestamp: snapshot.timestamp
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        if (snapshot.system.memory.usage > thresholds.memory) {
            this.emit('threshold_exceeded', {
                type: 'memory',
                value: snapshot.system.memory.usage,
                threshold: thresholds.memory,
                timestamp: snapshot.timestamp
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
        if (snapshot.system.disk.usage > thresholds.disk) {
            this.emit('threshold_exceeded', {
                type: 'disk',
                value: snapshot.system.disk.usage,
                threshold: thresholds.disk,
                timestamp: snapshot.timestamp
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if (snapshot.application.requests.averageResponseTime > thresholds.responseTime) {
            this.emit('threshold_exceeded', {
                type: 'response_time',
                value: snapshot.application.requests.averageResponseTime,
                threshold: thresholds.responseTime,
                timestamp: snapshot.timestamp
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫
        if (snapshot.application.requests.errorRate > thresholds.errorRate) {
            this.emit('threshold_exceeded', {
                type: 'error_rate',
                value: snapshot.application.requests.errorRate,
                threshold: thresholds.errorRate,
                timestamp: snapshot.timestamp
            });
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ Prometheus endpoint
     */
    async startPrometheusEndpoint() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Prometheus metrics endpoint
        logger_1.enhancedDbLogger.info('üìä Prometheus endpoint –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏');
    }
    /**
     * –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫
     */
    recordRequest(responseTime, isError = false) {
        if (!this.config.enabled)
            return;
        // –°—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        if (this.config.sampling.enabled) {
            if (Math.random() * 100 > this.config.sampling.rate) {
                return;
            }
        }
        this.requestCounter++;
        this.responseTimes.push(responseTime);
        if (isError) {
            this.errorCounter++;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–Ω–∏–º–∫–∞ –º–µ—Ç—Ä–∏–∫
     */
    getLastSnapshot() {
        return this.lastSnapshot;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
     */
    getMetricsHistory(limit = 100) {
        return this.metricsHistory.slice(-limit);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
     */
    getMetricsByTimeRange(startTime, endTime) {
        return this.metricsHistory.filter(snapshot => snapshot.timestamp >= startTime && snapshot.timestamp <= endTime);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    getAggregatedMetrics(period) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        return {
            averageCpuUsage: 0,
            averageMemoryUsage: 0,
            averageResponseTime: 0,
            totalRequests: 0,
            errorRate: 0
        };
    }
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
     */
    exportMetrics(format) {
        switch (format) {
            case 'json':
                return JSON.stringify(this.metricsHistory, null, 2);
            case 'csv':
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å CSV —ç–∫—Å–ø–æ—Ä—Ç
                return 'timestamp,cpu_usage,memory_usage,disk_usage\n';
            case 'prometheus':
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Prometheus —Ñ–æ—Ä–º–∞—Ç
                return '# HELP cpu_usage CPU usage percentage\n';
            default:
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: ${format}`);
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞
     */
    isActive() {
        return this.isRunning;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        logger_1.enhancedDbLogger.info('üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Performance Monitor –æ–±–Ω–æ–≤–ª–µ–Ω–∞', newConfig);
    }
}
exports.PerformanceMonitor = PerformanceMonitor;
exports.default = PerformanceMonitor;
//# sourceMappingURL=PerformanceMonitor.js.map