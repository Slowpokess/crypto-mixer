#!/usr/bin/env node
"use strict";
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx run-tests.ts                    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 * npx tsx run-tests.ts --unit             # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
 * npx tsx run-tests.ts --integration      # –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
 * npx tsx run-tests.ts --coverage         # –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
 * npx tsx run-tests.ts --watch            # –í —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTests = main;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};
function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}
function logHeader(message) {
    const border = '='.repeat(60);
    log(`\n${border}`, 'cyan');
    log(`  ${message}`, 'cyan');
    log(`${border}\n`, 'cyan');
}
function logSuccess(message) {
    log(`‚úÖ ${message}`, 'green');
}
function logError(message) {
    log(`‚ùå ${message}`, 'red');
}
function logWarning(message) {
    log(`‚ö†Ô∏è  ${message}`, 'yellow');
}
function logInfo(message) {
    log(`‚ÑπÔ∏è  ${message}`, 'blue');
}
// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const isUnitOnly = args.includes('--unit');
const isIntegrationOnly = args.includes('--integration');
const withCoverage = args.includes('--coverage');
const watchMode = args.includes('--watch');
const verbose = args.includes('--verbose') || args.includes('-v');
// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Ç–µ—Å—Ç–æ–≤
const testDir = (0, path_1.resolve)(__dirname);
const unitTests = [
    'PerformanceMonitor.test.ts',
    'AlertManager.test.ts',
    'NotificationManager.test.ts'
];
const integrationTests = [
    'MonitoringSystem.integration.test.ts'
];
function checkDependencies() {
    logInfo('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    const requiredPackages = ['vitest', 'node-fetch', 'nodemailer'];
    const missingPackages = [];
    for (const pkg of requiredPackages) {
        try {
            require.resolve(pkg);
        }
        catch {
            missingPackages.push(pkg);
        }
    }
    if (missingPackages.length > 0) {
        logError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã: ${missingPackages.join(', ')}`);
        logInfo('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: npm install ' + missingPackages.join(' '));
        process.exit(1);
    }
    logSuccess('–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã');
}
function checkTestFiles() {
    logInfo('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤...');
    const allTests = [...unitTests, ...integrationTests];
    const missingFiles = [];
    for (const testFile of allTests) {
        const fullPath = (0, path_1.resolve)(testDir, testFile);
        if (!(0, fs_1.existsSync)(fullPath)) {
            missingFiles.push(testFile);
        }
    }
    if (missingFiles.length > 0) {
        logError(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤: ${missingFiles.join(', ')}`);
        process.exit(1);
    }
    logSuccess(`–ù–∞–π–¥–µ–Ω–æ ${allTests.length} —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤`);
}
function runTests(testFiles, testType) {
    logHeader(`–ó–∞–ø—É—Å–∫ ${testType} —Ç–µ—Å—Ç–æ–≤`);
    const vitestCommand = [
        'npx vitest run',
        withCoverage ? '--coverage' : '',
        watchMode ? '--watch' : '',
        verbose ? '--reporter=verbose' : '--reporter=default',
        `--config ${(0, path_1.resolve)(testDir, 'vitest.config.ts')}`,
        testFiles.map(f => (0, path_1.resolve)(testDir, f)).join(' ')
    ].filter(Boolean).join(' ');
    try {
        logInfo(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: ${vitestCommand}`);
        (0, child_process_1.execSync)(vitestCommand, {
            stdio: 'inherit',
            cwd: testDir,
            env: {
                ...process.env,
                NODE_ENV: 'test'
            }
        });
        logSuccess(`${testType} —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        return true;
    }
    catch (error) {
        logError(`${testType} —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏`);
        if (verbose) {
            console.error(error);
        }
        return false;
    }
}
function runLinting() {
    logHeader('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ESLint
    try {
        const eslintCommand = `npx eslint ${testDir}/../**/*.ts --max-warnings 0`;
        logInfo('–ó–∞–ø—É—Å–∫ ESLint...');
        (0, child_process_1.execSync)(eslintCommand, { stdio: 'inherit' });
        logSuccess('ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');
        return true;
    }
    catch (error) {
        logWarning('ESLint –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã');
        return false;
    }
}
function generateTestReport() {
    logHeader('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
    const reportData = {
        timestamp: new Date().toISOString(),
        environment: {
            nodeVersion: process.version,
            platform: process.platform,
            arch: process.arch
        },
        configuration: {
            unitOnly: isUnitOnly,
            integrationOnly: isIntegrationOnly,
            withCoverage: withCoverage,
            watchMode: watchMode
        },
        testFiles: {
            unit: unitTests,
            integration: integrationTests
        }
    };
    try {
        const fs = require('fs');
        const reportPath = (0, path_1.resolve)(testDir, 'test-report.json');
        fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
        logSuccess(`–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${reportPath}`);
    }
    catch (error) {
        logWarning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç');
    }
}
function printSummary(results) {
    logHeader('–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    const totalTests = Object.keys(results).length;
    const passedTests = Object.values(results).filter(Boolean).length;
    const failedTests = totalTests - passedTests;
    if (results.unit !== undefined) {
        log(`Unit —Ç–µ—Å—Ç—ã: ${results.unit ? '‚úÖ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–´'}`);
    }
    if (results.integration !== undefined) {
        log(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${results.integration ? '‚úÖ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–´'}`);
    }
    if (results.linting !== undefined) {
        log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: ${results.linting ? '‚úÖ –ü–†–û–ô–î–ï–ù–ê' : '‚ö†Ô∏è  –° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò'}`);
    }
    log(`\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —É—Å–ø–µ—à–Ω–æ`, failedTests === 0 ? 'green' : 'red');
    if (withCoverage) {
        logInfo('–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–∞–ø–∫–µ coverage/');
    }
}
async function main() {
    logHeader('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Crypto Mixer');
    logInfo('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞:');
    if (isUnitOnly)
        log('  - –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã');
    if (isIntegrationOnly)
        log('  - –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
    if (withCoverage)
        log('  - –° –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞');
    if (watchMode)
        log('  - –í —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è');
    if (verbose)
        log('  - –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥');
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checkDependencies();
    checkTestFiles();
    const results = {};
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        if (!watchMode) {
            results.linting = runLinting();
        }
        // –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
        if (!isIntegrationOnly) {
            results.unit = runTests(unitTests, 'Unit');
        }
        // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if (!isUnitOnly) {
            results.integration = runTests(integrationTests, '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ');
        }
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        if (!watchMode) {
            generateTestReport();
        }
        // –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
        printSummary(results);
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
        const hasFailures = Object.values(results).some(result => result === false);
        process.exit(hasFailures ? 1 : 0);
    }
    catch (error) {
        logError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤');
        console.error(error);
        process.exit(1);
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
process.on('SIGINT', () => {
    log('\n‚èπÔ∏è  –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'yellow');
    process.exit(0);
});
process.on('SIGTERM', () => {
    log('\n‚èπÔ∏è  –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É TERM', 'yellow');
    process.exit(0);
});
// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if (require.main === module) {
    main().catch(error => {
        logError('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
        console.error(error);
        process.exit(1);
    });
}
//# sourceMappingURL=run-tests.js.map