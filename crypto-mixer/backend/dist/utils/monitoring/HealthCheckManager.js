"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthCheckManager = void 0;
const events_1 = require("events");
const axios_1 = __importDefault(require("axios"));
const child_process_1 = require("child_process");
const redis = __importStar(require("redis"));
const logger_1 = require("../logger");
const DatabaseManager_1 = require("../../database/DatabaseManager");
/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä health checks –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ crypto-mixer
 */
class HealthCheckManager extends events_1.EventEmitter {
    constructor(config) {
        super();
        this.isRunning = false;
        this.checkInterval = null;
        this.serviceResults = new Map();
        this.serviceHistory = new Map();
        this.consecutiveFailures = new Map();
        this.systemStartTime = new Date();
        this.healthyTime = 0; // –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ healthy
        this.lastOverallStatus = 'unknown';
        this.config = config;
        this.validateConfig();
        this.initializeServices();
    }
    /**
     * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã health checks
     */
    async start() {
        if (this.isRunning) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è Health Check Manager —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        const operationId = await logger_1.enhancedDbLogger.startOperation('health_check_manager_start');
        try {
            logger_1.enhancedDbLogger.info('üè• –ó–∞–ø—É—Å–∫ Health Check Manager', {
                services: this.config.services.length,
                interval: this.config.interval,
                parallelChecks: this.config.parallelChecks
            });
            this.isRunning = true;
            this.systemStartTime = new Date();
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await this.performHealthChecks();
            // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            this.checkInterval = setInterval(async () => {
                try {
                    await this.performHealthChecks();
                }
                catch (error) {
                    logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ health checks', { error });
                }
            }, this.config.interval * 1000);
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.info('‚úÖ Health Check Manager –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            this.isRunning = false;
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã health checks
     */
    async stop() {
        if (!this.isRunning) {
            return;
        }
        logger_1.enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Health Check Manager');
        this.isRunning = false;
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
        logger_1.enhancedDbLogger.info('‚úÖ Health Check Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async performHealthChecks() {
        const startTime = Date.now();
        const enabledServices = this.config.services.filter(s => s.enabled);
        logger_1.enhancedDbLogger.debug('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ health checks', {
            services: enabledServices.length,
            parallel: this.config.parallelChecks
        });
        try {
            let results;
            if (this.config.parallelChecks) {
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
                const promises = enabledServices.map(service => this.checkService(service).catch(error => {
                    logger_1.enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${service.name}`, { error });
                    return this.createErrorResult(service, error);
                }));
                results = await Promise.all(promises);
            }
            else {
                // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
                results = [];
                for (const service of enabledServices) {
                    try {
                        const result = await this.checkService(service);
                        results.push(result);
                    }
                    catch (error) {
                        logger_1.enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${service.name}`, { error });
                        results.push(this.createErrorResult(service, error));
                    }
                }
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏
            this.updateServiceResults(results);
            // –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            const systemStatus = this.calculateSystemHealth();
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
            this.checkStatusChanges(systemStatus);
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ uptime
            this.updateUptimeStats(systemStatus);
            const duration = Date.now() - startTime;
            logger_1.enhancedDbLogger.debug('‚úÖ Health checks –∑–∞–≤–µ—Ä—à–µ–Ω—ã', {
                duration: `${duration}ms`,
                overall: systemStatus.overall,
                healthy: systemStatus.summary.healthy,
                critical: systemStatus.summary.critical
            });
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ health checks', { error });
            this.emit('system_error', error);
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkService(service) {
        const startTime = Date.now();
        const timeout = service.timeout || this.config.timeout;
        try {
            let result;
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            const checkPromise = this.executeServiceCheck(service);
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error(`Timeout after ${timeout}s`)), timeout * 1000);
            });
            const checkResult = await Promise.race([checkPromise, timeoutPromise]);
            const responseTime = Date.now() - startTime;
            result = {
                serviceName: service.name,
                status: checkResult.status,
                responseTime,
                timestamp: new Date(),
                details: checkResult.details,
                metadata: {
                    consecutiveFailures: checkResult.status === 'healthy' ? 0 :
                        (this.consecutiveFailures.get(service.name) || 0) + 1,
                    lastSuccess: checkResult.status === 'healthy' ? new Date() :
                        this.serviceResults.get(service.name)?.metadata.lastSuccess,
                    lastFailure: checkResult.status !== 'healthy' ? new Date() :
                        this.serviceResults.get(service.name)?.metadata.lastFailure,
                    uptime: this.calculateServiceUptime(service.name)
                }
            };
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            if (responseTime > this.config.alertThresholds.responseTimeCritical) {
                result.status = 'critical';
                result.details.message += ` (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${responseTime}ms)`;
            }
            else if (responseTime > this.config.alertThresholds.responseTimeWarning) {
                result.status = result.status === 'healthy' ? 'warning' : result.status;
                result.details.message += ` (–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${responseTime}ms)`;
            }
            return result;
        }
        catch (error) {
            return this.createErrorResult(service, error, Date.now() - startTime);
        }
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞
     */
    async executeServiceCheck(service) {
        switch (service.type) {
            case 'http':
                return await this.checkHTTPService(service);
            case 'tcp':
                return await this.checkTCPService(service);
            case 'database':
                return await this.checkDatabaseService(service);
            case 'redis':
                return await this.checkRedisService(service);
            case 'rabbitmq':
                return await this.checkRabbitMQService(service);
            case 'vault':
                return await this.checkVaultService(service);
            case 'hsm':
                return await this.checkHSMService(service);
            case 'command':
                return await this.checkCommandService(service);
            case 'custom':
                if (service.customCheck) {
                    const result = await service.customCheck();
                    return {
                        status: result.status === 'unknown' ? 'warning' : result.status,
                        details: result.details
                    };
                }
                throw new Error('Custom check function not provided');
            default:
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞: ${service.type}`);
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkHTTPService(service) {
        const url = `http://${service.host}:${service.port}${service.path || '/health'}`;
        const expectedStatus = service.expectedStatus || 200;
        try {
            const response = await axios_1.default.get(url, {
                timeout: (service.timeout || this.config.timeout) * 1000,
                headers: {
                    'User-Agent': 'HealthCheckManager/1.0'
                }
            });
            if (response.status === expectedStatus) {
                return {
                    status: 'healthy',
                    details: {
                        message: `HTTP ${response.status} - ${response.statusText}`,
                        data: {
                            status: response.status,
                            headers: response.headers,
                            dataLength: JSON.stringify(response.data).length
                        }
                    }
                };
            }
            else {
                return {
                    status: 'warning',
                    details: {
                        message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: ${response.status} (–æ–∂–∏–¥–∞–ª—Å—è ${expectedStatus})`,
                        data: { status: response.status, expected: expectedStatus }
                    }
                };
            }
        }
        catch (error) {
            const axiosError = error;
            return {
                status: 'critical',
                details: {
                    message: `HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${axiosError.message}`,
                    data: {
                        code: axiosError.code,
                        status: axiosError.response?.status,
                        url
                    }
                }
            };
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    async checkTCPService(service) {
        return new Promise((resolve) => {
            const net = require('net');
            const socket = new net.Socket();
            const timeout = (service.timeout || this.config.timeout) * 1000;
            const timer = setTimeout(() => {
                socket.destroy();
                resolve({
                    status: 'critical',
                    details: {
                        message: `TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (${timeout}ms)`,
                        data: { host: service.host, port: service.port }
                    }
                });
            }, timeout);
            socket.connect(service.port, service.host, () => {
                clearTimeout(timer);
                socket.destroy();
                resolve({
                    status: 'healthy',
                    details: {
                        message: `TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ`,
                        data: { host: service.host, port: service.port }
                    }
                });
            });
            socket.on('error', (error) => {
                clearTimeout(timer);
                socket.destroy();
                resolve({
                    status: 'critical',
                    details: {
                        message: `TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${error.message}`,
                        data: { host: service.host, port: service.port, error: error.message }
                    }
                });
            });
        });
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async checkDatabaseService(service) {
        try {
            const dbManager = DatabaseManager_1.DatabaseManager.getInstance();
            const startTime = Date.now();
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await dbManager.getConnection().authenticate();
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            const result = await dbManager.query('SELECT 1 as health_check');
            const responseTime = Date.now() - startTime;
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ connection pool
            const poolInfo = dbManager.getConnectionInfo();
            return {
                status: 'healthy',
                details: {
                    message: `Database –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (${responseTime}ms)`,
                    data: {
                        responseTime,
                        poolInfo,
                        testQuery: result
                    }
                }
            };
        }
        catch (error) {
            return {
                status: 'critical',
                details: {
                    message: `Database –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${error}`,
                    data: { error: String(error) }
                }
            };
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkRedisService(service) {
        let client = null;
        try {
            client = redis.createClient({
                host: service.host,
                port: service.port,
                connectTimeout: (service.timeout || this.config.timeout) * 1000
            });
            await client.connect();
            const startTime = Date.now();
            const pong = await client.ping();
            const responseTime = Date.now() - startTime;
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Redis
            const info = await client.info();
            const memoryInfo = info.split('\r\n').find(line => line.startsWith('used_memory_human:'));
            return {
                status: 'healthy',
                details: {
                    message: `Redis PING —É—Å–ø–µ—à–Ω–æ (${responseTime}ms)`,
                    data: {
                        responseTime,
                        ping: pong,
                        memory: memoryInfo
                    }
                }
            };
        }
        catch (error) {
            return {
                status: 'critical',
                details: {
                    message: `Redis –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${error}`,
                    data: { error: String(error) }
                }
            };
        }
        finally {
            if (client) {
                try {
                    await client.quit();
                }
                catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                }
            }
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ RabbitMQ —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkRabbitMQService(service) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ management API
            const url = `http://${service.host}:15672/api/overview`;
            const auth = service.metadata?.auth || 'guest:guest';
            const response = await axios_1.default.get(url, {
                timeout: (service.timeout || this.config.timeout) * 1000,
                auth: {
                    username: auth.split(':')[0],
                    password: auth.split(':')[1]
                }
            });
            const data = response.data;
            const nodeRunning = data.node && data.rabbitmq_version;
            if (nodeRunning) {
                return {
                    status: 'healthy',
                    details: {
                        message: `RabbitMQ —É–∑–µ–ª —Ä–∞–±–æ—Ç–∞–µ—Ç (v${data.rabbitmq_version})`,
                        data: {
                            version: data.rabbitmq_version,
                            node: data.node,
                            messageStats: data.message_stats
                        }
                    }
                };
            }
            else {
                return {
                    status: 'warning',
                    details: {
                        message: 'RabbitMQ API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —É–∑–µ–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω',
                        data
                    }
                };
            }
        }
        catch (error) {
            // Fallback –∫ TCP –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞ 5672
            return await this.checkTCPService({
                ...service,
                type: 'tcp',
                port: 5672
            });
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ HashiCorp Vault
     */
    async checkVaultService(service) {
        try {
            const url = `http://${service.host}:${service.port}/v1/sys/health`;
            const response = await axios_1.default.get(url, {
                timeout: (service.timeout || this.config.timeout) * 1000
            });
            const health = response.data;
            if (health.sealed) {
                return {
                    status: 'critical',
                    details: {
                        message: 'Vault –∑–∞–ø–µ—á–∞—Ç–∞–Ω (sealed)',
                        data: health
                    }
                };
            }
            else if (health.standby) {
                return {
                    status: 'warning',
                    details: {
                        message: 'Vault –≤ —Ä–µ–∂–∏–º–µ standby',
                        data: health
                    }
                };
            }
            else {
                return {
                    status: 'healthy',
                    details: {
                        message: `Vault –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω (v${health.version})`,
                        data: health
                    }
                };
            }
        }
        catch (error) {
            return {
                status: 'critical',
                details: {
                    message: `Vault –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${error}`,
                    data: { error: String(error) }
                }
            };
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ HSM Manager
     */
    async checkHSMService(service) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PKCS#11 –º–æ–¥—É–ª—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ HSMManager.checkConnection()
            // –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            const testConnection = await new Promise((resolve) => {
                setTimeout(() => resolve(true), 100);
            });
            if (testConnection) {
                return {
                    status: 'healthy',
                    details: {
                        message: 'HSM –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω',
                        data: { connected: true }
                    }
                };
            }
            else {
                return {
                    status: 'critical',
                    details: {
                        message: 'HSM –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                        data: { connected: false }
                    }
                };
            }
        }
        catch (error) {
            return {
                status: 'critical',
                details: {
                    message: `HSM –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${error}`,
                    data: { error: String(error) }
                }
            };
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     */
    async checkCommandService(service) {
        const command = service.metadata?.command;
        if (!command) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª—è command check');
        }
        return new Promise((resolve) => {
            const timeout = (service.timeout || this.config.timeout) * 1000;
            const child = (0, child_process_1.spawn)('sh', ['-c', command]);
            let stdout = '';
            let stderr = '';
            const timer = setTimeout(() => {
                child.kill();
                resolve({
                    status: 'critical',
                    details: {
                        message: `–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (${timeout}ms)`,
                        data: { command, timeout }
                    }
                });
            }, timeout);
            child.stdout.on('data', (data) => {
                stdout += data.toString();
            });
            child.stderr.on('data', (data) => {
                stderr += data.toString();
            });
            child.on('close', (code) => {
                clearTimeout(timer);
                if (code === 0) {
                    resolve({
                        status: 'healthy',
                        details: {
                            message: `–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
                            data: { command, stdout: stdout.trim(), exitCode: code }
                        }
                    });
                }
                else {
                    resolve({
                        status: 'critical',
                        details: {
                            message: `–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code})`,
                            data: { command, stderr: stderr.trim(), exitCode: code }
                        }
                    });
                }
            });
            child.on('error', (error) => {
                clearTimeout(timer);
                resolve({
                    status: 'critical',
                    details: {
                        message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`,
                        data: { command, error: error.message }
                    }
                });
            });
        });
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—à–∏–±–∫–∏
     */
    createErrorResult(service, error, responseTime = 0) {
        const consecutiveFailures = (this.consecutiveFailures.get(service.name) || 0) + 1;
        return {
            serviceName: service.name,
            status: 'critical',
            responseTime,
            timestamp: new Date(),
            details: {
                message: `–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${error.message || error}`,
                error: String(error)
            },
            metadata: {
                consecutiveFailures,
                lastFailure: new Date(),
                lastSuccess: this.serviceResults.get(service.name)?.metadata.lastSuccess,
                uptime: this.calculateServiceUptime(service.name)
            }
        };
    }
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    updateServiceResults(results) {
        for (const result of results) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.serviceResults.set(result.serviceName, result);
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á
            if (result.status === 'healthy') {
                this.consecutiveFailures.delete(result.serviceName);
            }
            else {
                this.consecutiveFailures.set(result.serviceName, result.metadata.consecutiveFailures);
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø—Ä–æ–≤–µ—Ä–æ–∫)
            const history = this.serviceHistory.get(result.serviceName) || [];
            history.push(result);
            if (history.length > 100) {
                history.shift();
            }
            this.serviceHistory.set(result.serviceName, history);
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã
            this.checkServiceAlerts(result);
        }
    }
    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    calculateSystemHealth() {
        const services = Array.from(this.serviceResults.values());
        const criticalServices = this.config.services.filter(s => s.critical && s.enabled);
        const summary = {
            total: services.length,
            healthy: services.filter(s => s.status === 'healthy').length,
            warning: services.filter(s => s.status === 'warning').length,
            critical: services.filter(s => s.status === 'critical').length,
            unknown: services.filter(s => s.status === 'unknown').length
        };
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        let overall = 'healthy';
        const criticalServicesDown = [];
        for (const service of criticalServices) {
            const result = this.serviceResults.get(service.name);
            if (!result || result.status === 'critical') {
                criticalServicesDown.push(service.name);
            }
        }
        if (criticalServicesDown.length > 0) {
            overall = 'down';
        }
        else if (summary.critical > 0) {
            overall = 'critical';
        }
        else if (summary.warning > 0 || summary.unknown > 0) {
            overall = 'degraded';
        }
        // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        const averageResponseTime = services.length > 0
            ? services.reduce((sum, s) => sum + s.responseTime, 0) / services.length
            : 0;
        return {
            overall,
            timestamp: new Date(),
            services: this.serviceResults,
            summary,
            criticalServicesDown,
            averageResponseTime,
            systemUptime: this.calculateSystemUptime()
        };
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    checkStatusChanges(systemStatus) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        if (systemStatus.overall !== this.lastOverallStatus) {
            logger_1.enhancedDbLogger.info('üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã', {
                from: this.lastOverallStatus,
                to: systemStatus.overall,
                criticalServicesDown: systemStatus.criticalServicesDown
            });
            this.emit('status_change', {
                from: this.lastOverallStatus,
                to: systemStatus.overall,
                timestamp: systemStatus.timestamp,
                details: systemStatus
            });
            this.lastOverallStatus = systemStatus.overall;
        }
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        this.emit('health_check_completed', systemStatus);
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    checkServiceAlerts(result) {
        const service = this.config.services.find(s => s.name === result.serviceName);
        if (!service)
            return;
        // –ê–ª–µ—Ä—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥
        if (result.metadata.consecutiveFailures >= this.config.alertThresholds.consecutiveFailures) {
            this.emit('service_alert', {
                type: 'consecutive_failures',
                service: result.serviceName,
                failures: result.metadata.consecutiveFailures,
                threshold: this.config.alertThresholds.consecutiveFailures,
                critical: service.critical,
                result
            });
        }
        // –ê–ª–µ—Ä—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
        const previousResult = this.serviceHistory.get(result.serviceName)?.slice(-2)?.[0];
        if (previousResult && previousResult.status !== result.status) {
            this.emit('service_status_change', {
                service: result.serviceName,
                from: previousResult.status,
                to: result.status,
                critical: service.critical,
                result
            });
        }
    }
    /**
     * –†–∞—Å—á–µ—Ç uptime –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    calculateServiceUptime(serviceName) {
        const history = this.serviceHistory.get(serviceName);
        if (!history || history.length === 0)
            return 100;
        const healthyChecks = history.filter(h => h.status === 'healthy').length;
        return (healthyChecks / history.length) * 100;
    }
    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ uptime —Å–∏—Å—Ç–µ–º—ã
     */
    calculateSystemUptime() {
        const totalTime = Date.now() - this.systemStartTime.getTime();
        if (totalTime === 0)
            return 100;
        return (this.healthyTime / totalTime) * 100;
    }
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ uptime
     */
    updateUptimeStats(systemStatus) {
        const now = Date.now();
        const lastCheck = this.serviceResults.size > 0 ?
            Math.max(...Array.from(this.serviceResults.values()).map(r => r.timestamp.getTime())) :
            this.systemStartTime.getTime();
        const timeDiff = now - lastCheck;
        if (systemStatus.overall === 'healthy') {
            this.healthyTime += timeDiff;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemHealth() {
        return this.calculateSystemHealth();
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    getServiceHealth(serviceName) {
        return this.serviceResults.get(serviceName) || null;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    getServiceHistory(serviceName, limit = 50) {
        const history = this.serviceHistory.get(serviceName) || [];
        return history.slice(-limit);
    }
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkServiceNow(serviceName) {
        const service = this.config.services.find(s => s.name === serviceName);
        if (!service) {
            throw new Error(`–°–µ—Ä–≤–∏—Å ${serviceName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        const result = await this.checkService(service);
        this.updateServiceResults([result]);
        return result;
    }
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async checkAllServicesNow() {
        await this.performHealthChecks();
        return this.getSystemHealth();
    }
    // ========== –ü–†–ò–í–ê–¢–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========
    validateConfig() {
        if (!this.config.services || this.config.services.length === 0) {
            throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        }
        for (const service of this.config.services) {
            if (!service.name) {
                throw new Error('–ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            }
            if (!service.type) {
                throw new Error(`–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è ${service.name}`);
            }
            if (['http', 'tcp'].includes(service.type) && (!service.host || !service.port)) {
                throw new Error(`Host –∏ port –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è ${service.type} —Å–µ—Ä–≤–∏—Å–∞ ${service.name}`);
            }
        }
    }
    initializeServices() {
        for (const service of this.config.services) {
            this.consecutiveFailures.set(service.name, 0);
            this.serviceHistory.set(service.name, []);
        }
        logger_1.enhancedDbLogger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', {
            total: this.config.services.length,
            enabled: this.config.services.filter(s => s.enabled).length,
            critical: this.config.services.filter(s => s.critical).length
        });
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    isActive() {
        return this.isRunning;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    getConfig() {
        return { ...this.config };
    }
}
exports.HealthCheckManager = HealthCheckManager;
//# sourceMappingURL=HealthCheckManager.js.map