"use strict";
/**
 * System Initializer –¥–ª—è comprehensive error handling –∏ logging —Å–∏—Å—Ç–µ–º
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º:
 * - Error Handler —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
 * - Audit Logger —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é
 * - Performance Monitor —Å —Ç—Ä–µ–π—Å–∏–Ω–≥–æ–º
 * - Alert Manager —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
 * - Enhanced Logger —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemInitializer = void 0;
exports.initializeAllSystems = initializeAllSystems;
exports.getSystemInitializer = getSystemInitializer;
exports.shutdownAllSystems = shutdownAllSystems;
const winston_1 = __importDefault(require("winston"));
const ErrorHandler_1 = require("./errors/ErrorHandler");
const AuditLogger_1 = require("./logging/AuditLogger");
const PerformanceMonitor_1 = __importDefault(require("./monitoring/PerformanceMonitor"));
const AlertManager_1 = require("./alerts/AlertManager");
const logger_1 = require("./logger");
const ErrorTypes_1 = require("./errors/ErrorTypes");
/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
 */
class SystemInitializer {
    constructor(config = {}) {
        this.initialized = false;
        this.config = this.mergeWithDefaults(config);
        this.logger = this.createMainLogger();
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
     */
    async initialize() {
        if (this.initialized) {
            this.logger.warn('üîÑ –°–∏—Å—Ç–µ–º—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            return;
        }
        this.logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é comprehensive —Å–∏—Å—Ç–µ–º...');
        try {
            // –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            await this.initializeBaseLogging();
            // –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Error Handler
            await this.initializeErrorHandler();
            // –≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Audit Logger
            await this.initializeAuditLogger();
            // –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Performance Monitor
            await this.initializePerformanceMonitor();
            // –≠—Ç–∞–ø 5: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alert Manager
            await this.initializeAlertManager();
            // –≠—Ç–∞–ø 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
            await this.setupSystemIntegrations();
            // –≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º
            await this.performHealthCheck();
            this.initialized = true;
            this.logger.info('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
        }
        catch (error) {
            this.logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º:', error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç health —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
     */
    async getSystemHealth() {
        if (!this.initialized) {
            throw new Error('–°–∏—Å—Ç–µ–º—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
        const health = {
            overall: 'healthy',
            components: {
                errorHandler: 'healthy',
                auditLogger: 'healthy',
                performanceMonitor: 'healthy',
                alertManager: 'healthy'
            },
            metrics: {
                totalErrors: 0,
                criticalErrors: 0,
                auditEvents: 0,
                activeAlerts: 0,
                systemPerformance: 'good'
            },
            lastCheck: new Date()
        };
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Error Handler
            if (this.errorHandler) {
                const errorMetrics = this.errorHandler.getMetrics();
                health.metrics.totalErrors = errorMetrics.totalErrors;
                health.metrics.criticalErrors = errorMetrics.criticalErrorsCount;
                if (errorMetrics.criticalErrorsCount > 5) {
                    health.components.errorHandler = 'critical';
                }
                else if (errorMetrics.totalErrors > 50) {
                    health.components.errorHandler = 'degraded';
                }
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Audit Logger
            if (this.auditLogger) {
                const auditMetrics = this.auditLogger.getMetrics();
                health.metrics.auditEvents = auditMetrics.totalEvents;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Performance Monitor
            if (this.performanceMonitor) {
                const lastSnapshot = this.performanceMonitor.getLastSnapshot();
                if (lastSnapshot) {
                    // Determine health based on system metrics
                    const cpuUsage = lastSnapshot.system.cpu.usage;
                    const memoryUsage = lastSnapshot.system.memory.usage;
                    if (cpuUsage > 90 || memoryUsage > 90) {
                        health.components.performanceMonitor = 'critical';
                        health.metrics.systemPerformance = 'critical';
                    }
                    else if (cpuUsage > 80 || memoryUsage > 80) {
                        health.components.performanceMonitor = 'degraded';
                        health.metrics.systemPerformance = 'warning';
                    }
                    else {
                        health.metrics.systemPerformance = 'good';
                    }
                }
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Alert Manager
            if (this.alertManager) {
                const activeAlerts = this.alertManager.getActiveAlerts();
                health.metrics.activeAlerts = activeAlerts.length;
                const criticalAlerts = activeAlerts.filter(a => a.severity === AlertManager_1.AlertSeverity.CRITICAL).length;
                if (criticalAlerts > 0) {
                    health.components.alertManager = 'degraded';
                }
            }
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const componentStates = Object.values(health.components);
            if (componentStates.some(state => state === 'critical')) {
                health.overall = 'critical';
            }
            else if (componentStates.some(state => state === 'degraded')) {
                health.overall = 'degraded';
            }
        }
        catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ health —Å–∏—Å—Ç–µ–º:', error);
            health.overall = 'critical';
        }
        return health;
    }
    /**
     * Graceful shutdown –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
     */
    async shutdown() {
        this.logger.info('üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown —Å–∏—Å—Ç–µ–º...');
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (this.alertManager) {
                this.logger.info('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Alert Manager...');
                // AlertManager –Ω–µ —Ç—Ä–µ–±—É–µ—Ç explicit shutdown
            }
            if (this.performanceMonitor) {
                this.logger.info('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Performance Monitor...');
                await this.performanceMonitor.stop();
            }
            if (this.auditLogger) {
                this.logger.info('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Audit Logger...');
                // AuditLogger –Ω–µ —Ç—Ä–µ–±—É–µ—Ç explicit shutdown
            }
            if (this.errorHandler) {
                this.logger.info('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Error Handler...');
                // ErrorHandler –Ω–µ —Ç—Ä–µ–±—É–µ—Ç explicit shutdown
            }
            this.initialized = false;
            this.logger.info('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown —Å–∏—Å—Ç–µ–º:', error);
            throw error;
        }
    }
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
     */
    getSystems() {
        if (!this.initialized) {
            throw new Error('–°–∏—Å—Ç–µ–º—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
        return {
            logger: this.logger,
            errorHandler: this.errorHandler,
            auditLogger: this.auditLogger,
            performanceMonitor: this.performanceMonitor,
            alertManager: this.alertManager
        };
    }
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç enhanced loggers –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    getLoggers() {
        return {
            mixer: logger_1.enhancedMixerLogger,
            database: logger_1.enhancedDbLogger,
            api: logger_1.enhancedApiLogger,
            security: logger_1.enhancedSecurityLogger,
            blockchain: logger_1.enhancedBlockchainLogger,
            scheduler: logger_1.enhancedSchedulerLogger,
            wallet: logger_1.enhancedWalletLogger
        };
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    async initializeBaseLogging() {
        this.logger.info('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced logging —Å–∏—Å—Ç–µ–º...');
        try {
            (0, logger_1.initializeLoggingSystems)();
            this.logger.info('‚úÖ Enhanced logging —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ logging —Å–∏—Å—Ç–µ–º:', error);
            throw error;
        }
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Error Handler
     */
    async initializeErrorHandler() {
        this.logger.info('üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Error Handler...');
        try {
            this.errorHandler = (0, ErrorHandler_1.initializeErrorHandler)(this.logger, {
                enabled: this.config.errorHandler.enabled,
                criticalErrorThreshold: this.config.errorHandler.criticalErrorThreshold,
                errorRateThreshold: this.config.errorHandler.errorRateThreshold,
                timeWindowMinutes: this.config.errorHandler.timeWindowMinutes
            });
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            this.errorHandler.on('error', (error) => {
                this.logger.warn('üî• Error Handler –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—à–∏–±–∫—É', { errorCode: error.code });
            });
            this.errorHandler.on('criticalError', (error) => {
                this.logger.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!', { error: error.toLogObject() });
            });
            this.logger.info('‚úÖ Error Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Error Handler:', error);
            throw error;
        }
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Audit Logger
     */
    async initializeAuditLogger() {
        this.logger.info('üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Audit Logger...');
        try {
            this.auditLogger = (0, AuditLogger_1.initializeAuditLogger)(this.config.auditLogger);
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            this.auditLogger.on('auditEvent', (event) => {
                if (event.severity === 'critical' || event.severity === 'security') {
                    this.logger.warn('üì¢ –í–∞–∂–Ω–æ–µ audit —Å–æ–±—ã—Ç–∏–µ', { eventType: event.eventType });
                }
            });
            this.auditLogger.on('criticalAuditEvent', (event) => {
                this.logger.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ audit —Å–æ–±—ã—Ç–∏–µ!', { event });
            });
            this.logger.info('‚úÖ Audit Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Audit Logger:', error);
            throw error;
        }
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Performance Monitor
     */
    async initializePerformanceMonitor() {
        this.logger.info('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Performance Monitor...');
        try {
            this.performanceMonitor = new PerformanceMonitor_1.default(this.config.performanceMonitor);
            await this.performanceMonitor.start();
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            this.performanceMonitor.on('threshold_exceeded', (data) => {
                this.logger.warn('üêå –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', {
                    type: data.type,
                    value: data.value,
                    threshold: data.threshold
                });
            });
            this.performanceMonitor.on('metrics_error', (error) => {
                this.logger.error('üìä –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!', { error });
            });
            this.logger.info('‚úÖ Performance Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Performance Monitor:', error);
            throw error;
        }
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Alert Manager
     */
    async initializeAlertManager() {
        this.logger.info('üö® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alert Manager...');
        try {
            this.alertManager = (0, AlertManager_1.initializeAlertManager)();
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.alertManager.configureChannel({
                channel: AlertManager_1.AlertChannel.CONSOLE,
                enabled: true,
                config: {}
            });
            if (this.config.alertManager.channels.email?.enabled) {
                this.alertManager.configureChannel({
                    channel: AlertManager_1.AlertChannel.EMAIL,
                    enabled: true,
                    config: this.config.alertManager.channels.email
                });
            }
            if (this.config.alertManager.channels.slack?.enabled) {
                this.alertManager.configureChannel({
                    channel: AlertManager_1.AlertChannel.SLACK,
                    enabled: true,
                    config: this.config.alertManager.channels.slack
                });
            }
            // –î–æ–±–∞–≤–ª—è–µ–º production-ready –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
            this.setupProductionAlertRules();
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            this.alertManager.on('alertTriggered', (alert) => {
                this.logger.warn('üö® –ê–ª–µ—Ä—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', {
                    alertId: alert.id,
                    severity: alert.severity,
                    title: alert.title
                });
            });
            this.alertManager.on('alertResolved', (alert) => {
                this.logger.info('‚úÖ –ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω', { alertId: alert.id, title: alert.title });
            });
            this.logger.info('‚úÖ Alert Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Alert Manager:', error);
            throw error;
        }
    }
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
     */
    async setupSystemIntegrations() {
        this.logger.info('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏...');
        try {
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Error Handler -> Alert Manager
            if (this.errorHandler && this.alertManager) {
                this.errorHandler.on('error', async (error) => {
                    await this.alertManager.processError(error, 'errorHandler');
                });
                this.errorHandler.on('criticalError', async (error) => {
                    await this.alertManager.processError(error, 'errorHandler');
                });
            }
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Performance Monitor -> Alert Manager
            if (this.performanceMonitor && this.alertManager) {
                this.performanceMonitor.on('threshold_exceeded', async (data) => {
                    // Create a SystemError for alert processing
                    const performanceError = new ErrorTypes_1.SystemError(`Performance threshold exceeded: ${data.type} (${data.value}% > ${data.threshold}%)`, ErrorTypes_1.ErrorCode.SYSTEM_OVERLOAD, {
                        component: 'performanceMonitor',
                        operation: 'threshold_check',
                        additionalInfo: {
                            type: data.type,
                            value: data.value,
                            threshold: data.threshold,
                            timestamp: data.timestamp
                        }
                    });
                    await this.alertManager.processError(performanceError, 'performanceMonitor');
                });
            }
            this.logger.info('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:', error);
            throw error;
        }
    }
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç production-ready –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
     */
    setupProductionAlertRules() {
        if (!this.alertManager)
            return;
        const rules = [
            {
                id: 'critical_system_errors',
                name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏',
                description: '–ê–ª–µ—Ä—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                enabled: true,
                conditions: {
                    errorSeverity: [ErrorTypes_1.ErrorSeverity.CRITICAL]
                },
                alertSeverity: AlertManager_1.AlertSeverity.CRITICAL,
                channels: [AlertManager_1.AlertChannel.CONSOLE, AlertManager_1.AlertChannel.EMAIL],
                cooldownMinutes: 5,
                maxAlertsPerHour: 20
            },
            {
                id: 'security_violations',
                name: '–ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                description: '–ê–ª–µ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                enabled: true,
                conditions: {
                    components: ['security', 'authentication', 'authorization', 'vault', 'hsm']
                },
                alertSeverity: AlertManager_1.AlertSeverity.EMERGENCY,
                channels: [AlertManager_1.AlertChannel.CONSOLE, AlertManager_1.AlertChannel.EMAIL, AlertManager_1.AlertChannel.SLACK],
                cooldownMinutes: 0,
                maxAlertsPerHour: 100
            },
            {
                id: 'mixing_failures',
                name: '–û—à–∏–±–∫–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è',
                description: '–ê–ª–µ—Ä—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è',
                enabled: true,
                conditions: {
                    components: ['mixer', 'pool', 'scheduler'],
                    errorSeverity: [ErrorTypes_1.ErrorSeverity.HIGH, ErrorTypes_1.ErrorSeverity.CRITICAL]
                },
                alertSeverity: AlertManager_1.AlertSeverity.CRITICAL,
                channels: [AlertManager_1.AlertChannel.CONSOLE, AlertManager_1.AlertChannel.EMAIL],
                cooldownMinutes: 10,
                maxAlertsPerHour: 15
            },
            {
                id: 'blockchain_issues',
                name: '–ü—Ä–æ–±–ª–µ–º—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º',
                description: '–ê–ª–µ—Ä—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –±–ª–æ–∫—á–µ–π–Ω —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏',
                enabled: true,
                conditions: {
                    components: ['blockchain', 'wallet'],
                    errorSeverity: [ErrorTypes_1.ErrorSeverity.HIGH, ErrorTypes_1.ErrorSeverity.CRITICAL]
                },
                alertSeverity: AlertManager_1.AlertSeverity.WARNING,
                channels: [AlertManager_1.AlertChannel.CONSOLE],
                cooldownMinutes: 15,
                maxAlertsPerHour: 10
            },
            {
                id: 'high_memory_usage',
                name: '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                description: '–ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏',
                enabled: true,
                conditions: {
                    metricThresholds: [{
                            metric: 'system.memory.usage',
                            operator: 'gt',
                            value: 85,
                            duration: 60000
                        }]
                },
                alertSeverity: AlertManager_1.AlertSeverity.WARNING,
                channels: [AlertManager_1.AlertChannel.CONSOLE],
                cooldownMinutes: 20,
                maxAlertsPerHour: 5
            },
            {
                id: 'event_loop_lag',
                name: '–í—ã—Å–æ–∫–∏–π lag event loop',
                description: '–ê–ª–µ—Ä—Ç –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º lag event loop',
                enabled: true,
                conditions: {
                    metricThresholds: [{
                            metric: 'system.eventloop.lag',
                            operator: 'gt',
                            value: 100,
                            duration: 30000
                        }]
                },
                alertSeverity: AlertManager_1.AlertSeverity.WARNING,
                channels: [AlertManager_1.AlertChannel.CONSOLE],
                cooldownMinutes: 10,
                maxAlertsPerHour: 8
            }
        ];
        rules.forEach(rule => {
            this.alertManager.addRule(rule);
        });
        this.logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${rules.length} production –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤`);
    }
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º
     */
    async performHealthCheck() {
        this.logger.info('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ health check —Å–∏—Å—Ç–µ–º...');
        try {
            const health = await this.getSystemHealth();
            this.logger.info('üìä Health check —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
                overall: health.overall,
                components: health.components,
                metrics: health.metrics
            });
            if (health.overall === 'critical') {
                this.logger.error('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–∞—Ö!');
            }
            else if (health.overall === 'degraded') {
                this.logger.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–µ–π');
            }
            else {
                this.logger.info('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–¥–æ—Ä–æ–≤—ã');
            }
        }
        catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ health check:', error);
        }
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π logger
     */
    createMainLogger() {
        return winston_1.default.createLogger({
            level: this.config.logLevel,
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.errors({ stack: true }), winston_1.default.format.json()),
            defaultMeta: {
                service: 'crypto-mixer-system-initializer',
                environment: this.config.environment
            },
            transports: [
                new winston_1.default.transports.Console({
                    format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.printf(({ timestamp, level, message, ...meta }) => {
                        let log = `${timestamp} [${level}] ${message}`;
                        if (Object.keys(meta).length > 0) {
                            log += ` ${JSON.stringify(meta)}`;
                        }
                        return log;
                    }))
                })
            ]
        });
    }
    /**
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
     */
    mergeWithDefaults(config) {
        const isProduction = process.env.NODE_ENV === 'production';
        return {
            environment: process.env.NODE_ENV || 'development',
            logLevel: process.env.LOG_LEVEL || (isProduction ? 'info' : 'debug'),
            errorHandler: {
                enabled: true,
                criticalErrorThreshold: isProduction ? 10 : 5,
                errorRateThreshold: isProduction ? 100 : 50,
                timeWindowMinutes: 15,
                ...config.errorHandler
            },
            auditLogger: {
                enabled: true,
                encryptLogs: isProduction,
                enableIntegrityCheck: true,
                retentionDays: isProduction ? 365 : 30,
                maxFileSize: '100mb',
                maxFiles: isProduction ? 100 : 10,
                enableCompression: isProduction,
                enableRemoteLogging: false,
                ...config.auditLogger
            },
            performanceMonitor: {
                enabled: true,
                collectInterval: 30,
                retentionPeriod: isProduction ? 3600 : 1800,
                prometheusEnabled: false,
                prometheusPort: 9090,
                alerting: {
                    enabled: true,
                    thresholds: {
                        cpu: 80,
                        memory: 85,
                        disk: 90,
                        responseTime: isProduction ? 2000 : 1000,
                        errorRate: 5
                    }
                },
                sampling: {
                    enabled: isProduction,
                    rate: isProduction ? 10 : 100
                },
                ...config.performanceMonitor
            },
            alertManager: {
                enabled: true,
                channels: {
                    email: {
                        enabled: false,
                        smtpHost: '',
                        smtpPort: 587,
                        smtpUser: '',
                        smtpPassword: '',
                        recipients: []
                    },
                    slack: {
                        enabled: false,
                        webhookUrl: '',
                        channel: '#alerts'
                    },
                    webhook: {
                        enabled: false,
                        url: ''
                    }
                },
                ...config.alertManager
            }
        };
    }
}
exports.SystemInitializer = SystemInitializer;
/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä system initializer'–∞
 */
let globalSystemInitializer = null;
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */
async function initializeAllSystems(config) {
    globalSystemInitializer = new SystemInitializer(config);
    await globalSystemInitializer.initialize();
    return globalSystemInitializer;
}
/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π system initializer
 */
function getSystemInitializer() {
    if (!globalSystemInitializer) {
        throw new Error('Systems –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ initializeAllSystems() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return globalSystemInitializer;
}
/**
 * Graceful shutdown –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
 */
async function shutdownAllSystems() {
    if (globalSystemInitializer) {
        await globalSystemInitializer.shutdown();
        globalSystemInitializer = null;
    }
}
//# sourceMappingURL=SystemInitializer.js.map