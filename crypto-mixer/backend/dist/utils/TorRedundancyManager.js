"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.torRedundancyManager = exports.TorRedundancyManager = void 0;
const events_1 = require("events");
const logger_1 = require("./logger");
const net_1 = __importDefault(require("net"));
const promises_1 = __importDefault(require("fs/promises"));
class TorRedundancyManager extends events_1.EventEmitter {
    constructor(config = {}) {
        super();
        this.instances = new Map();
        this.hiddenServiceClusters = new Map();
        this.healthCheckTimer = null;
        this.isInitialized = false;
        this.currentPrimaryInstance = null;
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Tor instances
        this.INSTANCE_CONFIGS = [
            {
                id: 'primary',
                name: 'Primary Tor Instance',
                socksPort: 9050,
                controlPort: 9053,
                dataDirectory: '/var/lib/tor/primary',
                configFile: '/etc/tor/torrc',
                priority: 1,
                region: 'primary',
            },
            {
                id: 'backup1',
                name: 'Backup Tor Instance 1',
                socksPort: 9060,
                controlPort: 9063,
                dataDirectory: '/var/lib/tor/backup1',
                configFile: '/etc/tor/torrc-backup1',
                priority: 2,
                region: 'eu',
            },
            {
                id: 'backup2',
                name: 'Backup Tor Instance 2',
                socksPort: 9070,
                controlPort: 9073,
                dataDirectory: '/var/lib/tor/backup2',
                configFile: '/etc/tor/torrc-backup2',
                priority: 3,
                region: 'us',
            },
            {
                id: 'emergency',
                name: 'Emergency Tor Instance',
                socksPort: 9080,
                controlPort: 9083,
                dataDirectory: '/var/lib/tor/emergency',
                configFile: '/etc/tor/torrc-emergency',
                priority: 4,
                region: 'asia',
            },
        ];
        this.config = {
            enableMultipleInstances: process.env.TOR_REDUNDANCY_ENABLED === 'true',
            minActiveInstances: 2,
            maxFailureThreshold: 3,
            healthCheckInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            failoverTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
            enableLoadBalancing: true,
            enableGeoFailover: true,
            regions: ['primary', 'eu', 'us', 'asia'],
            ...config,
        };
        logger_1.logger.info('üîÑ TorRedundancyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
            multipleInstances: this.config.enableMultipleInstances,
            minActiveInstances: this.config.minActiveInstances,
            loadBalancing: this.config.enableLoadBalancing,
        });
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async initialize() {
        if (!this.config.enableMultipleInstances) {
            logger_1.logger.info('üîÑ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ Tor –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            return;
        }
        try {
            logger_1.logger.info('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è Tor...');
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ Tor instances
            await this.initializeInstances();
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await this.createBackupConfigurations();
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º hidden service –∫–ª–∞—Å—Ç–µ—Ä—ã
            await this.initializeHiddenServiceClusters();
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
            this.startHealthMonitoring();
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π primary instance
            await this.selectPrimaryInstance();
            this.isInitialized = true;
            logger_1.logger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è Tor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            this.emit('initialized');
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è Tor:', error);
            throw error;
        }
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö Tor instances
     */
    async initializeInstances() {
        for (const instanceConfig of this.INSTANCE_CONFIGS) {
            const instance = {
                ...instanceConfig,
                status: 'unknown',
                lastHealthCheck: new Date(),
                errorCount: 0,
                uptime: 0,
            };
            this.instances.set(instance.id, instance);
            logger_1.logger.info(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Tor instance: ${instance.name}`);
        }
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Tor
     */
    async createBackupConfigurations() {
        try {
            // –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            const mainConfig = await promises_1.default.readFile('/Users/macbook/Documents/CM/crypto-mixer/security/tor/torrc', 'utf-8');
            for (const instanceConfig of this.INSTANCE_CONFIGS.slice(1)) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º primary
                const backupConfig = this.generateBackupTorrcConfig(mainConfig, instanceConfig);
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ Docker/Kubernetes —ç—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                const configPath = instanceConfig.configFile;
                logger_1.logger.info(`üìù –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${configPath}`);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ)
                // await fs.writeFile(configPath, backupConfig);
                logger_1.logger.info(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${instanceConfig.name}`);
            }
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:', error);
            throw error;
        }
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tor
     */
    generateBackupTorrcConfig(baseConfig, instance) {
        // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        let backupConfig = baseConfig
            .replace(/SocksPort 0\.0\.0\.0:9050/g, `SocksPort 0.0.0.0:${instance.socksPort}`)
            .replace(/SocksPort 0\.0\.0\.0:9051/g, `SocksPort 0.0.0.0:${instance.socksPort + 1}`)
            .replace(/SocksPort 0\.0\.0\.0:9052/g, `SocksPort 0.0.0.0:${instance.socksPort + 2}`)
            .replace(/ControlPort 0\.0\.0\.0:9053/g, `ControlPort 0.0.0.0:${instance.controlPort}`)
            .replace(/DataDirectory \/var\/lib\/tor/g, `DataDirectory ${instance.dataDirectory}`)
            .replace(/HiddenServiceDir \/var\/lib\/tor\/mixer_/g, `HiddenServiceDir ${instance.dataDirectory}/mixer_`);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è instance –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        backupConfig += `\n\n# Backup instance specific settings for ${instance.name}\n`;
        backupConfig += `Nickname ${instance.id}-mixer\n`;
        backupConfig += `# Region: ${instance.region}\n`;
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è geographic diversity
        if (instance.region === 'eu') {
            backupConfig += 'EntryNodes {eu}\n';
            backupConfig += 'ExitNodes {eu}\n';
        }
        else if (instance.region === 'us') {
            backupConfig += 'EntryNodes {us}\n';
            backupConfig += 'ExitNodes {us}\n';
        }
        else if (instance.region === 'asia') {
            backupConfig += 'EntryNodes {??}\n'; // –õ—é–±–∞—è —Å—Ç—Ä–∞–Ω–∞ –∫—Ä–æ–º–µ US/EU
            backupConfig += 'ExitNodes {??}\n';
        }
        return backupConfig;
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ hidden services
     */
    async initializeHiddenServiceClusters() {
        const serviceTypes = ['web', 'api', 'admin', 'monitoring'];
        for (const serviceType of serviceTypes) {
            const cluster = {
                serviceName: `mixer_${serviceType}`,
                primary: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                backups: [],
                currentActive: '',
                ports: serviceType === 'monitoring' ? [80] : [80, 443],
                lastFailover: null,
                failoverCount: 0,
                loadBalancing: this.config.enableLoadBalancing,
            };
            this.hiddenServiceClusters.set(serviceType, cluster);
            logger_1.logger.info(`üßÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä hidden service: ${serviceType}`);
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö instances
     */
    startHealthMonitoring() {
        this.healthCheckTimer = setInterval(async () => {
            await this.performHealthCheck();
        }, this.config.healthCheckInterval);
        logger_1.logger.info('üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è Tor instances');
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö Tor instances
     */
    async performHealthCheck() {
        try {
            logger_1.logger.debug('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö Tor instances...');
            const healthCheckPromises = [];
            for (const [instanceId, instance] of this.instances) {
                healthCheckPromises.push(this.checkInstanceHealth(instanceId, instance));
            }
            await Promise.allSettled(healthCheckPromises);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ failover
            await this.evaluateFailoverNeed();
            // –û–±–Ω–æ–≤–ª—è–µ–º hidden service –∫–ª–∞—Å—Ç–µ—Ä—ã
            await this.updateHiddenServiceClusters();
            this.emit('healthCheckCompleted', this.getStats());
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è instances:', error);
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ instance
     */
    async checkInstanceHealth(instanceId, instance) {
        const startTime = Date.now();
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SOCKS –ø–æ—Ä—Ç–∞
            await this.checkPort(instance.socksPort);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å control –ø–æ—Ä—Ç–∞
            await this.checkPort(instance.controlPort);
            // –ï—Å–ª–∏ –≤—Å—ë –û–ö, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            instance.status = 'active';
            instance.lastHealthCheck = new Date();
            instance.errorCount = Math.max(0, instance.errorCount - 1); // –°–Ω–∏–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            const responseTime = Date.now() - startTime;
            logger_1.logger.debug(`‚úÖ Instance ${instanceId} –∑–¥–æ—Ä–æ–≤ (${responseTime}ms)`);
        }
        catch (error) {
            instance.status = 'failed';
            instance.errorCount++;
            instance.lastHealthCheck = new Date();
            logger_1.logger.warn(`‚ö†Ô∏è Instance ${instanceId} –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω:`, error.message);
            // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–π
            if (instance.errorCount >= this.config.maxFailureThreshold) {
                instance.status = 'failed';
                this.emit('instanceFailed', { instanceId, instance });
            }
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
     */
    async checkPort(port) {
        return new Promise((resolve, reject) => {
            const socket = new net_1.default.Socket();
            const timeout = setTimeout(() => {
                socket.destroy();
                reject(new Error(`Port ${port} timeout`));
            }, 5000);
            socket.connect(port, '127.0.0.1', () => {
                clearTimeout(timeout);
                socket.destroy();
                resolve();
            });
            socket.on('error', (error) => {
                clearTimeout(timeout);
                reject(error);
            });
        });
    }
    /**
     * –û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ failover
     */
    async evaluateFailoverNeed() {
        const activeInstances = Array.from(this.instances.values())
            .filter(instance => instance.status === 'active');
        const failedInstances = Array.from(this.instances.values())
            .filter(instance => instance.status === 'failed');
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö instances –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
        if (activeInstances.length < this.config.minActiveInstances) {
            logger_1.logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö instances: ${activeInstances.length}/${this.config.minActiveInstances}`);
            await this.performEmergencyFailover();
        }
        // –ï—Å–ª–∏ primary instance —É–ø–∞–ª
        if (this.currentPrimaryInstance) {
            const primaryInstance = this.instances.get(this.currentPrimaryInstance);
            if (primaryInstance && primaryInstance.status === 'failed') {
                logger_1.logger.warn(`üö® Primary instance ${this.currentPrimaryInstance} —É–ø–∞–ª`);
                await this.failoverPrimaryInstance();
            }
        }
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (failedInstances.length > 0) {
            this.emit('instancesDown', {
                failed: failedInstances.map(i => i.id),
                active: activeInstances.map(i => i.id),
            });
        }
    }
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ primary instance
     */
    async failoverPrimaryInstance() {
        try {
            logger_1.logger.info('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º primary instance...');
            // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã
            const candidates = Array.from(this.instances.values())
                .filter(instance => instance.status === 'active')
                .sort((a, b) => a.priority - b.priority);
            if (candidates.length === 0) {
                throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö instances –¥–ª—è failover');
            }
            const newPrimary = candidates[0];
            const oldPrimary = this.currentPrimaryInstance;
            this.currentPrimaryInstance = newPrimary.id;
            logger_1.logger.info(`‚úÖ Primary instance –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å ${oldPrimary} –Ω–∞ ${newPrimary.id}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º ConnectionFailoverManager
            this.emit('primaryInstanceChanged', {
                oldPrimary,
                newPrimary: newPrimary.id,
                newSocksPort: newPrimary.socksPort,
            });
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è primary instance:', error);
            throw error;
        }
    }
    /**
     * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö
     */
    async performEmergencyFailover() {
        try {
            logger_1.logger.warn('üö® –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ...');
            // –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å standby instances
            const standbyInstances = Array.from(this.instances.values())
                .filter(instance => instance.status === 'standby');
            for (const instance of standbyInstances) {
                try {
                    await this.activateInstance(instance.id);
                }
                catch (error) {
                    logger_1.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${instance.id}:`, error.message);
                }
            }
            // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö instances
            const activeCount = Array.from(this.instances.values())
                .filter(instance => instance.status === 'active').length;
            if (activeCount < this.config.minActiveInstances) {
                // –ö—Ä–∞–π–Ω—è—è –º–µ—Ä–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ direct —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                logger_1.logger.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π Tor –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ direct');
                this.emit('criticalFailure', {
                    activeInstances: activeCount,
                    requiredMinimum: this.config.minActiveInstances,
                });
            }
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', error);
        }
    }
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è instance
     */
    async activateInstance(instanceId) {
        const instance = this.instances.get(instanceId);
        if (!instance) {
            throw new Error(`Instance ${instanceId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        logger_1.logger.info(`üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º instance ${instanceId}...`);
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ Tor –ø—Ä–æ—Ü–µ—Å—Å–∞
            // await this.startTorProcess(instance);
            instance.status = 'active';
            instance.errorCount = 0;
            logger_1.logger.info(`‚úÖ Instance ${instanceId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        }
        catch (error) {
            instance.status = 'failed';
            logger_1.logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${instanceId}:`, error);
            throw error;
        }
    }
    /**
     * –í—ã–±–æ—Ä primary instance
     */
    async selectPrimaryInstance() {
        const activeInstances = Array.from(this.instances.values())
            .filter(instance => instance.status === 'active')
            .sort((a, b) => a.priority - b.priority);
        if (activeInstances.length > 0) {
            this.currentPrimaryInstance = activeInstances[0].id;
            logger_1.logger.info(`‚úÖ Primary instance: ${this.currentPrimaryInstance}`);
        }
        else {
            logger_1.logger.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö instances –¥–ª—è –≤—ã–±–æ—Ä–∞ primary');
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ hidden services
     */
    async updateHiddenServiceClusters() {
        for (const [serviceType, cluster] of this.hiddenServiceClusters) {
            try {
                // –ß–∏—Ç–∞–µ–º onion –∞–¥—Ä–µ—Å–∞ –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö instances
                const activeInstances = Array.from(this.instances.values())
                    .filter(instance => instance.status === 'active');
                const onionAddresses = [];
                for (const instance of activeInstances) {
                    try {
                        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ —á–∏—Ç–∞–µ–º hostname —Ñ–∞–π–ª—ã
                        const hostnameFile = `${instance.dataDirectory}/mixer_${serviceType}/hostname`;
                        // const onionAddress = await fs.readFile(hostnameFile, 'utf-8');
                        // onionAddresses.push(onionAddress.trim());
                        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                        onionAddresses.push(`${instance.id}${serviceType}1234567890abcdef.onion`);
                    }
                    catch (error) {
                        // –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –µ—Å–ª–∏ service –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤
                    }
                }
                if (onionAddresses.length > 0) {
                    cluster.primary = onionAddresses[0];
                    cluster.backups = onionAddresses.slice(1);
                    cluster.currentActive = cluster.primary;
                }
            }
            catch (error) {
                logger_1.logger.warn(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ ${serviceType}:`, error.message);
            }
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ onion –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
     */
    getBestOnionAddress(serviceType) {
        const cluster = this.hiddenServiceClusters.get(serviceType);
        if (!cluster) {
            return null;
        }
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω load balancing, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–¥—Ä–µ—Å
        if (cluster.loadBalancing && cluster.backups.length > 0) {
            const allAddresses = [cluster.primary, ...cluster.backups];
            const randomIndex = Math.floor(Math.random() * allAddresses.length);
            return allAddresses[randomIndex];
        }
        return cluster.currentActive || cluster.primary;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    getStats() {
        const instances = Array.from(this.instances.values());
        const clusters = Array.from(this.hiddenServiceClusters.entries());
        return {
            isEnabled: this.config.enableMultipleInstances,
            isInitialized: this.isInitialized,
            currentPrimaryInstance: this.currentPrimaryInstance,
            instances: {
                total: instances.length,
                active: instances.filter(i => i.status === 'active').length,
                standby: instances.filter(i => i.status === 'standby').length,
                failed: instances.filter(i => i.status === 'failed').length,
                details: instances.map(instance => ({
                    id: instance.id,
                    name: instance.name,
                    status: instance.status,
                    region: instance.region,
                    socksPort: instance.socksPort,
                    errorCount: instance.errorCount,
                    lastHealthCheck: instance.lastHealthCheck,
                })),
            },
            hiddenServiceClusters: clusters.map(([type, cluster]) => ({
                serviceType: type,
                primary: cluster.primary,
                backupsCount: cluster.backups.length,
                currentActive: cluster.currentActive,
                failoverCount: cluster.failoverCount,
                lastFailover: cluster.lastFailover,
                loadBalancing: cluster.loadBalancing,
            })),
            config: this.config,
        };
    }
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π instance
     */
    async forceSwitchToInstance(instanceId) {
        const instance = this.instances.get(instanceId);
        if (!instance) {
            throw new Error(`Instance ${instanceId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        if (instance.status !== 'active') {
            throw new Error(`Instance ${instanceId} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`);
        }
        const oldPrimary = this.currentPrimaryInstance;
        this.currentPrimaryInstance = instanceId;
        logger_1.logger.info(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ instance ${instanceId}`);
        this.emit('manualInstanceSwitch', {
            oldPrimary,
            newPrimary: instanceId,
        });
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async shutdown() {
        if (this.healthCheckTimer) {
            clearInterval(this.healthCheckTimer);
            this.healthCheckTimer = null;
        }
        logger_1.logger.info('üõë TorRedundancyManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        this.emit('shutdown');
    }
}
exports.TorRedundancyManager = TorRedundancyManager;
// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
exports.torRedundancyManager = new TorRedundancyManager();
//# sourceMappingURL=TorRedundancyManager.js.map