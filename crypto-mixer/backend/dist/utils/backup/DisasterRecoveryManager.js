"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisasterRecoveryManager = void 0;
const DatabaseManager_1 = require("../../database/DatabaseManager");
const logger_1 = require("../logger");
/**
 * Enterprise Disaster Recovery Manager
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
 */
class DisasterRecoveryManager {
    constructor(config, backupManager) {
        this.isMonitoring = false;
        this.monitoringInterval = null;
        this.activeRecoveries = new Map();
        this.disasterHistory = new Map();
        this.recoveryPlans = new Map();
        this.lastHealthCheck = null;
        this.consecutiveFailures = 0;
        this.lastRecoveryTime = null;
        this.config = config;
        this.backupManager = backupManager;
        this.loadRecoveryPlans();
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Disaster Recovery —Å–∏—Å—Ç–µ–º—ã
     */
    async initialize() {
        const operationId = await logger_1.enhancedDbLogger.startOperation('disaster_recovery_init');
        try {
            logger_1.enhancedDbLogger.info('üö® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Disaster Recovery Manager');
            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            await this.loadRecoveryPlans();
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            this.validateConfiguration();
            // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            this.lastHealthCheck = await this.performHealthCheck();
            // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if (this.config.enabled) {
                this.startMonitoring();
            }
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.info('‚úÖ Disaster Recovery Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
                monitoring: this.isMonitoring,
                plans: this.recoveryPlans.size,
                autoRecovery: this.config.autoRecovery.enabled
            });
        }
        catch (error) {
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw error;
        }
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     */
    async performHealthCheck() {
        const operationId = await logger_1.enhancedDbLogger.startOperation('health_check');
        try {
            const startTime = Date.now();
            const health = {
                overall: 'healthy',
                components: {
                    database: await this.checkDatabaseHealth(),
                    application: await this.checkApplicationHealth(),
                    blockchain: await this.checkBlockchainHealth(),
                    backup: await this.checkBackupHealth(),
                    monitoring: await this.checkMonitoringHealth()
                },
                metrics: {
                    uptime: process.uptime(),
                    responseTime: 0,
                    errorRate: 0,
                    throughput: 0,
                    memoryUsage: process.memoryUsage().heapUsed / process.memoryUsage().heapTotal * 100,
                    diskUsage: 0,
                    cpuUsage: 0
                },
                lastChecked: new Date(),
                alerts: []
            };
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            const componentStatuses = Object.values(health.components).map(c => c.status);
            if (componentStatuses.includes('down')) {
                health.overall = 'down';
            }
            else if (componentStatuses.includes('critical')) {
                health.overall = 'critical';
            }
            else if (componentStatuses.includes('degraded')) {
                health.overall = 'degraded';
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            const thresholds = this.config.autoRecovery.thresholds;
            health.metrics.responseTime = Date.now() - startTime;
            if (health.metrics.responseTime > thresholds.responseTimeMs) {
                health.alerts.push(`–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${health.metrics.responseTime}ms`);
            }
            if (health.metrics.memoryUsage > thresholds.memoryUsagePercent) {
                health.alerts.push(`–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${health.metrics.memoryUsage.toFixed(1)}%`);
            }
            this.lastHealthCheck = health;
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            return health;
        }
        catch (error) {
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            return {
                overall: 'down',
                components: {
                    database: { status: 'down', lastChecked: new Date(), errorCount: 1, details: 'Health check failed' },
                    application: { status: 'down', lastChecked: new Date(), errorCount: 1, details: 'Health check failed' },
                    blockchain: { status: 'down', lastChecked: new Date(), errorCount: 1, details: 'Health check failed' },
                    backup: { status: 'down', lastChecked: new Date(), errorCount: 1, details: 'Health check failed' },
                    monitoring: { status: 'down', lastChecked: new Date(), errorCount: 1, details: 'Health check failed' }
                },
                metrics: {
                    uptime: 0, responseTime: 0, errorRate: 100, throughput: 0,
                    memoryUsage: 0, diskUsage: 0, cpuUsage: 0
                },
                lastChecked: new Date(),
                alerts: ['System health check failed']
            };
        }
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
     */
    async detectAndHandleDisaster(health) {
        const disasters = this.identifyDisasters(health);
        for (const disaster of disasters) {
            logger_1.enhancedDbLogger.error('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ö–ê–¢–ê–°–¢–†–û–§–ê', {
                type: disaster.type,
                severity: disaster.severity,
                components: disaster.affectedComponents
            });
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            this.disasterHistory.set(disaster.id, disaster);
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (this.config.autoRecovery.enabled && this.shouldTriggerAutoRecovery(disaster)) {
                await this.triggerAutoRecovery(disaster);
            }
            else {
                // –¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await this.sendDisasterAlert(disaster);
            }
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async triggerAutoRecovery(disaster) {
        const operationId = await logger_1.enhancedDbLogger.startOperation('auto_recovery');
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –ø–µ—Ä–∏–æ–¥–∞
            if (this.lastRecoveryTime) {
                const cooldownMs = this.config.autoRecovery.cooldownPeriod * 60 * 1000;
                const timeSinceLastRecovery = Date.now() - this.lastRecoveryTime.getTime();
                if (timeSinceLastRecovery < cooldownMs) {
                    logger_1.enhancedDbLogger.warn('‚è∏Ô∏è –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - cooldown –ø–µ—Ä–∏–æ–¥', {
                        cooldownRemaining: Math.ceil((cooldownMs - timeSinceLastRecovery) / 60000)
                    });
                    return;
                }
            }
            // –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            const plan = this.selectRecoveryPlan(disaster);
            if (!plan) {
                logger_1.enhancedDbLogger.error('‚ùå –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                    disaster: disaster.type,
                    components: disaster.affectedComponents
                });
                return;
            }
            logger_1.enhancedDbLogger.info('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', {
                plan: plan.name,
                estimatedRTO: plan.estimatedRTO,
                estimatedRPO: plan.estimatedRPO
            });
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            const execution = await this.executeRecoveryPlan(plan, disaster);
            this.lastRecoveryTime = new Date();
            if (execution.status === 'completed') {
                logger_1.enhancedDbLogger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', {
                    duration: execution.totalDuration,
                    achievedRTO: execution.achievedRTO
                });
            }
            else {
                logger_1.enhancedDbLogger.error('‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ', {
                    status: execution.status,
                    errors: execution.errors
                });
            }
            await logger_1.enhancedDbLogger.endOperation(operationId, execution.status === 'completed');
        }
        catch (error) {
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw error;
        }
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async executeRecoveryPlan(plan, disaster) {
        const executionId = `recovery_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const execution = {
            id: executionId,
            disasterEventId: disaster.id,
            planId: plan.id,
            startTime: new Date(),
            status: 'initiated',
            completedSteps: [],
            failedSteps: [],
            stepResults: new Map(),
            errors: [],
            warnings: [],
            validationResults: new Map()
        };
        this.activeRecoveries.set(executionId, execution);
        try {
            execution.status = 'in_progress';
            logger_1.enhancedDbLogger.info('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', {
                plan: plan.name,
                steps: plan.steps.length,
                validations: plan.validationSteps.length
            });
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            for (const step of plan.steps) {
                execution.currentStep = step.id;
                try {
                    await this.executeRecoveryStep(step, execution);
                    execution.completedSteps.push(step.id);
                    logger_1.enhancedDbLogger.info(`‚úÖ –®–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω: ${step.name}`);
                }
                catch (error) {
                    execution.failedSteps.push(step.id);
                    execution.errors.push(`Step ${step.id}: ${error}`);
                    logger_1.enhancedDbLogger.error(`‚ùå –®–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω: ${step.name}`, { error });
                    if (!step.continueOnFailure) {
                        if (step.rollbackOnFailure && plan.rollbackSteps) {
                            await this.executeRollback(plan.rollbackSteps, execution);
                            execution.status = 'rolled_back';
                        }
                        else {
                            execution.status = 'failed';
                        }
                        break;
                    }
                }
            }
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if (execution.status === 'in_progress') {
                const validationSuccess = await this.validateRecovery(plan.validationSteps, execution);
                execution.status = validationSuccess ? 'completed' : 'failed';
            }
            // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            execution.endTime = new Date();
            execution.totalDuration = Math.floor((execution.endTime.getTime() - execution.startTime.getTime()) / 1000);
            execution.achievedRTO = execution.totalDuration / 60; // –º–∏–Ω—É—Ç—ã
            logger_1.enhancedDbLogger.info('üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
                status: execution.status,
                duration: execution.totalDuration,
                completedSteps: execution.completedSteps.length,
                failedSteps: execution.failedSteps.length
            });
            return execution;
        }
        catch (error) {
            execution.status = 'failed';
            execution.errors.push(String(error));
            await logger_1.enhancedDbLogger.logError(error);
            return execution;
        }
        finally {
            this.activeRecoveries.delete(executionId);
        }
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async executeRecoveryStep(step, execution) {
        logger_1.enhancedDbLogger.info(`‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: ${step.name}`, {
            type: step.type,
            timeout: step.timeout
        });
        const startTime = Date.now();
        let retryCount = 0;
        while (retryCount <= step.retryCount) {
            try {
                switch (step.type) {
                    case 'database_restore':
                        await this.executeDatabaseRestore(step, execution);
                        break;
                    case 'service_restart':
                        await this.executeServiceRestart(step, execution);
                        break;
                    case 'configuration':
                        await this.executeConfiguration(step, execution);
                        break;
                    case 'command':
                        await this.executeCommand(step, execution);
                        break;
                    case 'api_call':
                        await this.executeApiCall(step, execution);
                        break;
                    case 'custom':
                        if (step.customFunction) {
                            await step.customFunction();
                        }
                        break;
                    default:
                        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞: ${step.type}`);
                }
                // –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                const duration = Date.now() - startTime;
                execution.stepResults.set(step.id, { success: true, duration, attempts: retryCount + 1 });
                return;
            }
            catch (error) {
                retryCount++;
                if (retryCount > step.retryCount) {
                    const duration = Date.now() - startTime;
                    execution.stepResults.set(step.id, {
                        success: false,
                        duration,
                        attempts: retryCount,
                        error: String(error)
                    });
                    throw error;
                }
                logger_1.enhancedDbLogger.warn(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä —à–∞–≥–∞ ${step.name} (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})`, { error });
                await this.delay(1000 * retryCount); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            }
        }
    }
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async validateRecovery(validationSteps, execution) {
        logger_1.enhancedDbLogger.info('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', {
            steps: validationSteps.length
        });
        let allValid = true;
        for (const step of validationSteps) {
            try {
                const isValid = await this.executeValidationStep(step);
                execution.validationResults.set(step.id, isValid);
                if (!isValid) {
                    allValid = false;
                    logger_1.enhancedDbLogger.error(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${step.name}`);
                }
                else {
                    logger_1.enhancedDbLogger.info(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞: ${step.name}`);
                }
            }
            catch (error) {
                execution.validationResults.set(step.id, false);
                execution.errors.push(`Validation ${step.id}: ${error}`);
                allValid = false;
                logger_1.enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${step.name}`, { error });
            }
        }
        return allValid;
    }
    /**
     * –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
     */
    async executeRollback(rollbackSteps, execution) {
        logger_1.enhancedDbLogger.warn('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π', {
            steps: rollbackSteps.length
        });
        for (const step of rollbackSteps.reverse()) {
            try {
                await this.executeRecoveryStep(step, execution);
                logger_1.enhancedDbLogger.info(`‚úÖ –û—Ç–∫–∞—Ç —à–∞–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${step.name}`);
            }
            catch (error) {
                logger_1.enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —à–∞–≥–∞: ${step.name}`, { error });
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–∫–∞—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            }
        }
    }
    /**
     * –ú–∞–Ω—É–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    async manualRecovery(planId, options = {}) {
        const operationId = await logger_1.enhancedDbLogger.startOperation('manual_recovery');
        try {
            const plan = this.recoveryPlans.get(planId);
            if (!plan) {
                throw new Error(`–ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ${planId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã –¥–ª—è –º–∞–Ω—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            const disaster = {
                id: `manual_${Date.now()}`,
                timestamp: new Date(),
                type: 'manual',
                severity: 'warning',
                description: '–ú–∞–Ω—É–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
                affectedComponents: [],
                detectedBy: 'manual_trigger',
                symptoms: ['Manual recovery requested'],
                metadata: {
                    errorLogs: [],
                    systemMetrics: {},
                    userImpact: 'Unknown',
                    businessImpact: 'Planned maintenance'
                }
            };
            logger_1.enhancedDbLogger.info('üõ†Ô∏è –ú–∞–Ω—É–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', {
                plan: plan.name,
                dryRun: options.dryRun
            });
            const execution = await this.executeRecoveryPlan(plan, disaster);
            await logger_1.enhancedDbLogger.endOperation(operationId, execution.status === 'completed');
            return execution;
        }
        catch (error) {
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    getSystemStatus() {
        return {
            health: this.lastHealthCheck,
            activeRecoveries: Array.from(this.activeRecoveries.values()),
            recentDisasters: Array.from(this.disasterHistory.values())
                .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
                .slice(0, 10),
            isMonitoring: this.isMonitoring
        };
    }
    // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========
    loadRecoveryPlans() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        const defaultPlans = [
            {
                id: 'database_failure_recovery',
                name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                priority: 1,
                triggerConditions: ['database_failure'],
                dependencies: [],
                estimatedRTO: 15,
                estimatedRPO: 5,
                steps: [
                    {
                        id: 'stop_services',
                        name: '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤',
                        type: 'command',
                        command: 'systemctl stop mixer-api',
                        timeout: 30,
                        retryCount: 2,
                        continueOnFailure: false,
                        rollbackOnFailure: false,
                        description: '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–∏—Å–æ–≤'
                    },
                    {
                        id: 'restore_database',
                        name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ backup',
                        type: 'database_restore',
                        timeout: 600,
                        retryCount: 1,
                        continueOnFailure: false,
                        rollbackOnFailure: true,
                        description: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ backup'
                    },
                    {
                        id: 'start_services',
                        name: '–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤',
                        type: 'command',
                        command: 'systemctl start mixer-api',
                        timeout: 60,
                        retryCount: 3,
                        continueOnFailure: false,
                        rollbackOnFailure: false,
                        description: '–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–∏—Å–æ–≤'
                    }
                ],
                validationSteps: [
                    {
                        id: 'db_connectivity',
                        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î',
                        type: 'database_query',
                        query: 'SELECT 1',
                        timeout: 10,
                        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
                    },
                    {
                        id: 'api_health',
                        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–¥–æ—Ä–æ–≤—å—è',
                        type: 'health_check',
                        endpoint: '/health',
                        timeout: 15,
                        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API'
                    }
                ]
            },
            {
                id: 'application_crash_recovery',
                name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫—Ä–∞—Ö–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                priority: 2,
                triggerConditions: ['application_crash'],
                dependencies: [],
                estimatedRTO: 5,
                estimatedRPO: 1,
                steps: [
                    {
                        id: 'restart_application',
                        name: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                        type: 'service_restart',
                        timeout: 120,
                        retryCount: 3,
                        continueOnFailure: false,
                        rollbackOnFailure: false,
                        description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
                    }
                ],
                validationSteps: [
                    {
                        id: 'service_status',
                        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤',
                        type: 'health_check',
                        endpoint: '/health',
                        timeout: 30,
                        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'
                    }
                ]
            }
        ];
        for (const plan of defaultPlans) {
            this.recoveryPlans.set(plan.id, plan);
        }
        logger_1.enhancedDbLogger.info('üìã –ü–ª–∞–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
            count: this.recoveryPlans.size
        });
    }
    validateConfiguration() {
        if (!this.config.enabled) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è Disaster Recovery –æ—Ç–∫–ª—é—á–µ–Ω');
            return;
        }
        if (this.config.autoRecovery.enabled && this.recoveryPlans.size === 0) {
            throw new Error('–ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–æ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }
    startMonitoring() {
        if (this.isMonitoring)
            return;
        this.isMonitoring = true;
        this.monitoringInterval = setInterval(async () => {
            try {
                const health = await this.performHealthCheck();
                await this.detectAndHandleDisaster(health);
            }
            catch (error) {
                logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã', { error });
            }
        }, this.config.monitoring.healthCheckInterval * 1000);
        logger_1.enhancedDbLogger.info('üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Disaster Recovery –∑–∞–ø—É—â–µ–Ω', {
            interval: this.config.monitoring.healthCheckInterval
        });
    }
    async checkDatabaseHealth() {
        try {
            const dbManager = DatabaseManager_1.DatabaseManager.getInstance();
            const startTime = Date.now();
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await dbManager.getConnection().authenticate();
            return {
                status: 'healthy',
                lastChecked: new Date(),
                responseTime: Date.now() - startTime,
                errorCount: 0,
                details: 'Database connection successful'
            };
        }
        catch (error) {
            return {
                status: 'down',
                lastChecked: new Date(),
                errorCount: 1,
                details: `Database error: ${error}`
            };
        }
    }
    async checkApplicationHealth() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            const memoryUsage = process.memoryUsage();
            const uptime = process.uptime();
            if (uptime < 60) {
                return {
                    status: 'degraded',
                    lastChecked: new Date(),
                    errorCount: 0,
                    details: 'Application recently restarted'
                };
            }
            return {
                status: 'healthy',
                lastChecked: new Date(),
                errorCount: 0,
                details: `Uptime: ${Math.floor(uptime)}s, Memory: ${Math.floor(memoryUsage.heapUsed / 1024 / 1024)}MB`
            };
        }
        catch (error) {
            return {
                status: 'critical',
                lastChecked: new Date(),
                errorCount: 1,
                details: `Application error: ${error}`
            };
        }
    }
    async checkBlockchainHealth() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–ª–æ–∫—á–µ–π–Ω –Ω–æ–¥–∞–º
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ BlockchainManager
            return {
                status: 'healthy',
                lastChecked: new Date(),
                errorCount: 0,
                details: 'Blockchain connections operational'
            };
        }
        catch (error) {
            return {
                status: 'degraded',
                lastChecked: new Date(),
                errorCount: 1,
                details: `Blockchain error: ${error}`
            };
        }
    }
    async checkBackupHealth() {
        try {
            const backupStatus = this.backupManager.getCurrentStatus();
            if (backupStatus.isRunning) {
                return {
                    status: 'healthy',
                    lastChecked: new Date(),
                    errorCount: 0,
                    details: 'Backup in progress'
                };
            }
            return {
                status: 'healthy',
                lastChecked: new Date(),
                errorCount: 0,
                details: 'Backup system operational'
            };
        }
        catch (error) {
            return {
                status: 'critical',
                lastChecked: new Date(),
                errorCount: 1,
                details: `Backup error: ${error}`
            };
        }
    }
    async checkMonitoringHealth() {
        return {
            status: 'healthy',
            lastChecked: new Date(),
            errorCount: 0,
            details: 'Monitoring system operational'
        };
    }
    identifyDisasters(health) {
        const disasters = [];
        // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if (health.components.database.status === 'down') {
            disasters.push({
                id: `db_failure_${Date.now()}`,
                timestamp: new Date(),
                type: 'database_failure',
                severity: 'critical',
                description: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                affectedComponents: ['database'],
                detectedBy: 'health_monitor',
                symptoms: [health.components.database.details],
                metadata: {
                    errorLogs: [],
                    systemMetrics: health.metrics,
                    userImpact: '–ü–æ–ª–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞',
                    businessImpact: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å'
                }
            });
        }
        if (health.overall === 'down') {
            disasters.push({
                id: `service_unavailable_${Date.now()}`,
                timestamp: new Date(),
                type: 'service_unavailable',
                severity: 'emergency',
                description: '–°–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                affectedComponents: Object.keys(health.components),
                detectedBy: 'health_monitor',
                symptoms: health.alerts,
                metadata: {
                    errorLogs: [],
                    systemMetrics: health.metrics,
                    userImpact: '–ü–æ–ª–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
                    businessImpact: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ'
                }
            });
        }
        return disasters;
    }
    shouldTriggerAutoRecovery(disaster) {
        const triggers = this.config.autoRecovery.triggers;
        switch (disaster.type) {
            case 'database_failure':
                return triggers.databaseFailure;
            case 'application_crash':
                return triggers.applicationCrash;
            case 'data_corruption':
                return triggers.dataCorruption;
            case 'service_unavailable':
                return triggers.serviceUnavailable;
            case 'manual':
                return triggers.manualTrigger;
            default:
                return false;
        }
    }
    selectRecoveryPlan(disaster) {
        // –ü–æ–∏—Å–∫ –ø–ª–∞–Ω–∞ –ø–æ —Ç–∏–ø—É –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
        for (const plan of this.recoveryPlans.values()) {
            if (plan.triggerConditions.includes(disaster.type)) {
                return plan;
            }
        }
        return null;
    }
    async executeDatabaseRestore(step, execution) {
        logger_1.enhancedDbLogger.info('üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ backup');
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ backup
        const backups = this.backupManager.getBackupHistory();
        const latestBackup = backups.find(b => b.status === 'completed' && b.components.includes('database_data_critical'));
        if (!latestBackup) {
            throw new Error('–ü–æ–¥—Ö–æ–¥—è—â–∏–π backup –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup
        const restoreOptions = {
            backupId: latestBackup.id,
            components: ['database_structure', 'database_data_critical'],
            verifyIntegrity: true,
            dryRun: false,
            continueOnError: false
        };
        await this.backupManager.restore(restoreOptions);
    }
    async executeServiceRestart(step, execution) {
        logger_1.enhancedDbLogger.info('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–ª–∏ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
        // –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        await this.delay(5000);
    }
    async executeConfiguration(step, execution) {
        logger_1.enhancedDbLogger.info('‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (step.parameters) {
            logger_1.enhancedDbLogger.info('üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞', { parameters: step.parameters });
        }
    }
    async executeCommand(step, execution) {
        if (!step.command) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
        }
        logger_1.enhancedDbLogger.info('‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', { command: step.command });
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã spawn –ø—Ä–æ—Ü–µ—Å—Å
        await this.delay(2000);
    }
    async executeApiCall(step, execution) {
        logger_1.enhancedDbLogger.info('üåê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–∞', { parameters: step.parameters });
        // HTTP –∑–∞–ø—Ä–æ—Å –∫ API
        await this.delay(1000);
    }
    async executeValidationStep(step) {
        switch (step.type) {
            case 'health_check':
                // HTTP –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
                return true;
            case 'database_query':
                // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
                if (step.query) {
                    try {
                        const dbManager = DatabaseManager_1.DatabaseManager.getInstance();
                        await dbManager.query(step.query);
                        return true;
                    }
                    catch {
                        return false;
                    }
                }
                return false;
            case 'api_test':
                // –¢–µ—Å—Ç API endpoint
                return true;
            case 'performance_test':
                // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                return true;
            case 'data_integrity':
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                return true;
            default:
                if (step.customValidator) {
                    return await step.customValidator();
                }
                return false;
        }
    }
    async sendDisasterAlert(disaster) {
        logger_1.enhancedDbLogger.error('üö® –û–¢–ü–†–ê–í–ö–ê –ê–õ–ï–†–¢–ê –û –ö–ê–¢–ê–°–¢–†–û–§–ï', {
            type: disaster.type,
            severity: disaster.severity,
            description: disaster.description
        });
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack, email, SMS
    }
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Disaster Recovery —Å–∏—Å—Ç–µ–º—ã
     */
    async shutdown() {
        logger_1.enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Disaster Recovery Manager');
        this.isMonitoring = false;
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
        }
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
        const activeRecoveries = Array.from(this.activeRecoveries.values());
        if (activeRecoveries.length > 0) {
            logger_1.enhancedDbLogger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π', {
                count: activeRecoveries.length
            });
            // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            const timeout = 5 * 60 * 1000;
            const startTime = Date.now();
            while (this.activeRecoveries.size > 0 && (Date.now() - startTime) < timeout) {
                await this.delay(1000);
            }
        }
        logger_1.enhancedDbLogger.info('‚úÖ Disaster Recovery Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}
exports.DisasterRecoveryManager = DisasterRecoveryManager;
//# sourceMappingURL=DisasterRecoveryManager.js.map