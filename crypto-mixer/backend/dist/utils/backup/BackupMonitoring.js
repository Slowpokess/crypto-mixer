"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupMonitoring = void 0;
const events_1 = require("events");
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
/**
 * Enterprise-grade Backup Monitoring System
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ backup –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥
 */
class BackupMonitoring extends events_1.EventEmitter {
    constructor(config, backupManager, drManager) {
        super();
        this.isMonitoring = false;
        this.monitoringInterval = null;
        this.alerts = new Map();
        this.metrics = new Map();
        this.alertHistory = [];
        this.metricsHistory = [];
        this.lastAlertTimes = new Map();
        this.escalationTimers = new Map();
        this.alertCounters = new Map();
        this.config = config;
        this.backupManager = backupManager;
        this.drManager = drManager;
        this.validateConfiguration();
        this.setupEventListeners();
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async initialize() {
        const operationId = await logger_1.enhancedDbLogger.startOperation('backup_monitoring_init');
        try {
            logger_1.enhancedDbLogger.info('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Backup Monitoring System');
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadHistoricalData();
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            await this.ensureDirectories();
            // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if (this.config.enabled) {
                this.startMonitoring();
            }
            // –ó–∞–ø—É—Å–∫ dashboard –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if (this.config.dashboard.enabled) {
                await this.startDashboard();
            }
            await logger_1.enhancedDbLogger.endOperation(operationId, true);
            logger_1.enhancedDbLogger.info('‚úÖ Backup Monitoring System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
                monitoring: this.isMonitoring,
                alertChannels: this.config.alerts.channels.length,
                dashboard: this.config.dashboard.enabled
            });
        }
        catch (error) {
            await logger_1.enhancedDbLogger.endOperation(operationId, false);
            await logger_1.enhancedDbLogger.logError(error);
            throw error;
        }
    }
    /**
     * –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    startMonitoring() {
        if (this.isMonitoring)
            return;
        this.isMonitoring = true;
        this.monitoringInterval = setInterval(async () => {
            try {
                await this.performMonitoringCycle();
            }
            catch (error) {
                logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', { error });
                await this.createAlert({
                    severity: 'error',
                    category: 'health',
                    title: '–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ backup',
                    description: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error}`,
                    source: 'backup_monitoring',
                    tags: ['monitoring', 'error']
                });
            }
        }, this.config.thresholds.healthCheckInterval * 1000);
        logger_1.enhancedDbLogger.info('üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ backup –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω', {
            interval: this.config.thresholds.healthCheckInterval
        });
    }
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async performMonitoringCycle() {
        const startTime = Date.now();
        // –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        const metrics = await this.collectMetrics();
        this.storeMetrics(metrics);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        await this.checkThresholds(metrics);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è backup
        await this.checkBackupHealth();
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ storage
        await this.checkStorageHealth();
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ dashboard
        if (this.config.dashboard.enabled) {
            await this.updateDashboard();
        }
        // –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
        if (this.config.metrics.exportEnabled) {
            await this.exportMetrics();
        }
        // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        await this.cleanupHistoricalData();
        const duration = Date.now() - startTime;
        logger_1.enhancedDbLogger.debug('üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', {
            duration: `${duration}ms`,
            alerts: this.alerts.size,
            metrics: this.metrics.size
        });
    }
    /**
     * –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async collectMetrics() {
        const backupHistory = this.backupManager.getBackupHistory();
        const systemHealth = await this.drManager.performHealthCheck();
        const currentStatus = this.backupManager.getCurrentStatus();
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ backup –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        const last24h = new Date(Date.now() - 24 * 60 * 60 * 1000);
        const recentBackups = backupHistory.filter(b => b.timestamp >= last24h);
        const totalBackups = recentBackups.length;
        const successfulBackups = recentBackups.filter(b => b.status === 'completed').length;
        const failedBackups = recentBackups.filter(b => b.status === 'failed').length;
        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const avgDuration = recentBackups.length > 0
            ? recentBackups.reduce((sum, b) => sum + b.duration, 0) / recentBackups.length
            : 0;
        const totalSize = recentBackups.reduce((sum, b) => sum + b.size, 0);
        const avgThroughput = avgDuration > 0 ? (totalSize / (1024 * 1024)) / avgDuration : 0;
        // Storage –º–µ—Ç—Ä–∏–∫–∏
        const storageStats = await this.getStorageStats();
        const metrics = {
            timestamp: new Date(),
            period: 'realtime',
            backup: {
                totalBackups,
                successfulBackups,
                failedBackups,
                successRate: totalBackups > 0 ? (successfulBackups / totalBackups) * 100 : 100,
                averageDuration: avgDuration,
                totalSize,
                compressionRatio: this.calculateCompressionRatio(recentBackups),
                componentsBackedUp: this.countUniqueComponents(recentBackups)
            },
            performance: {
                averageThroughput: avgThroughput,
                peakThroughput: this.calculatePeakThroughput(recentBackups),
                cpuUsagePercent: this.getCpuUsage(),
                memoryUsageMB: process.memoryUsage().heapUsed / (1024 * 1024),
                diskIoWaitPercent: 0 // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä IO –º–µ—Ç—Ä–∏–∫
            },
            storage: {
                totalUsedSpace: storageStats.used,
                availableSpace: storageStats.available,
                usagePercent: storageStats.usagePercent,
                oldestBackup: backupHistory.length > 0
                    ? new Date(Math.min(...backupHistory.map(b => b.timestamp.getTime())))
                    : new Date(),
                newestBackup: backupHistory.length > 0
                    ? new Date(Math.max(...backupHistory.map(b => b.timestamp.getTime())))
                    : new Date(),
                retentionCompliance: this.calculateRetentionCompliance(backupHistory)
            },
            health: {
                systemHealthScore: this.calculateHealthScore(systemHealth),
                componentStatuses: new Map(Object.entries(systemHealth.components).map(([key, comp]) => [key, comp.status])),
                uptime: process.uptime(),
                lastSuccessfulBackup: this.getLastSuccessfulBackup(backupHistory),
                lastFailedBackup: this.getLastFailedBackup(backupHistory)
            },
            trends: {
                backupSizeGrowth: this.calculateSizeGrowthTrend(),
                successRateTrend: this.calculateSuccessRateTrend(),
                performanceTrend: this.calculatePerformanceTrend(),
                diskUsageTrend: this.calculateDiskUsageTrend()
            }
        };
        return metrics;
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
     */
    async checkThresholds(metrics) {
        const thresholds = this.config.thresholds;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ backup
        if (metrics.backup.successRate < thresholds.minSuccessRate) {
            await this.createAlert({
                severity: 'warning',
                category: 'backup',
                title: '–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö backup',
                description: `–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö backup (${metrics.backup.successRate.toFixed(1)}%) –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ${thresholds.minSuccessRate}%`,
                source: 'threshold_monitor',
                tags: ['success-rate', 'threshold'],
                metadata: {
                    threshold: thresholds.minSuccessRate,
                    currentValue: metrics.backup.successRate,
                    trend: 'decreasing'
                }
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ backup
        if (metrics.backup.averageDuration > thresholds.maxBackupDuration * 60) {
            await this.createAlert({
                severity: 'warning',
                category: 'performance',
                title: '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å backup',
                description: `–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å backup (${Math.round(metrics.backup.averageDuration / 60)} –º–∏–Ω) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${thresholds.maxBackupDuration} –º–∏–Ω`,
                source: 'threshold_monitor',
                tags: ['duration', 'performance', 'threshold'],
                metadata: {
                    threshold: thresholds.maxBackupDuration,
                    currentValue: Math.round(metrics.backup.averageDuration / 60),
                    trend: 'increasing'
                }
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
        if (metrics.storage.usagePercent > thresholds.diskSpaceCritical) {
            await this.createAlert({
                severity: 'critical',
                category: 'storage',
                title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ',
                description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ (${metrics.storage.usagePercent.toFixed(1)}%) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ ${thresholds.diskSpaceCritical}%`,
                source: 'threshold_monitor',
                tags: ['disk-space', 'critical', 'threshold'],
                metadata: {
                    threshold: thresholds.diskSpaceCritical,
                    currentValue: metrics.storage.usagePercent,
                    trend: 'increasing'
                }
            });
        }
        else if (metrics.storage.usagePercent > thresholds.diskSpaceWarning) {
            await this.createAlert({
                severity: 'warning',
                category: 'storage',
                title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ—Å—Ç–µ –Ω–∞ –¥–∏—Å–∫–µ',
                description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ (${metrics.storage.usagePercent.toFixed(1)}%) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ ${thresholds.diskSpaceWarning}%`,
                source: 'threshold_monitor',
                tags: ['disk-space', 'warning', 'threshold'],
                metadata: {
                    threshold: thresholds.diskSpaceWarning,
                    currentValue: metrics.storage.usagePercent,
                    trend: 'increasing'
                }
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö backup
        const consecutiveFailures = this.countConsecutiveFailures();
        if (consecutiveFailures >= thresholds.maxFailedBackups) {
            await this.createAlert({
                severity: 'error',
                category: 'backup',
                title: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ backup –ø–æ–¥—Ä—è–¥',
                description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${consecutiveFailures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö backup –ø–æ–¥—Ä—è–¥, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${thresholds.maxFailedBackups}`,
                source: 'threshold_monitor',
                tags: ['consecutive-failures', 'backup', 'threshold'],
                metadata: {
                    threshold: thresholds.maxFailedBackups,
                    currentValue: consecutiveFailures,
                    trend: 'increasing'
                }
            });
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è backup —Å–∏—Å—Ç–µ–º—ã
     */
    async checkBackupHealth() {
        const backupHistory = this.backupManager.getBackupHistory();
        const currentStatus = this.backupManager.getCurrentStatus();
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ backup
        if (backupHistory.length > 0) {
            const lastBackup = backupHistory[0];
            const hoursSinceLastBackup = (Date.now() - lastBackup.timestamp.getTime()) / (1000 * 60 * 60);
            if (hoursSinceLastBackup > 48) { // 48 —á–∞—Å–æ–≤
                await this.createAlert({
                    severity: 'error',
                    category: 'backup',
                    title: '–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ backup',
                    description: `–ü–æ—Å–ª–µ–¥–Ω–∏–π backup –±—ã–ª ${Math.round(hoursSinceLastBackup)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`,
                    source: 'backup_health_monitor',
                    tags: ['stale-backup', 'health'],
                    metadata: {
                        currentValue: hoursSinceLastBackup
                    }
                });
            }
        }
        else {
            await this.createAlert({
                severity: 'warning',
                category: 'backup',
                title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç backup',
                description: '–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ backup',
                source: 'backup_health_monitor',
                tags: ['no-backups', 'health']
            });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ backup –Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏–µ
        if (currentStatus.isRunning && currentStatus.currentBackupId) {
            // –ï—Å–ª–∏ backup –∑–∞–ø—É—â–µ–Ω –±–æ–ª–µ–µ 6 —á–∞—Å–æ–≤
            const runningTime = Date.now() - Date.parse(currentStatus.currentBackupId.split('_')[1]);
            if (runningTime > 6 * 60 * 60 * 1000) {
                await this.createAlert({
                    severity: 'warning',
                    category: 'backup',
                    title: 'Backup –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ',
                    description: `Backup ${currentStatus.currentBackupId} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–∂–µ ${Math.round(runningTime / (60 * 60 * 1000))} —á–∞—Å–æ–≤`,
                    source: 'backup_health_monitor',
                    tags: ['long-running', 'performance'],
                    metadata: {
                        backupId: currentStatus.currentBackupId,
                        currentValue: runningTime / (60 * 60 * 1000)
                    }
                });
            }
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è storage
     */
    async checkStorageHealth() {
        try {
            const storageStats = await this.getStorageStats();
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ storage
            if (!storageStats.accessible) {
                await this.createAlert({
                    severity: 'critical',
                    category: 'storage',
                    title: 'Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    description: '–•—Ä–∞–Ω–∏–ª–∏—â–µ backup –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                    source: 'storage_health_monitor',
                    tags: ['storage-unavailable', 'critical']
                });
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è storage
            if (storageStats.growthRate > 10) { // –ë–æ–ª–µ–µ 10% –≤ –¥–µ–Ω—å
                await this.createAlert({
                    severity: 'warning',
                    category: 'storage',
                    title: '–ë—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è storage',
                    description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ storage —Ä–∞—Å—Ç–µ—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é ${storageStats.growthRate.toFixed(1)}% –≤ –¥–µ–Ω—å`,
                    source: 'storage_health_monitor',
                    tags: ['storage-growth', 'trending'],
                    metadata: {
                        currentValue: storageStats.growthRate,
                        trend: 'increasing'
                    }
                });
            }
        }
        catch (error) {
            await this.createAlert({
                severity: 'error',
                category: 'storage',
                title: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ storage',
                description: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ storage: ${error}`,
                source: 'storage_health_monitor',
                tags: ['storage-error', 'monitoring']
            });
        }
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞
     */
    async createAlert(alertData) {
        const alertId = `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const alert = {
            id: alertId,
            timestamp: new Date(),
            severity: alertData.severity || 'info',
            category: alertData.category || 'health',
            title: alertData.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
            description: alertData.description || '',
            source: alertData.source || 'backup_monitoring',
            tags: alertData.tags || [],
            metadata: alertData.metadata || {},
            status: 'open',
            escalationLevel: 0,
            notifications: []
        };
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
        if (this.isDuplicateAlert(alert)) {
            logger_1.enhancedDbLogger.debug('‚ö†Ô∏è –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∞–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω', {
                title: alert.title,
                source: alert.source
            });
            return alertId;
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        if (!this.checkRateLimit(alert)) {
            logger_1.enhancedDbLogger.debug('‚ö†Ô∏è –ê–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ rate limiting', {
                title: alert.title
            });
            return alertId;
        }
        this.alerts.set(alertId, alert);
        this.alertHistory.push(alert);
        logger_1.enhancedDbLogger.warn(`üö® –°–æ–∑–¥–∞–Ω –∞–ª–µ—Ä—Ç: ${alert.title}`, {
            id: alertId,
            severity: alert.severity,
            category: alert.category,
            source: alert.source
        });
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.config.alerts.enabled) {
            await this.sendNotifications(alert);
        }
        // –ó–∞–ø—É—Å–∫ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (this.config.alerts.escalation.enabled &&
            ['error', 'critical', 'emergency'].includes(alert.severity)) {
            this.startEscalation(alert);
        }
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        await this.saveAlertToFile(alert);
        // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏—è
        this.emit('alert', alert);
        return alertId;
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
     */
    async sendNotifications(alert) {
        const relevantChannels = this.config.alerts.channels.filter(channel => this.shouldSendToChannel(channel, alert));
        const notificationPromises = relevantChannels.map(async (channel) => {
            const startTime = Date.now();
            let attempt = 1;
            let success = false;
            let error;
            try {
                await this.sendToChannel(channel, alert);
                success = true;
            }
            catch (err) {
                error = String(err);
                logger_1.enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ –∫–∞–Ω–∞–ª ${channel.name}`, {
                    alert: alert.id,
                    channel: channel.name,
                    error: err
                });
            }
            const notification = {
                channel: channel.name,
                sentAt: new Date(),
                success,
                error,
                responseTime: Date.now() - startTime,
                attempt
            };
            alert.notifications.push(notification);
        });
        await Promise.allSettled(notificationPromises);
        logger_1.enhancedDbLogger.info('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', {
            alert: alert.id,
            channels: relevantChannels.length,
            successful: alert.notifications.filter(n => n.success).length
        });
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
     */
    async sendToChannel(channel, alert) {
        const message = this.formatAlertMessage(alert, channel);
        switch (channel.type) {
            case 'webhook':
                await this.sendWebhook(channel, alert, message);
                break;
            case 'email':
                await this.sendEmail(channel, alert, message);
                break;
            case 'slack':
                await this.sendSlack(channel, alert, message);
                break;
            case 'telegram':
                await this.sendTelegram(channel, alert, message);
                break;
            case 'sms':
                await this.sendSMS(channel, alert, message);
                break;
            case 'pagerduty':
                await this.sendPagerDuty(channel, alert, message);
                break;
            default:
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞: ${channel.type}`);
        }
    }
    // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========
    validateConfiguration() {
        if (!this.config.thresholds) {
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è thresholds');
        }
        if (this.config.alerts.enabled && this.config.alerts.channels.length === 0) {
            throw new Error('–ê–ª–µ—Ä—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã, –Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        }
    }
    setupEventListeners() {
        // –°–æ–±—ã—Ç–∏—è –æ—Ç BackupManager
        this.backupManager.on?.('backup_started', (backupId) => {
            this.createAlert({
                severity: 'info',
                category: 'backup',
                title: 'Backup –∑–∞–ø—É—â–µ–Ω',
                description: `–ù–∞—á–∞—Ç backup ${backupId}`,
                source: 'backup_manager',
                tags: ['backup-started'],
                metadata: { backupId }
            });
        });
        this.backupManager.on?.('backup_completed', (report) => {
            this.createAlert({
                severity: 'info',
                category: 'backup',
                title: 'Backup –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                description: `Backup ${report.id} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${report.duration}—Å`,
                source: 'backup_manager',
                tags: ['backup-completed', 'success'],
                metadata: { backupId: report.id }
            });
        });
        this.backupManager.on?.('backup_failed', (backupId, error) => {
            this.createAlert({
                severity: 'error',
                category: 'backup',
                title: 'Backup –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π',
                description: `Backup ${backupId} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: ${error}`,
                source: 'backup_manager',
                tags: ['backup-failed', 'error'],
                metadata: { backupId }
            });
        });
    }
    storeMetrics(metrics) {
        const key = metrics.timestamp.toISOString();
        this.metrics.set(key, metrics);
        this.metricsHistory.push(metrics);
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
        const maxHistorySize = 1000;
        if (this.metricsHistory.length > maxHistorySize) {
            this.metricsHistory = this.metricsHistory.slice(-maxHistorySize);
        }
    }
    async loadHistoricalData() {
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            const alertsFile = path_1.default.join(this.config.metrics.exportPath, 'alerts_history.json');
            const alertsData = await promises_1.default.readFile(alertsFile, 'utf-8');
            this.alertHistory = JSON.parse(alertsData).map((a) => ({
                ...a,
                timestamp: new Date(a.timestamp),
                acknowledgedAt: a.acknowledgedAt ? new Date(a.acknowledgedAt) : undefined,
                resolvedAt: a.resolvedAt ? new Date(a.resolvedAt) : undefined
            }));
            // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫
            const metricsFile = path_1.default.join(this.config.metrics.exportPath, 'metrics_history.json');
            const metricsData = await promises_1.default.readFile(metricsFile, 'utf-8');
            this.metricsHistory = JSON.parse(metricsData).map((m) => ({
                ...m,
                timestamp: new Date(m.timestamp)
            }));
            logger_1.enhancedDbLogger.info('üìö –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
                alerts: this.alertHistory.length,
                metrics: this.metricsHistory.length
            });
        }
        catch (error) {
            logger_1.enhancedDbLogger.info('üìö –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }
    async ensureDirectories() {
        await promises_1.default.mkdir(this.config.metrics.exportPath, { recursive: true });
        await promises_1.default.mkdir(path_1.default.dirname(this.config.metrics.exportPath + '/logs'), { recursive: true });
    }
    async getStorageStats() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ storage
        return {
            used: 1024 * 1024 * 1024, // 1GB
            available: 10 * 1024 * 1024 * 1024, // 10GB
            usagePercent: 10,
            accessible: true,
            growthRate: 2.5 // % –≤ –¥–µ–Ω—å
        };
    }
    calculateCompressionRatio(backups) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
        return 0.3; // 30% compression
    }
    countUniqueComponents(backups) {
        const components = new Set();
        for (const backup of backups) {
            backup.components.forEach(c => components.add(c));
        }
        return components.size;
    }
    calculatePeakThroughput(backups) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–∏–∫–æ–≤–æ–≥–æ throughput
        return 50; // MB/s
    }
    getCpuUsage() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç CPU usage
        return 25; // 25%
    }
    calculateRetentionCompliance(backups) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–∏—Ç–∏–∫–µ retention
        return 95; // 95%
    }
    calculateHealthScore(health) {
        const weights = { healthy: 100, degraded: 75, critical: 25, down: 0 };
        const components = Object.values(health.components);
        const totalScore = components.reduce((sum, comp) => sum + weights[comp.status], 0);
        return totalScore / components.length;
    }
    getLastSuccessfulBackup(backups) {
        const successful = backups.filter(b => b.status === 'completed');
        return successful.length > 0 ? successful[0].timestamp : new Date(0);
    }
    getLastFailedBackup(backups) {
        const failed = backups.filter(b => b.status === 'failed');
        return failed.length > 0 ? failed[0].timestamp : undefined;
    }
    calculateSizeGrowthTrend() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ —Ä–æ—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞
        return 10; // MB/day
    }
    calculateSuccessRateTrend() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        return 2; // % change per day
    }
    calculatePerformanceTrend() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        return -1; // % change per day
    }
    calculateDiskUsageTrend() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
        return 5; // % change per day
    }
    countConsecutiveFailures() {
        const backups = this.backupManager.getBackupHistory();
        let count = 0;
        for (const backup of backups) {
            if (backup.status === 'failed') {
                count++;
            }
            else {
                break;
            }
        }
        return count;
    }
    isDuplicateAlert(alert) {
        const recentAlerts = this.alertHistory.filter(a => Date.now() - a.timestamp.getTime() < 60 * 60 * 1000 // –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        );
        return recentAlerts.some(a => a.title === alert.title &&
            a.source === alert.source &&
            a.status !== 'resolved');
    }
    checkRateLimit(alert) {
        if (!this.config.alerts.rateLimit.enabled)
            return true;
        const key = `${alert.category}_${alert.source}`;
        const now = Date.now();
        const lastTime = this.lastAlertTimes.get(key) || 0;
        const cooldown = this.config.alerts.rateLimit.cooldownMinutes * 60 * 1000;
        if (now - lastTime < cooldown) {
            return false;
        }
        this.lastAlertTimes.set(key, now);
        return true;
    }
    shouldSendToChannel(channel, alert) {
        if (!channel.enabled)
            return false;
        // –§–∏–ª—å—Ç—Ä –ø–æ severity
        if (channel.filters.severity &&
            !channel.filters.severity.includes(alert.severity)) {
            return false;
        }
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        if (channel.filters.components &&
            !channel.filters.components.some(comp => alert.tags.includes(comp))) {
            return false;
        }
        // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if (channel.filters.timeWindow) {
            const now = new Date();
            const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
            const { start, end } = channel.filters.timeWindow;
            if (currentTime < start || currentTime > end) {
                return false;
            }
        }
        return true;
    }
    formatAlertMessage(alert, channel) {
        const template = channel.config.template || `
üö® **${alert.severity.toUpperCase()}**: ${alert.title}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ**: ${alert.description}
üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è**: ${alert.category}
üìç **–ò—Å—Ç–æ—á–Ω–∏–∫**: ${alert.source}
‚è∞ **–í—Ä–µ–º—è**: ${alert.timestamp.toISOString()}
üîó **ID**: ${alert.id}

${alert.metadata ? 'üìä **–î–∞–Ω–Ω—ã–µ**: ' + JSON.stringify(alert.metadata, null, 2) : ''}
    `.trim();
        return template
            .replace(/\${(\w+)}/g, (match, key) => {
            return alert[key] || match;
        });
    }
    async sendWebhook(channel, alert, message) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è webhook
        logger_1.enhancedDbLogger.info(`üì§ Webhook sent to ${channel.name}`, { alert: alert.id });
    }
    async sendEmail(channel, alert, message) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è email
        logger_1.enhancedDbLogger.info(`üìß Email sent to ${channel.name}`, { alert: alert.id });
    }
    async sendSlack(channel, alert, message) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Slack
        logger_1.enhancedDbLogger.info(`üí¨ Slack message sent to ${channel.name}`, { alert: alert.id });
    }
    async sendTelegram(channel, alert, message) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        logger_1.enhancedDbLogger.info(`üì± Telegram message sent to ${channel.name}`, { alert: alert.id });
    }
    async sendSMS(channel, alert, message) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è SMS
        logger_1.enhancedDbLogger.info(`üì± SMS sent to ${channel.name}`, { alert: alert.id });
    }
    async sendPagerDuty(channel, alert, message) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è PagerDuty
        logger_1.enhancedDbLogger.info(`üö® PagerDuty alert sent to ${channel.name}`, { alert: alert.id });
    }
    startEscalation(alert) {
        if (!this.config.alerts.escalation.enabled)
            return;
        const escalateToNextLevel = () => {
            if (alert.escalationLevel >= this.config.alerts.escalation.maxEscalations) {
                return;
            }
            alert.escalationLevel++;
            const level = this.config.alerts.escalation.levels[alert.escalationLevel - 1];
            if (level) {
                logger_1.enhancedDbLogger.warn(`üî∫ –≠—Å–∫–∞–ª–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${alert.escalationLevel}`, {
                    alert: alert.id,
                    level: alert.escalationLevel
                });
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã —ç—Å–∫–∞–ª–∞—Ü–∏–∏
                const escalationChannels = this.config.alerts.channels.filter(c => level.channels.includes(c.name));
                for (const channel of escalationChannels) {
                    this.sendToChannel(channel, alert, `üî∫ –≠–°–ö–ê–õ–ê–¶–ò–Ø –£–†–û–í–ï–ù–¨ ${alert.escalationLevel}\n\n` +
                        this.formatAlertMessage(alert, channel));
                }
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                const nextTimeout = this.config.alerts.escalation.timeouts[alert.escalationLevel] * 60 * 1000;
                this.escalationTimers.set(alert.id, setTimeout(escalateToNextLevel, nextTimeout));
            }
        };
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        const firstTimeout = this.config.alerts.escalation.timeouts[0] * 60 * 1000;
        this.escalationTimers.set(alert.id, setTimeout(escalateToNextLevel, firstTimeout));
    }
    async startDashboard() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è web dashboard
        logger_1.enhancedDbLogger.info('üñ•Ô∏è Dashboard –∑–∞–ø—É—â–µ–Ω', {
            port: this.config.dashboard.port || 3000
        });
    }
    async updateDashboard() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö dashboard
    }
    async exportMetrics() {
        const timestamp = new Date().toISOString().split('T')[0];
        if (this.config.metrics.exportFormat === 'json') {
            const exportFile = path_1.default.join(this.config.metrics.exportPath, `metrics_${timestamp}.json`);
            await promises_1.default.writeFile(exportFile, JSON.stringify(Array.from(this.metrics.values()), null, 2));
        }
    }
    async saveAlertToFile(alert) {
        const alertsFile = path_1.default.join(this.config.metrics.exportPath, 'current_alerts.json');
        const alerts = Array.from(this.alerts.values());
        await promises_1.default.writeFile(alertsFile, JSON.stringify(alerts, null, 2));
    }
    async cleanupHistoricalData() {
        const cutoffDate = new Date(Date.now() - this.config.metrics.retentionDays * 24 * 60 * 60 * 1000);
        // –û—á–∏—Å—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        this.alertHistory = this.alertHistory.filter(a => a.timestamp >= cutoffDate);
        // –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
        this.metricsHistory = this.metricsHistory.filter(m => m.timestamp >= cutoffDate);
        // –û—á–∏—Å—Ç–∫–∞ resolved –∞–ª–µ—Ä—Ç–æ–≤
        for (const [id, alert] of this.alerts.entries()) {
            if (alert.status === 'resolved' && alert.resolvedAt && alert.resolvedAt < cutoffDate) {
                this.alerts.delete(id);
            }
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dashboard
     */
    getDashboardData() {
        const latestMetrics = this.metricsHistory[this.metricsHistory.length - 1];
        const activeAlerts = Array.from(this.alerts.values()).filter(a => a.status === 'open');
        return {
            status: this.calculateOverallStatus(),
            lastUpdated: new Date(),
            summary: {
                totalBackups: latestMetrics?.backup.totalBackups || 0,
                successRate: latestMetrics?.backup.successRate || 0,
                lastBackupTime: latestMetrics?.health.lastSuccessfulBackup || new Date(0),
                nextScheduledBackup: new Date(Date.now() + 24 * 60 * 60 * 1000), // TODO: —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                diskUsagePercent: latestMetrics?.storage.usagePercent || 0,
                activeAlerts: activeAlerts.length
            },
            recentBackups: this.backupManager.getBackupHistory().slice(0, 10),
            recentAlerts: this.alertHistory.slice(-10),
            metrics: latestMetrics || {},
            systemHealth: {}, // TODO: –ø–æ–ª—É—á–∏—Ç—å –æ—Ç DR manager
            trends: {
                backupSuccess: this.metricsHistory.slice(-24).map(m => m.backup.successRate),
                diskUsage: this.metricsHistory.slice(-24).map(m => m.storage.usagePercent),
                performance: this.metricsHistory.slice(-24).map(m => m.performance.averageThroughput),
                alertCounts: this.getHourlyAlertCounts()
            }
        };
    }
    calculateOverallStatus() {
        const activeAlerts = Array.from(this.alerts.values()).filter(a => a.status === 'open');
        const emergencyAlerts = activeAlerts.filter(a => a.severity === 'emergency');
        const criticalAlerts = activeAlerts.filter(a => a.severity === 'critical');
        const errorAlerts = activeAlerts.filter(a => a.severity === 'error');
        const warningAlerts = activeAlerts.filter(a => a.severity === 'warning');
        if (emergencyAlerts.length > 0)
            return 'emergency';
        if (criticalAlerts.length > 0)
            return 'critical';
        if (errorAlerts.length > 0 || warningAlerts.length > 3)
            return 'warning';
        return 'healthy';
    }
    getHourlyAlertCounts() {
        const now = Date.now();
        const hourlyData = [];
        for (let i = 23; i >= 0; i--) {
            const hourStart = now - (i + 1) * 60 * 60 * 1000;
            const hourEnd = now - i * 60 * 60 * 1000;
            const count = this.alertHistory.filter(a => a.timestamp.getTime() >= hourStart && a.timestamp.getTime() < hourEnd).length;
            hourlyData.push(count);
        }
        return hourlyData;
    }
    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
     */
    async acknowledgeAlert(alertId, acknowledgedBy) {
        const alert = this.alerts.get(alertId);
        if (!alert || alert.status !== 'open') {
            return false;
        }
        alert.status = 'acknowledged';
        alert.acknowledgedBy = acknowledgedBy;
        alert.acknowledgedAt = new Date();
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        const escalationTimer = this.escalationTimers.get(alertId);
        if (escalationTimer) {
            clearTimeout(escalationTimer);
            this.escalationTimers.delete(alertId);
        }
        logger_1.enhancedDbLogger.info('‚úÖ –ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', {
            alert: alertId,
            by: acknowledgedBy
        });
        await this.saveAlertToFile(alert);
        return true;
    }
    /**
     * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
     */
    async resolveAlert(alertId, resolvedBy) {
        const alert = this.alerts.get(alertId);
        if (!alert || alert.status === 'resolved') {
            return false;
        }
        alert.status = 'resolved';
        alert.resolvedAt = new Date();
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        const escalationTimer = this.escalationTimers.get(alertId);
        if (escalationTimer) {
            clearTimeout(escalationTimer);
            this.escalationTimers.delete(alertId);
        }
        logger_1.enhancedDbLogger.info('‚úÖ –ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω', {
            alert: alertId,
            by: resolvedBy || 'system'
        });
        await this.saveAlertToFile(alert);
        return true;
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async shutdown() {
        logger_1.enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Backup Monitoring System');
        this.isMonitoring = false;
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
        }
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        for (const timer of this.escalationTimers.values()) {
            clearTimeout(timer);
        }
        this.escalationTimers.clear();
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            await promises_1.default.writeFile(path_1.default.join(this.config.metrics.exportPath, 'alerts_history.json'), JSON.stringify(this.alertHistory, null, 2));
            await promises_1.default.writeFile(path_1.default.join(this.config.metrics.exportPath, 'metrics_history.json'), JSON.stringify(this.metricsHistory, null, 2));
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ', { error });
        }
        logger_1.enhancedDbLogger.info('‚úÖ Backup Monitoring System –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}
exports.BackupMonitoring = BackupMonitoring;
//# sourceMappingURL=BackupMonitoring.js.map