"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.torManager = exports.TorManager = void 0;
const socks_proxy_agent_1 = require("socks-proxy-agent");
const https_proxy_agent_1 = require("https-proxy-agent");
const axios_1 = __importDefault(require("axios"));
const net_1 = __importDefault(require("net"));
const events_1 = require("events");
const logger_1 = require("./logger");
class TorManager extends events_1.EventEmitter {
    constructor(config = {}) {
        super();
        this.socksAgent = null;
        this.httpsAgent = null;
        this.isInitialized = false;
        this.circuitRotationTimer = null;
        this.healthCheckTimer = null;
        this.stats = {
            requestCount: 0,
            errorCount: 0,
            circuitRotations: 0,
            lastError: null,
        };
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        this.CONNECTION_CONFIGS = {
            // –û—Å–Ω–æ–≤–Ω–æ–π SOCKS –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Ç—Ä–∞—Ñ–∏–∫–∞
            web: { port: 9050, isolation: 'IsolateDestAddr IsolateDestPort' },
            // –ü–æ—Ä—Ç –¥–ª—è blockchain —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            blockchain: { port: 9051, isolation: 'IsolateClientAuth IsolateSOCKSAuth' },
            // –ü–æ—Ä—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
            api: { port: 9052, isolation: 'IsolateDestAddr IsolateDestPort IsolateClientProtocol' },
        };
        this.config = {
            socksPort: 9050,
            controlPort: 9053,
            controlPassword: process.env.TOR_CONTROL_PASSWORD || '',
            enabled: process.env.TOR_ENABLED === 'true',
            circuitTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
            maxRetries: 3,
            retryDelay: 5000, // 5 —Å–µ–∫—É–Ω–¥
            isolationLevel: 'full',
            ...config,
        };
        this.connectionInfo = {
            isConnected: false,
            circuitCount: 0,
            bandwidth: { read: 0, written: 0 },
            lastCircuitRotation: new Date(),
            errors: [],
        };
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π axios instance
        this.axiosInstance = axios_1.default.create({
            timeout: this.config.circuitTimeout,
            headers: {
                'User-Agent': this.generateRandomUserAgent(),
            },
        });
        logger_1.logger.info('üßÖ TorManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
            enabled: this.config.enabled,
            socksPort: this.config.socksPort,
            controlPort: this.config.controlPort,
        });
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    async initialize() {
        if (!this.config.enabled) {
            logger_1.logger.info('üßÖ Tor –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            return;
        }
        try {
            logger_1.logger.info('üßÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tor
            await this.checkTorAvailability();
            // –°–æ–∑–¥–∞–µ–º SOCKS –∞–≥–µ–Ω—Ç–æ–≤
            await this.createSocksAgents();
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ hidden service
            await this.getHiddenServiceInfo();
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            this.startHealthMonitoring();
            this.startCircuitRotation();
            this.isInitialized = true;
            this.connectionInfo.isConnected = true;
            logger_1.logger.info('‚úÖ TorManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.emit('connected');
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TorManager:', error);
            this.connectionInfo.errors.push(error.message);
            this.stats.lastError = error;
            throw error;
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tor
     */
    async checkTorAvailability() {
        return new Promise((resolve, reject) => {
            const socket = new net_1.default.Socket();
            const timeout = setTimeout(() => {
                socket.destroy();
                reject(new Error(`Tor SOCKS –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.socksPort}`));
            }, 5000);
            socket.connect(this.config.socksPort, '127.0.0.1', () => {
                clearTimeout(timeout);
                socket.destroy();
                logger_1.logger.info(`‚úÖ Tor SOCKS –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.socksPort}`);
                resolve();
            });
            socket.on('error', (error) => {
                clearTimeout(timeout);
                reject(new Error(`Tor SOCKS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`));
            });
        });
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ SOCKS –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    async createSocksAgents() {
        try {
            // –û—Å–Ω–æ–≤–Ω–æ–π SOCKS –∞–≥–µ–Ω—Ç
            this.socksAgent = new socks_proxy_agent_1.SocksProxyAgent(`socks5://127.0.0.1:${this.config.socksPort}`);
            // HTTPS –∞–≥–µ–Ω—Ç
            this.httpsAgent = new https_proxy_agent_1.HttpsProxyAgent(`socks5://127.0.0.1:${this.config.socksPort}`);
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º axios instance —Å Tor –∞–≥–µ–Ω—Ç–æ–º
            this.axiosInstance.defaults.httpAgent = this.socksAgent;
            this.axiosInstance.defaults.httpsAgent = this.httpsAgent;
            // –î–æ–±–∞–≤–ª—è–µ–º interceptors –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            this.setupAxiosInterceptors();
            logger_1.logger.info('‚úÖ SOCKS –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SOCKS –∞–≥–µ–Ω—Ç–æ–≤:', error);
            throw error;
        }
    }
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Axios interceptors
     */
    setupAxiosInterceptors() {
        // Request interceptor
        this.axiosInstance.interceptors.request.use((config) => {
            this.stats.requestCount++;
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            config.headers = {
                ...config.headers,
                'Accept-Language': this.generateRandomAcceptLanguage(),
                'DNT': '1',
                'Upgrade-Insecure-Requests': '1',
            };
            logger_1.logger.debug('üßÖ Tor –∑–∞–ø—Ä–æ—Å:', {
                method: config.method,
                url: config.url,
                headers: config.headers
            });
            return config;
        }, (error) => {
            this.stats.errorCount++;
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ Tor –∑–∞–ø—Ä–æ—Å–∞:', error);
            return Promise.reject(error);
        });
        // Response interceptor
        this.axiosInstance.interceptors.response.use((response) => {
            logger_1.logger.debug('‚úÖ Tor –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
                status: response.status,
                url: response.config.url
            });
            return response;
        }, async (error) => {
            this.stats.errorCount++;
            this.stats.lastError = error;
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å —Ü–µ–ø–æ—á–∫—É
            if (error.code === 'ECONNREFUSED' || error.code === 'ETIMEDOUT') {
                logger_1.logger.warn('üîÑ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ä–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É...');
                await this.rotateCircuit();
            }
            return Promise.reject(error);
        });
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ hidden service
     */
    async getHiddenServiceInfo() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å onion –∞–¥—Ä–µ—Å –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            // –í Docker —ç—Ç–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ volume
            const fs = await Promise.resolve().then(() => __importStar(require('fs/promises')));
            try {
                const onionAddress = await fs.readFile('/shared/onion-address.txt', 'utf-8');
                this.connectionInfo.onionAddress = onionAddress.trim();
                logger_1.logger.info(`üßÖ Hidden service –∞–¥—Ä–µ—Å: ${this.connectionInfo.onionAddress}`);
            }
            catch (error) {
                logger_1.logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å onion –∞–¥—Ä–µ—Å –∏–∑ —Ñ–∞–π–ª–∞');
            }
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ hidden service:', error);
        }
    }
    /**
     * –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ Tor
     */
    async rotateCircuit() {
        if (!this.isInitialized) {
            logger_1.logger.warn('‚ö†Ô∏è TorManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        try {
            logger_1.logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é Tor —Ü–µ–ø–æ—á–µ–∫...');
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª NEWNYM —á–µ—Ä–µ–∑ control port
            await this.sendControlCommand('SIGNAL NEWNYM');
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö —Ü–µ–ø–æ—á–µ–∫
            await new Promise(resolve => setTimeout(resolve, 3000));
            this.connectionInfo.lastCircuitRotation = new Date();
            this.stats.circuitRotations++;
            logger_1.logger.info('‚úÖ –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            this.emit('circuitRotated');
        }
        catch (error) {
            logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫:', error);
            this.connectionInfo.errors.push(`Circuit rotation failed: ${error.message}`);
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Tor control port
     */
    async sendControlCommand(command) {
        return new Promise((resolve, reject) => {
            const socket = new net_1.default.Socket();
            let response = '';
            socket.connect(this.config.controlPort, '127.0.0.1', () => {
                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                const authCommand = `AUTHENTICATE "${this.config.controlPassword}"\r\n`;
                socket.write(authCommand);
            });
            socket.on('data', (data) => {
                response += data.toString();
                if (response.includes('250 OK\r\n')) {
                    if (!response.includes(command)) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        socket.write(`${command}\r\n`);
                    }
                    else {
                        // –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                        socket.write('QUIT\r\n');
                        socket.end();
                        resolve(response);
                    }
                }
                else if (response.includes('515') || response.includes('550')) {
                    reject(new Error(`Control command failed: ${response}`));
                }
            });
            socket.on('error', (error) => {
                reject(error);
            });
            socket.on('timeout', () => {
                socket.destroy();
                reject(new Error('Control connection timeout'));
            });
            socket.setTimeout(10000);
        });
    }
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è Tor
     */
    startHealthMonitoring() {
        this.healthCheckTimer = setInterval(async () => {
            try {
                await this.performHealthCheck();
            }
            catch (error) {
                logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Tor:', error);
            }
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫
     */
    startCircuitRotation() {
        // –†–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        this.circuitRotationTimer = setInterval(async () => {
            await this.rotateCircuit();
        }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    async performHealthCheck() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SOCKS –ø–æ—Ä—Ç–∞
            await this.checkTorAvailability();
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–ø–æ—á–µ–∫
            const circuitInfo = await this.sendControlCommand('GETINFO circuit-status');
            const circuits = circuitInfo.split('\n').filter(line => line.includes('BUILT'));
            this.connectionInfo.circuitCount = circuits.length;
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
            const trafficInfo = await this.sendControlCommand('GETINFO traffic/read traffic/written');
            const trafficLines = trafficInfo.split('\n');
            for (const line of trafficLines) {
                if (line.includes('traffic/read=')) {
                    this.connectionInfo.bandwidth.read = parseInt(line.split('=')[1]) || 0;
                }
                if (line.includes('traffic/written=')) {
                    this.connectionInfo.bandwidth.written = parseInt(line.split('=')[1]) || 0;
                }
            }
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
            this.connectionInfo.errors = this.connectionInfo.errors.slice(-5);
            this.emit('healthCheck', this.connectionInfo);
        }
        catch (error) {
            this.connectionInfo.isConnected = false;
            this.connectionInfo.errors.push(`Health check failed: ${error.message}`);
            this.emit('healthCheckFailed', error);
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ axios instance –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    getAxiosInstance(connectionType = 'web') {
        if (!this.config.enabled || !this.isInitialized) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π axios instance –±–µ–∑ Tor
            return axios_1.default.create({
                timeout: this.config.circuitTimeout,
                headers: {
                    'User-Agent': this.generateRandomUserAgent(),
                },
            });
        }
        const config = this.CONNECTION_CONFIGS[connectionType];
        const socksAgent = new socks_proxy_agent_1.SocksProxyAgent(`socks5://127.0.0.1:${config.port}`);
        const httpsAgent = new https_proxy_agent_1.HttpsProxyAgent(`socks5://127.0.0.1:${config.port}`);
        return axios_1.default.create({
            timeout: this.config.circuitTimeout,
            httpAgent: socksAgent,
            httpsAgent: httpsAgent,
            headers: {
                'User-Agent': this.generateRandomUserAgent(),
                'Accept-Language': this.generateRandomAcceptLanguage(),
                'DNT': '1',
            },
        });
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
     */
    generateRandomUserAgent() {
        const userAgents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0',
        ];
        return userAgents[Math.floor(Math.random() * userAgents.length)];
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ Accept-Language –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    generateRandomAcceptLanguage() {
        const languages = [
            'en-US,en;q=0.9',
            'en-GB,en;q=0.9',
            'ru-RU,ru;q=0.9,en;q=0.8',
            'de-DE,de;q=0.9,en;q=0.8',
            'fr-FR,fr;q=0.9,en;q=0.8',
        ];
        return languages[Math.floor(Math.random() * languages.length)];
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã
     */
    getStats() {
        return {
            ...this.stats,
            connectionInfo: this.connectionInfo,
            isEnabled: this.config.enabled,
            isInitialized: this.isInitialized,
        };
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Tor
     */
    async testConnection(url = 'https://check.torproject.org/api/ip') {
        try {
            const response = await this.axiosInstance.get(url);
            logger_1.logger.info('‚úÖ Tor —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω:', response.data);
            return response.data;
        }
        catch (error) {
            logger_1.logger.error('‚ùå Tor —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω:', error);
            throw error;
        }
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TorManager
     */
    async shutdown() {
        logger_1.logger.info('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TorManager...');
        if (this.healthCheckTimer) {
            clearInterval(this.healthCheckTimer);
        }
        if (this.circuitRotationTimer) {
            clearInterval(this.circuitRotationTimer);
        }
        this.isInitialized = false;
        this.connectionInfo.isConnected = false;
        this.emit('disconnected');
        logger_1.logger.info('‚úÖ TorManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}
exports.TorManager = TorManager;
// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TorManager
exports.torManager = new TorManager();
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
if (process.env.NODE_ENV !== 'test') {
    exports.torManager.initialize().catch(error => {
        logger_1.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TorManager:', error);
    });
}
//# sourceMappingURL=TorManager.js.map