"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultRateLimitConfig = exports.EnhancedRateLimiter = void 0;
const redis_1 = require("redis");
const logger_1 = require("../../utils/logger");
/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Rate Limiter —Å DDoS –∑–∞—â–∏—Ç–æ–π
 */
class EnhancedRateLimiter {
    constructor(config) {
        this.redisClient = null;
        this.memoryStore = new Map();
        this.blockedIPs = new Set();
        this.suspiciousActivity = new Map();
        this.config = config;
        this.ddosMetrics = {
            requestsPerSecond: 0,
            uniqueIPs: 0,
            suspiciousIPs: [],
            blockedIPs: [],
            totalBlocked: 0,
            patternDetected: false
        };
        this.initializeRedis();
        this.startDDoSMonitoring();
    }
    /**
     * RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ rate limiting
     */
    async initializeRedis() {
        if (!this.config.redis.enabled) {
            logger_1.enhancedDbLogger.info('üîí Rate Limiting: Redis –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            return;
        }
        try {
            this.redisClient = (0, redis_1.createClient)({
                url: this.config.redis.url,
                socket: {
                    connectTimeout: 5000,
                    commandTimeout: 3000,
                    reconnectDelay: 1000
                }
            });
            this.redisClient.on('error', (error) => {
                logger_1.enhancedDbLogger.error('‚ùå Redis Rate Limiter –æ—à–∏–±–∫–∞', { error });
                // RUSSIAN: –ü—Ä–∏ –æ—à–∏–±–∫–µ Redis –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                this.redisClient = null;
            });
            this.redisClient.on('connect', () => {
                logger_1.enhancedDbLogger.info('‚úÖ Redis Rate Limiter –ø–æ–¥–∫–ª—é—á–µ–Ω');
            });
            await this.redisClient.connect();
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis –¥–ª—è Rate Limiting', { error });
            this.redisClient = null;
        }
    }
    /**
     * RUSSIAN: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DDoS –∞—Ç–∞–∫
     */
    startDDoSMonitoring() {
        if (!this.config.ddosProtection.enabled) {
            return;
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setInterval(() => {
            this.updateDDoSMetrics();
            this.detectSuspiciousPatterns();
            this.cleanupExpiredBlocks();
        }, 1000);
        logger_1.enhancedDbLogger.info('üõ°Ô∏è DDoS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }
    /**
     * RUSSIAN: –ì–ª–∞–≤–Ω—ã–π middleware –¥–ª—è rate limiting
     */
    middleware() {
        return async (req, res, next) => {
            try {
                const clientIP = this.getClientIP(req);
                const userAgent = req.get('User-Agent') || 'unknown';
                logger_1.enhancedDbLogger.debug('üîç Rate Limiting –ø—Ä–æ–≤–µ—Ä–∫–∞', {
                    ip: clientIP,
                    method: req.method,
                    path: req.path,
                    userAgent
                });
                // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ IP
                if (this.isBlacklisted(clientIP)) {
                    logger_1.enhancedDbLogger.warn('üö´ IP –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ', { ip: clientIP });
                    return this.handleBlocked(req, res, 'IP –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ');
                }
                // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP –æ—Ç DDoS –∑–∞—â–∏—Ç—ã
                if (this.blockedIPs.has(clientIP)) {
                    logger_1.enhancedDbLogger.warn('üõ°Ô∏è IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω DDoS –∑–∞—â–∏—Ç–æ–π', { ip: clientIP });
                    return this.handleBlocked(req, res, 'IP –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
                }
                // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ IP (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏)
                if (this.isWhitelisted(clientIP)) {
                    logger_1.enhancedDbLogger.debug('‚úÖ IP –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º', { ip: clientIP });
                    return next();
                }
                // RUSSIAN: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –ø—Ä–∞–≤–∏–ª–∞ rate limiting
                const rules = this.getApplicableRules(req);
                // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ
                for (const rule of rules) {
                    const result = await this.checkRateLimit(req, rule);
                    if (!result.allowed) {
                        logger_1.enhancedDbLogger.warn('‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω', {
                            ip: clientIP,
                            rule: rule.name,
                            remaining: result.info.remaining,
                            resetTime: result.info.resetTime
                        });
                        // RUSSIAN: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        this.recordSuspiciousActivity(clientIP);
                        return this.handleRateLimitExceeded(req, res, result.info, rule);
                    }
                }
                // RUSSIAN: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                this.recordRequest(req);
                // RUSSIAN: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
                this.addRateLimitHeaders(res, rules[0] ? await this.checkRateLimit(req, rules[0]) : null);
                next();
            }
            catch (error) {
                logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤ Rate Limiting middleware', { error });
                // RUSSIAN: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
                next();
            }
        };
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
     */
    async checkRateLimit(req, rule) {
        const key = this.generateKey(req, rule);
        const now = Date.now();
        const windowStart = now - rule.windowMs;
        try {
            // RUSSIAN: –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            const data = await this.getStoredData(key);
            // RUSSIAN: –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
            const requestsInWindow = data.requests.filter((timestamp) => timestamp > windowStart);
            // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ throttling –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            const effectiveMaxRequests = this.getEffectiveLimit(rule.maxRequests);
            const allowed = requestsInWindow.length < effectiveMaxRequests;
            const remaining = Math.max(0, effectiveMaxRequests - requestsInWindow.length);
            const resetTime = new Date(windowStart + rule.windowMs);
            if (allowed) {
                // RUSSIAN: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                requestsInWindow.push(now);
                await this.storeData(key, {
                    requests: requestsInWindow,
                    lastReset: now
                }, rule.windowMs);
            }
            return {
                allowed,
                info: {
                    total: effectiveMaxRequests,
                    remaining,
                    resetTime,
                    retryAfter: allowed ? undefined : Math.ceil((resetTime.getTime() - now) / 1000)
                }
            };
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit', { error, key });
            // RUSSIAN: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open)
            return {
                allowed: true,
                info: {
                    total: rule.maxRequests,
                    remaining: rule.maxRequests,
                    resetTime: new Date(now + rule.windowMs)
                }
            };
        }
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     */
    getApplicableRules(req) {
        const rules = [];
        // RUSSIAN: –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        rules.push({ ...this.config.global, name: 'global' });
        // RUSSIAN: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
        const endpoint = this.getEndpointPattern(req.path);
        if (this.config.endpoints[endpoint]) {
            rules.push({ ...this.config.endpoints[endpoint], name: `endpoint:${endpoint}` });
        }
        // RUSSIAN: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        if (req.user) {
            rules.push({ ...this.config.user, name: 'user' });
        }
        // RUSSIAN: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (this.isCriticalEndpoint(req.path)) {
            rules.push({ ...this.config.critical, name: 'critical' });
        }
        return rules;
    }
    /**
     * RUSSIAN: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    generateKey(req, rule) {
        if (rule.keyGenerator) {
            return `${this.config.redis.keyPrefix}:${rule.keyGenerator(req)}`;
        }
        const ip = this.getClientIP(req);
        const user = req.user ? `user:${req.user.id}` : `ip:${ip}`;
        const endpoint = this.getEndpointPattern(req.path);
        return `${this.config.redis.keyPrefix}:${user}:${endpoint}`;
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏
     */
    getClientIP(req) {
        const forwarded = req.get('X-Forwarded-For');
        const realIP = req.get('X-Real-IP');
        const cfConnectingIP = req.get('CF-Connecting-IP'); // Cloudflare
        if (forwarded) {
            // RUSSIAN: –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)
            return forwarded.split(',')[0].trim();
        }
        if (realIP) {
            return realIP.trim();
        }
        if (cfConnectingIP) {
            return cfConnectingIP.trim();
        }
        return req.socket.remoteAddress || 'unknown';
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
     */
    isWhitelisted(ip) {
        // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        const globalWhitelist = this.config.global.whitelist || [];
        return globalWhitelist.some(whiteIP => {
            if (whiteIP.includes('/')) {
                // RUSSIAN: CIDR –ø–æ–¥—Å–µ—Ç—å
                return this.isIPInCIDR(ip, whiteIP);
            }
            return ip === whiteIP;
        });
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
     */
    isBlacklisted(ip) {
        const globalBlacklist = this.config.global.blacklist || [];
        return globalBlacklist.some(blackIP => {
            if (blackIP.includes('/')) {
                return this.isIPInCIDR(ip, blackIP);
            }
            return ip === blackIP;
        });
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è IP –≤ CIDR –ø–æ–¥—Å–µ—Ç—å
     */
    isIPInCIDR(ip, cidr) {
        try {
            const [network, prefixLength] = cidr.split('/');
            const ipNum = this.ipToNumber(ip);
            const networkNum = this.ipToNumber(network);
            const mask = -1 << (32 - parseInt(prefixLength));
            return (ipNum & mask) === (networkNum & mask);
        }
        catch {
            return false;
        }
    }
    /**
     * RUSSIAN: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è IP –≤ —á–∏—Å–ª–æ
     */
    ipToNumber(ip) {
        return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet), 0);
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
     */
    getEndpointPattern(path) {
        // RUSSIAN: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ö–æ–∂–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        return path
            .replace(/\/\d+/g, '/:id') // /users/123 -> /users/:id
            .replace(/\/[a-f0-9-]{36}/g, '/:uuid') // UUID –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            .replace(/\/[a-f0-9]{64}/g, '/:hash') // Hash –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            .toLowerCase();
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
     */
    isCriticalEndpoint(path) {
        const criticalPatterns = [
            '/api/v1/mix',
            '/api/v1/withdraw',
            '/api/v1/auth/login',
            '/api/v1/auth/register',
            '/api/v1/wallet/create'
        ];
        return criticalPatterns.some(pattern => path.startsWith(pattern));
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ throttling
     */
    getEffectiveLimit(baseLimit) {
        if (!this.config.adaptive.enabled) {
            return baseLimit;
        }
        // RUSSIAN: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã
        const cpuUsage = process.cpuUsage();
        const memoryUsage = process.memoryUsage();
        const cpuPercent = (cpuUsage.user + cpuUsage.system) / 1000000; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        const memoryPercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;
        let throttleFactor = 1;
        if (cpuPercent > this.config.adaptive.cpuThreshold) {
            throttleFactor *= this.config.adaptive.throttleFactor;
            logger_1.enhancedDbLogger.debug('‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ throttling: –≤—ã—Å–æ–∫–∞—è CPU –Ω–∞–≥—Ä—É–∑–∫–∞', { cpuPercent });
        }
        if (memoryPercent > this.config.adaptive.memoryThreshold) {
            throttleFactor *= this.config.adaptive.throttleFactor;
            logger_1.enhancedDbLogger.debug('‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ throttling: –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏', { memoryPercent });
        }
        const effectiveLimit = Math.max(1, Math.floor(baseLimit / throttleFactor));
        if (effectiveLimit < baseLimit) {
            logger_1.enhancedDbLogger.info('üéöÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ', {
                baseLimit,
                effectiveLimit,
                throttleFactor
            });
        }
        return effectiveLimit;
    }
    /**
     * RUSSIAN: –ó–∞–ø–∏—Å—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    recordSuspiciousActivity(ip) {
        if (!this.config.ddosProtection.enabled) {
            return;
        }
        const current = this.suspiciousActivity.get(ip) || 0;
        const newCount = current + 1;
        this.suspiciousActivity.set(ip, newCount);
        if (newCount >= this.config.ddosProtection.suspiciousThreshold) {
            this.blockIP(ip, '–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        }
        logger_1.enhancedDbLogger.debug('üìä –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞', { ip, count: newCount });
    }
    /**
     * RUSSIAN: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞
     */
    blockIP(ip, reason) {
        this.blockedIPs.add(ip);
        this.ddosMetrics.blockedIPs.push(ip);
        this.ddosMetrics.totalBlocked++;
        logger_1.enhancedDbLogger.warn('üö´ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', { ip, reason });
        // RUSSIAN: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            this.unblockIP(ip);
        }, this.config.ddosProtection.blockDuration * 1000);
        // RUSSIAN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (this.config.monitoring.enabled) {
            this.sendDDoSAlert({
                type: 'ip_blocked',
                ip,
                reason,
                timestamp: new Date()
            });
        }
    }
    /**
     * RUSSIAN: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞
     */
    unblockIP(ip) {
        if (this.blockedIPs.has(ip)) {
            this.blockedIPs.delete(ip);
            this.suspiciousActivity.delete(ip);
            const index = this.ddosMetrics.blockedIPs.indexOf(ip);
            if (index > -1) {
                this.ddosMetrics.blockedIPs.splice(index, 1);
            }
            logger_1.enhancedDbLogger.info('‚úÖ IP —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', { ip });
        }
    }
    /**
     * RUSSIAN: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ DDoS
     */
    updateDDoSMetrics() {
        // RUSSIAN: –ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        this.ddosMetrics.uniqueIPs = this.memoryStore.size;
        this.ddosMetrics.suspiciousIPs = Array.from(this.suspiciousActivity.keys());
    }
    /**
     * RUSSIAN: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    detectSuspiciousPatterns() {
        if (!this.config.ddosProtection.patternDetection) {
            return;
        }
        // RUSSIAN: –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è DDoS
        const suspiciousIPCount = this.ddosMetrics.suspiciousIPs.length;
        const blockedIPCount = this.ddosMetrics.blockedIPs.length;
        if (suspiciousIPCount > 10 || blockedIPCount > 5) {
            this.ddosMetrics.patternDetected = true;
            logger_1.enhancedDbLogger.warn('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω DDoS', {
                suspiciousIPs: suspiciousIPCount,
                blockedIPs: blockedIPCount
            });
            if (this.config.monitoring.enabled) {
                this.sendDDoSAlert({
                    type: 'pattern_detected',
                    suspiciousIPCount,
                    blockedIPCount,
                    timestamp: new Date()
                });
            }
        }
        else {
            this.ddosMetrics.patternDetected = false;
        }
    }
    /**
     * RUSSIAN: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
     */
    cleanupExpiredBlocks() {
        // RUSSIAN: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        const oneHourAgo = Date.now() - (60 * 60 * 1000);
        for (const [ip, timestamp] of this.suspiciousActivity.entries()) {
            if (timestamp < oneHourAgo) {
                this.suspiciousActivity.delete(ip);
            }
        }
    }
    /**
     * RUSSIAN: –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    recordRequest(req) {
        const ip = this.getClientIP(req);
        // RUSSIAN: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        if (!this.memoryStore.has('requests_per_second')) {
            this.memoryStore.set('requests_per_second', []);
        }
        const requests = this.memoryStore.get('requests_per_second');
        requests.push({ timestamp: Date.now(), ip });
        // RUSSIAN: –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É
        const oneSecondAgo = Date.now() - 1000;
        const recentRequests = requests.filter((r) => r.timestamp > oneSecondAgo);
        this.memoryStore.set('requests_per_second', recentRequests);
        this.ddosMetrics.requestsPerSecond = recentRequests.length;
    }
    /**
     * RUSSIAN: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ rate limit –≤ –æ—Ç–≤–µ—Ç
     */
    addRateLimitHeaders(res, result) {
        if (!result)
            return;
        res.set({
            'X-RateLimit-Limit': result.info.total.toString(),
            'X-RateLimit-Remaining': result.info.remaining.toString(),
            'X-RateLimit-Reset': result.info.resetTime.toISOString(),
            'X-RateLimit-Policy': 'enhanced-multi-tier'
        });
        if (result.info.retryAfter) {
            res.set('Retry-After', result.info.retryAfter.toString());
        }
    }
    /**
     * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit
     */
    handleRateLimitExceeded(req, res, info, rule) {
        this.addRateLimitHeaders(res, { info });
        const response = {
            error: 'Too Many Requests',
            message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            details: {
                limit: info.total,
                remaining: info.remaining,
                resetTime: info.resetTime,
                retryAfter: info.retryAfter,
                rule: rule.name
            },
            timestamp: new Date().toISOString()
        };
        // RUSSIAN: –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        if (rule.onLimitReached) {
            rule.onLimitReached(req, res);
        }
        res.status(429).json(response);
    }
    /**
     * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ IP
     */
    handleBlocked(req, res, reason) {
        const response = {
            error: 'Access Denied',
            message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
            reason,
            timestamp: new Date().toISOString()
        };
        res.status(403).json(response);
    }
    /**
     * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ DDoS –∞–ª–µ—Ä—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    sendDDoSAlert(alertData) {
        // RUSSIAN: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞
        logger_1.enhancedDbLogger.warn('üö® DDoS Alert', alertData);
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    async getStoredData(key) {
        if (this.redisClient) {
            try {
                const data = await this.redisClient.get(key);
                return data ? JSON.parse(data) : { requests: [], lastReset: Date.now() };
            }
            catch (error) {
                logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis', { error, key });
            }
        }
        // RUSSIAN: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ fallback
        return this.memoryStore.get(key) || { requests: [], lastReset: Date.now() };
    }
    /**
     * RUSSIAN: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
     */
    async storeData(key, data, ttl) {
        if (this.redisClient) {
            try {
                await this.redisClient.setEx(key, Math.ceil(ttl / 1000), JSON.stringify(data));
                return;
            }
            catch (error) {
                logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis', { error, key });
            }
        }
        // RUSSIAN: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ fallback
        this.memoryStore.set(key, data);
        // RUSSIAN: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TTL
        setTimeout(() => {
            this.memoryStore.delete(key);
        }, ttl);
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ DDoS
     */
    getDDoSMetrics() {
        return { ...this.ddosMetrics };
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiting
     */
    getStatistics() {
        return {
            totalRequests: this.memoryStore.get('total_requests') || 0,
            blockedRequests: this.ddosMetrics.totalBlocked,
            activeBlocks: this.blockedIPs.size,
            suspiciousIPs: this.suspiciousActivity.size,
            requestsPerSecond: this.ddosMetrics.requestsPerSecond
        };
    }
    /**
     * RUSSIAN: –†—É—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
     */
    async blockIPManually(ip, reason, duration) {
        this.blockIP(ip, reason);
        if (duration && duration !== this.config.ddosProtection.blockDuration) {
            // RUSSIAN: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            setTimeout(() => {
                this.unblockIP(ip);
            }, duration * 1000);
        }
        logger_1.enhancedDbLogger.info('üëÆ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é', { ip, reason, duration });
    }
    /**
     * RUSSIAN: –†—É—á–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
     */
    async unblockIPManually(ip) {
        this.unblockIP(ip);
        logger_1.enhancedDbLogger.info('üëÆ IP —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é', { ip });
    }
    /**
     * RUSSIAN: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
     */
    async clearAllBlocks() {
        const blockedCount = this.blockedIPs.size;
        this.blockedIPs.clear();
        this.suspiciousActivity.clear();
        this.ddosMetrics.blockedIPs = [];
        this.ddosMetrics.suspiciousIPs = [];
        logger_1.enhancedDbLogger.info('üßπ –í—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã', { clearedCount: blockedCount });
    }
    /**
     * RUSSIAN: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    async shutdown() {
        if (this.redisClient) {
            await this.redisClient.quit();
            this.redisClient = null;
        }
        this.memoryStore.clear();
        this.blockedIPs.clear();
        this.suspiciousActivity.clear();
        logger_1.enhancedDbLogger.info('üîí Rate Limiter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}
exports.EnhancedRateLimiter = EnhancedRateLimiter;
/**
 * RUSSIAN: –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è crypto-mixer
 */
exports.defaultRateLimitConfig = {
    global: {
        windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
        maxRequests: 1000, // 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ IP
        whitelist: [
            '127.0.0.1',
            '::1',
            '10.0.0.0/8', // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å
            '172.16.0.0/12', // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å
            '192.168.0.0/16' // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å
        ],
        blacklist: []
    },
    endpoints: {
        '/api/v1/mix': {
            windowMs: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
            maxRequests: 5, // –¢–æ–ª—å–∫–æ 5 –æ–ø–µ—Ä–∞—Ü–∏–π –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
            skipSuccessfulRequests: false,
            skipFailedRequests: true
        },
        '/api/v1/auth/login': {
            windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
            maxRequests: 10, // 10 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
            skipSuccessfulRequests: true,
            skipFailedRequests: false
        },
        '/api/v1/auth/register': {
            windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
            maxRequests: 3, // 3 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å IP
            skipSuccessfulRequests: false,
            skipFailedRequests: false
        },
        '/api/v1/wallet/create': {
            windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
            maxRequests: 10, // 10 –Ω–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
            skipSuccessfulRequests: false,
            skipFailedRequests: true
        }
    },
    user: {
        windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
        maxRequests: 100, // 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyGenerator: (req) => `user:${req.user?.id || 'anonymous'}`
    },
    critical: {
        windowMs: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        maxRequests: 3, // –¢–æ–ª—å–∫–æ 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        skipSuccessfulRequests: false,
        skipFailedRequests: false
    },
    adaptive: {
        enabled: true,
        cpuThreshold: 80, // –ü—Ä–∏ CPU > 80%
        memoryThreshold: 85, // –ü—Ä–∏ –ø–∞–º—è—Ç–∏ > 85%
        throttleFactor: 0.5 // –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç—ã –≤ 2 —Ä–∞–∑–∞
    },
    ddosProtection: {
        enabled: true,
        suspiciousThreshold: 50, // 50 –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ = –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ
        blockDuration: 300, // 5 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        patternDetection: true
    },
    redis: {
        enabled: process.env.REDIS_URL ? true : false,
        url: process.env.REDIS_URL || 'redis://localhost:6379',
        keyPrefix: 'crypto_mixer:rate_limit'
    },
    monitoring: {
        enabled: true,
        alertThreshold: 10 // –ê–ª–µ—Ä—Ç –ø—Ä–∏ 10+ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö –≤ –º–∏–Ω—É—Ç—É
    }
};
//# sourceMappingURL=rateLimiting.enhanced.js.map