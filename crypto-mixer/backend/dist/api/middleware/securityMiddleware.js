"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityMiddleware = void 0;
exports.createSecurityMiddleware = createSecurityMiddleware;
exports.setupSecurity = setupSecurity;
const rateLimiting_enhanced_1 = require("./rateLimiting.enhanced");
const ddosProtection_1 = require("./ddosProtection");
const logger_1 = require("../../utils/logger");
/**
 * RUSSIAN: –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
class SecurityMiddleware {
    constructor(config = {}) {
        this.isActive = false;
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        this.securityStats = {
            totalRequests: 0,
            blockedRequests: 0,
            rateLimitedRequests: 0,
            ddosAttacksDetected: 0,
            attacksMitigated: 0,
            emergencyModeActivations: 0,
            topAttackingIPs: new Map(),
            attackTypes: new Map()
        };
        // –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        this.securityEvents = [];
        this.maxEventsHistory = 10000;
        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        this.emergencyMode = {
            active: false,
            activatedAt: null,
            reason: '',
            level: 0
        };
        this.config = this.mergeConfig(config);
        // RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã
        this.rateLimiter = new rateLimiting_enhanced_1.EnhancedRateLimiter(this.config.rateLimiting);
        this.ddosProtection = new ddosProtection_1.AdvancedDDoSProtection(this.config.ddosProtection);
        this.setupEventListeners();
        logger_1.enhancedDbLogger.info('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', {
            rateLimiting: this.config.rateLimiting.redis.enabled,
            ddosProtection: this.config.ddosProtection.enabled,
            emergencyMode: this.config.autoActions.emergencyMode.enabled
        });
    }
    /**
     * RUSSIAN: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π
     */
    mergeConfig(userConfig) {
        const defaultConfig = {
            enabled: true,
            rateLimiting: rateLimiting_enhanced_1.defaultRateLimitConfig,
            ddosProtection: ddosProtection_1.defaultDDoSConfig,
            global: {
                trustProxy: true,
                logLevel: 'info',
                blockDuration: 300,
                whitelistBypass: true
            },
            integration: {
                prometheus: {
                    enabled: false,
                    port: 9090,
                    path: '/metrics'
                },
                elasticsearch: {
                    enabled: false,
                    host: 'localhost:9200',
                    index: 'crypto-mixer-security'
                },
                webhook: {
                    enabled: false,
                    url: ''
                }
            },
            autoActions: {
                escalateToCloudflare: false,
                banPersistentAttackers: true,
                adaptiveThresholds: true,
                emergencyMode: {
                    enabled: true,
                    trigger: {
                        attacksPerMinute: 50,
                        blockedIPsCount: 100
                    },
                    action: 'throttle'
                }
            }
        };
        return {
            ...defaultConfig,
            ...userConfig,
            rateLimiting: { ...defaultConfig.rateLimiting, ...userConfig.rateLimiting },
            ddosProtection: { ...defaultConfig.ddosProtection, ...userConfig.ddosProtection },
            global: { ...defaultConfig.global, ...userConfig.global },
            integration: { ...defaultConfig.integration, ...userConfig.integration },
            autoActions: { ...defaultConfig.autoActions, ...userConfig.autoActions }
        };
    }
    /**
     * RUSSIAN: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –ø–æ–¥—Å–∏—Å—Ç–µ–º
     */
    setupEventListeners() {
        // RUSSIAN: –°–æ–±—ã—Ç–∏—è –æ—Ç DDoS –∑–∞—â–∏—Ç—ã
        this.ddosProtection.on('attack_detected', (attack) => {
            this.handleSecurityEvent({
                type: 'ddos_detected',
                severity: attack.severity,
                source: 'ddos_protection',
                details: attack,
                timestamp: new Date(),
                metadata: {
                    attackType: attack.type,
                    confidence: attack.confidence
                }
            });
        });
        this.ddosProtection.on('ip_blocked', (blockInfo) => {
            this.handleSecurityEvent({
                type: 'ip_blocked',
                severity: 'medium',
                source: 'ddos_protection',
                details: blockInfo,
                timestamp: new Date(),
                metadata: {
                    ip: blockInfo.ip
                }
            });
        });
        // RUSSIAN: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
        setInterval(() => {
            this.checkEmergencyConditions();
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    /**
     * RUSSIAN: –ì–ª–∞–≤–Ω—ã–π middleware –¥–ª—è Express
     */
    middleware() {
        return async (req, res, next) => {
            if (!this.config.enabled) {
                return next();
            }
            const startTime = Date.now();
            this.securityStats.totalRequests++;
            try {
                // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                if (this.emergencyMode.active) {
                    const emergencyResult = this.handleEmergencyMode(req, res);
                    if (!emergencyResult) {
                        return; // –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    }
                }
                // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º DDoS –∑–∞—â–∏—Ç—É –ø–µ—Ä–≤–æ–π
                const ddosResult = await this.applyDDoSProtection(req, res);
                if (!ddosResult.allowed) {
                    this.securityStats.blockedRequests++;
                    return; // DDoS –∑–∞—â–∏—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –æ—Ç–≤–µ—Ç
                }
                // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
                const rateLimitResult = await this.applyRateLimiting(req, res);
                if (!rateLimitResult.allowed) {
                    this.securityStats.rateLimitedRequests++;
                    return; // Rate limiter —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—Ç–≤–µ—Ç
                }
                // RUSSIAN: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                this.recordRequestMetrics(req, startTime);
                // RUSSIAN: –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware
                next();
            }
            catch (error) {
                logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', { error });
                // RUSSIAN: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open)
                next();
            }
        };
    }
    /**
     * RUSSIAN: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ DDoS –∑–∞—â–∏—Ç—ã
     */
    async applyDDoSProtection(req, res) {
        return new Promise((resolve) => {
            const ddosMiddleware = this.ddosProtection.middleware();
            // RUSSIAN: –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DDoS middleware
            const originalSend = res.send;
            const originalJson = res.json;
            let responseSent = false;
            res.send = function (body) {
                responseSent = true;
                resolve({ allowed: false });
                return originalSend.call(this, body);
            };
            res.json = function (body) {
                responseSent = true;
                resolve({ allowed: false });
                return originalJson.call(this, body);
            };
            ddosMiddleware(req, res, () => {
                if (!responseSent) {
                    resolve({ allowed: true });
                }
            });
        });
    }
    /**
     * RUSSIAN: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ rate limiting
     */
    async applyRateLimiting(req, res) {
        return new Promise((resolve) => {
            const rateLimitMiddleware = this.rateLimiter.middleware();
            const originalSend = res.send;
            const originalJson = res.json;
            let responseSent = false;
            res.send = function (body) {
                responseSent = true;
                resolve({ allowed: false });
                return originalSend.call(this, body);
            };
            res.json = function (body) {
                responseSent = true;
                resolve({ allowed: false });
                return originalJson.call(this, body);
            };
            rateLimitMiddleware(req, res, () => {
                if (!responseSent) {
                    resolve({ allowed: true });
                }
            });
        });
    }
    /**
     * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    handleSecurityEvent(event) {
        this.securityEvents.push(event);
        // RUSSIAN: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
        if (this.securityEvents.length > this.maxEventsHistory) {
            this.securityEvents = this.securityEvents.slice(-this.maxEventsHistory);
        }
        // RUSSIAN: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ç–∞–∫
        if (event.type === 'ddos_detected') {
            this.securityStats.ddosAttacksDetected++;
            if (event.metadata?.attackType) {
                const count = this.securityStats.attackTypes.get(event.metadata.attackType) || 0;
                this.securityStats.attackTypes.set(event.metadata.attackType, count + 1);
            }
        }
        if (event.metadata?.ip) {
            const count = this.securityStats.topAttackingIPs.get(event.metadata.ip) || 0;
            this.securityStats.topAttackingIPs.set(event.metadata.ip, count + 1);
        }
        // RUSSIAN: –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        const logLevel = event.severity === 'critical' || event.severity === 'high' ? 'warn' : 'info';
        logger_1.enhancedDbLogger[logLevel](`üö® –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${event.type}`, {
            severity: event.severity,
            source: event.source,
            metadata: event.metadata
        });
        // RUSSIAN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
        if (this.config.integration.webhook.enabled && event.severity === 'critical') {
            this.sendWebhookNotification(event);
        }
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    checkEmergencyConditions() {
        if (!this.config.autoActions.emergencyMode.enabled || this.emergencyMode.active) {
            return;
        }
        const now = Date.now();
        const oneMinuteAgo = now - 60000;
        // RUSSIAN: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ç–∞–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        const recentAttacks = this.securityEvents.filter(event => event.timestamp.getTime() > oneMinuteAgo &&
            (event.type === 'ddos_detected' || event.type === 'rate_limit_exceeded')).length;
        const blockedIPs = this.ddosProtection.getStatistics().blockedIPs;
        const trigger = this.config.autoActions.emergencyMode.trigger;
        if (recentAttacks >= trigger.attacksPerMinute || blockedIPs >= trigger.blockedIPsCount) {
            this.activateEmergencyMode(`–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ—Ä–æ–≥–∏: –∞—Ç–∞–∫–∏=${recentAttacks}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP=${blockedIPs}`);
        }
    }
    /**
     * RUSSIAN: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    activateEmergencyMode(reason) {
        this.emergencyMode = {
            active: true,
            activatedAt: new Date(),
            reason,
            level: 1
        };
        this.securityStats.emergencyModeActivations++;
        logger_1.enhancedDbLogger.error('üö® –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò', {
            reason,
            action: this.config.autoActions.emergencyMode.action,
            timestamp: this.emergencyMode.activatedAt
        });
        this.handleSecurityEvent({
            type: 'emergency_mode',
            severity: 'critical',
            source: 'security_middleware',
            details: { reason, action: this.config.autoActions.emergencyMode.action },
            timestamp: new Date()
        });
        // RUSSIAN: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
        setTimeout(() => {
            this.deactivateEmergencyMode();
        }, 15 * 60 * 1000);
    }
    /**
     * RUSSIAN: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    deactivateEmergencyMode() {
        if (!this.emergencyMode.active)
            return;
        logger_1.enhancedDbLogger.info('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', {
            duration: this.emergencyMode.activatedAt ?
                Date.now() - this.emergencyMode.activatedAt.getTime() : 0
        });
        this.emergencyMode = {
            active: false,
            activatedAt: null,
            reason: '',
            level: 0
        };
    }
    /**
     * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    handleEmergencyMode(req, res) {
        const action = this.config.autoActions.emergencyMode.action;
        switch (action) {
            case 'throttle':
                // RUSSIAN: –ñ–µ—Å—Ç–∫–æ–µ throttling - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                if (!this.isCriticalEndpoint(req.path)) {
                    res.status(503).json({
                        error: 'Service Temporarily Unavailable',
                        message: '–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.',
                        emergencyMode: true,
                        retryAfter: 300
                    });
                    return false; // –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                }
                break;
            case 'lockdown':
                // RUSSIAN: –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                res.status(503).json({
                    error: 'Service Locked Down',
                    message: '–°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∞—Ç–∞–∫–∏.',
                    emergencyMode: true,
                    retryAfter: 900
                });
                return false; // –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            case 'maintenance':
                // RUSSIAN: –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                res.status(503).json({
                    error: 'Service Under Maintenance',
                    message: '–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.',
                    emergencyMode: true,
                    retryAfter: 1800
                });
                return false; // –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        }
        return true; // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
     */
    isCriticalEndpoint(path) {
        const criticalPaths = [
            '/api/v1/health',
            '/api/v1/status',
            '/api/v1/admin',
            '/api/v1/emergency'
        ];
        return criticalPaths.some(criticalPath => path.startsWith(criticalPath));
    }
    /**
     * RUSSIAN: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
     */
    recordRequestMetrics(req, startTime) {
        const responseTime = Date.now() - startTime;
        // RUSSIAN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
        // Rate limiter –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–≤–æ–π middleware
        // DDoS protection —Ç–∞–∫–∂–µ –≤–µ–¥–µ—Ç —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    }
    /**
     * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async sendWebhookNotification(event) {
        if (!this.config.integration.webhook.url)
            return;
        try {
            const payload = {
                event: event.type,
                severity: event.severity,
                timestamp: event.timestamp.toISOString(),
                source: event.source,
                details: event.details,
                metadata: event.metadata,
                systemInfo: {
                    service: 'crypto-mixer',
                    instance: process.env.INSTANCE_ID || 'unknown',
                    version: process.env.VERSION || '1.0.0'
                }
            };
            // RUSSIAN: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
            logger_1.enhancedDbLogger.info('üì§ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
                url: this.config.integration.webhook.url,
                event: event.type
            });
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook', { error });
        }
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    getSecurityStatistics() {
        return {
            general: { ...this.securityStats },
            rateLimiter: this.rateLimiter.getStatistics(),
            ddosProtection: this.ddosProtection.getStatistics(),
            emergencyMode: { ...this.emergencyMode }
        };
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    getSecurityEvents(limit = 100) {
        return this.securityEvents
            .slice(-limit)
            .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
    }
    /**
     * RUSSIAN: –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
     */
    async toggleEmergencyMode(activate, reason) {
        if (activate && !this.emergencyMode.active) {
            this.activateEmergencyMode(reason || '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é');
        }
        else if (!activate && this.emergencyMode.active) {
            this.deactivateEmergencyMode();
        }
    }
    /**
     * RUSSIAN: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    updateConfiguration(newConfig) {
        this.config = this.mergeConfig(newConfig);
        logger_1.enhancedDbLogger.info('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
            rateLimitingEnabled: this.config.rateLimiting.redis.enabled,
            ddosProtectionEnabled: this.config.ddosProtection.enabled
        });
    }
    /**
     * RUSSIAN: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async shutdown() {
        logger_1.enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
        await this.rateLimiter.shutdown();
        await this.ddosProtection.shutdown();
        if (this.emergencyMode.active) {
            this.deactivateEmergencyMode();
        }
        this.isActive = false;
        logger_1.enhancedDbLogger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
}
exports.SecurityMiddleware = SecurityMiddleware;
/**
 * RUSSIAN: –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
function createSecurityMiddleware(config) {
    return new SecurityMiddleware(config);
}
/**
 * RUSSIAN: –•–µ–ª–ø–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 */
function setupSecurity(app, config) {
    const security = createSecurityMiddleware(config);
    // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
    app.use(security.middleware());
    // RUSSIAN: –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    app.get('/api/v1/security/stats', (req, res) => {
        const stats = security.getSecurityStatistics();
        res.json(stats);
    });
    // RUSSIAN: –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    app.get('/api/v1/security/events', (req, res) => {
        const limit = parseInt(req.query.limit) || 100;
        const events = security.getSecurityEvents(limit);
        res.json(events);
    });
    // RUSSIAN: –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    app.post('/api/v1/security/emergency', async (req, res) => {
        const { activate, reason } = req.body;
        await security.toggleEmergencyMode(activate, reason);
        res.json({ success: true, emergencyMode: activate });
    });
    logger_1.enhancedDbLogger.info('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    return security;
}
//# sourceMappingURL=securityMiddleware.js.map