"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultSecurityMonitoringConfig = exports.SecurityMonitoring = void 0;
const events_1 = require("events");
const logger_1 = require("../../utils/logger");
/**
 * RUSSIAN: –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
class SecurityMonitoring extends events_1.EventEmitter {
    constructor(config) {
        super();
        this.isActive = false;
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.intervals = new Map();
        // –ê–ª–µ—Ä—Ç—ã
        this.activeAlerts = new Map();
        this.alertHistory = [];
        this.maxAlertHistory = 10000;
        // –û—Ç—á–µ—Ç—ã
        this.reportHistory = [];
        this.maxReportHistory = 1000;
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.realtimeStats = {
            currentRPS: 0,
            blockedIPs: new Set(),
            errorRate: 0,
            avgResponseTime: 0,
            activeAttacks: new Map(),
            geoDistribution: new Map(),
            userAgentStats: new Map()
        };
        // –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        this.mlPredictor = null;
        this.trainingData = [];
        this.config = config;
        if (this.config.enabled) {
            this.initialize();
        }
    }
    /**
     * RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async initialize() {
        logger_1.enhancedDbLogger.info('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', {
            realTimeInterval: this.config.intervals.realTime,
            alertingEnabled: this.config.alerting.enabled,
            mlEnabled: this.config.analytics.machineLearning
        });
        // RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–∏
        if (this.config.analytics.machineLearning) {
            await this.initializeMachineLearning();
        }
        // RUSSIAN: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.startRealTimeMonitoring();
        this.startStatisticsCollection();
        this.startReportGeneration();
        this.startHealthChecks();
        this.isActive = true;
        logger_1.enhancedDbLogger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    /**
     * RUSSIAN: –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    startRealTimeMonitoring() {
        const interval = setInterval(async () => {
            await this.performRealTimeAnalysis();
        }, this.config.intervals.realTime);
        this.intervals.set('realtime', interval);
        logger_1.enhancedDbLogger.info('üîÑ –†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω', {
            interval: this.config.intervals.realTime
        });
    }
    /**
     * RUSSIAN: –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    startStatisticsCollection() {
        const interval = setInterval(async () => {
            await this.collectStatistics();
        }, this.config.intervals.statistics);
        this.intervals.set('statistics', interval);
    }
    /**
     * RUSSIAN: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
     */
    startReportGeneration() {
        const interval = setInterval(async () => {
            await this.generatePeriodicReport();
        }, this.config.intervals.reporting);
        this.intervals.set('reporting', interval);
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     */
    startHealthChecks() {
        const interval = setInterval(async () => {
            await this.performHealthCheck();
        }, this.config.intervals.healthCheck);
        this.intervals.set('healthcheck', interval);
    }
    /**
     * RUSSIAN: –†–µ–∞–ª-—Ç–∞–π–º –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async performRealTimeAnalysis() {
        try {
            // RUSSIAN: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            const currentMetrics = await this.getCurrentMetrics();
            // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            await this.checkThresholds(currentMetrics);
            // RUSSIAN: ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            if (this.config.analytics.machineLearning && this.mlPredictor) {
                await this.performMLAnalysis(currentMetrics);
            }
            // RUSSIAN: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if (this.config.analytics.patternRecognition) {
                await this.analyzePatterns(currentMetrics);
            }
            // RUSSIAN: –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            this.emit('metrics_updated', currentMetrics);
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª-—Ç–∞–π–º –∞–Ω–∞–ª–∏–∑–∞', { error });
        }
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
     */
    async getCurrentMetrics() {
        // RUSSIAN: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–∏—Å—Ç–µ–º –∑–∞—â–∏—Ç—ã
        return {
            timestamp: new Date(),
            rps: this.realtimeStats.currentRPS,
            blockedIPs: this.realtimeStats.blockedIPs.size,
            errorRate: this.realtimeStats.errorRate,
            avgResponseTime: this.realtimeStats.avgResponseTime,
            activeAttacks: this.realtimeStats.activeAttacks.size,
            geoDistribution: Object.fromEntries(this.realtimeStats.geoDistribution),
            topUserAgents: Array.from(this.realtimeStats.userAgentStats.entries())
                .sort(([, a], [, b]) => b - a)
                .slice(0, 10)
        };
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
     */
    async checkThresholds(metrics) {
        const thresholds = this.config.thresholds;
        // RUSSIAN: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π RPS
        if (metrics.rps > thresholds.criticalRPS) {
            await this.createAlert({
                type: 'ddos_attack',
                severity: 'high',
                title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å RPS',
                description: `RPS –¥–æ—Å—Ç–∏–≥ ${metrics.rps}, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${thresholds.criticalRPS}`,
                source: 'realtime_monitoring',
                metrics,
                attackDetails: {
                    type: 'volumetric',
                    confidence: 0.8,
                    sourceIPs: [],
                    targetEndpoints: [],
                    volume: metrics.rps,
                    duration: 0
                }
            });
        }
        // RUSSIAN: –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
        if (metrics.blockedIPs > thresholds.blockedIPsThreshold) {
            await this.createAlert({
                type: 'suspicious_activity',
                severity: 'medium',
                title: '–ú–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤',
                description: `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${metrics.blockedIPs} IP –∞–¥—Ä–µ—Å–æ–≤, –ø–æ—Ä–æ–≥: ${thresholds.blockedIPsThreshold}`,
                source: 'realtime_monitoring',
                metrics
            });
        }
        // RUSSIAN: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫
        if (metrics.errorRate > thresholds.errorRateThreshold) {
            await this.createAlert({
                type: 'system_anomaly',
                severity: 'medium',
                title: '–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫',
                description: `–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${metrics.errorRate}%, –ø–æ—Ä–æ–≥: ${thresholds.errorRateThreshold}%`,
                source: 'realtime_monitoring',
                metrics
            });
        }
    }
    /**
     * RUSSIAN: –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
     */
    async createAlert(alertData) {
        const alert = {
            id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            type: alertData.type || 'system_anomaly',
            severity: alertData.severity || 'medium',
            title: alertData.title || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            description: alertData.description || '',
            timestamp: new Date(),
            source: alertData.source || 'security_monitoring',
            metrics: alertData.metrics || {
                rps: 0,
                blockedIPs: 0,
                errorRate: 0,
                responseTime: 0,
                uniqueIPs: 0
            },
            status: 'new',
            attackDetails: alertData.attackDetails
        };
        this.activeAlerts.set(alert.id, alert);
        this.alertHistory.push(alert);
        // RUSSIAN: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–ª–µ—Ä—Ç–æ–≤
        if (this.alertHistory.length > this.maxAlertHistory) {
            this.alertHistory = this.alertHistory.slice(-this.maxAlertHistory);
        }
        logger_1.enhancedDbLogger.warn('üö® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', {
            id: alert.id,
            type: alert.type,
            severity: alert.severity,
            title: alert.title
        });
        // RUSSIAN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (this.config.alerting.enabled) {
            await this.sendAlert(alert);
        }
        // RUSSIAN: –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        this.emit('alert_created', alert);
        return alert;
    }
    /**
     * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
     */
    async sendAlert(alert) {
        const alerting = this.config.alerting;
        try {
            // RUSSIAN: Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (alerting.channels.email.enabled) {
                await this.sendEmailAlert(alert);
            }
            // RUSSIAN: Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (alerting.channels.slack.enabled) {
                await this.sendSlackAlert(alert);
            }
            // RUSSIAN: Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (alerting.channels.webhook.enabled) {
                await this.sendWebhookAlert(alert);
            }
            // RUSSIAN: SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
            if (alerting.channels.sms.enabled && alert.severity === 'critical') {
                await this.sendSMSAlert(alert);
            }
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞', { error, alertId: alert.id });
        }
    }
    /**
     * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ Email –∞–ª–µ—Ä—Ç–∞
     */
    async sendEmailAlert(alert) {
        const emailConfig = this.config.alerting.channels.email;
        if (!emailConfig.smtpConfig) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è email –∞–ª–µ—Ä—Ç–æ–≤');
            return;
        }
        const subject = `[CRYPTO-MIXER] ${alert.severity.toUpperCase()}: ${alert.title}`;
        const htmlContent = this.generateEmailContent(alert);
        // RUSSIAN: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç nodemailer
        logger_1.enhancedDbLogger.info('üìß Email –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', {
            alertId: alert.id,
            recipients: emailConfig.recipients.length,
            subject
        });
    }
    /**
     * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ Slack –∞–ª–µ—Ä—Ç–∞
     */
    async sendSlackAlert(alert) {
        const slackConfig = this.config.alerting.channels.slack;
        if (!slackConfig.webhookUrl) {
            logger_1.enhancedDbLogger.warn('‚ö†Ô∏è Slack webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }
        const slackMessage = this.generateSlackMessage(alert);
        // RUSSIAN: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Slack
        logger_1.enhancedDbLogger.info('üí¨ Slack –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', {
            alertId: alert.id,
            channel: slackConfig.channel
        });
    }
    /**
     * RUSSIAN: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ email
     */
    generateEmailContent(alert) {
        return `
      <h2>üö® –ê–ª–µ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Crypto Mixer</h2>
      
      <div style="border-left: 4px solid ${this.getSeverityColor(alert.severity)}; padding-left: 15px;">
        <h3>${alert.title}</h3>
        <p><strong>–£—Ä–æ–≤–µ–Ω—å:</strong> ${alert.severity.toUpperCase()}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> ${alert.timestamp.toLocaleString('ru-RU')}</p>
        <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${alert.source}</p>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${alert.description}</p>
      </div>

      <h4>–ú–µ—Ç—Ä–∏–∫–∏:</h4>
      <ul>
        <li>RPS: ${alert.metrics.rps || 'N/A'}</li>
        <li>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP: ${alert.metrics.blockedIPs || 'N/A'}</li>
        <li>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${alert.metrics.errorRate || 'N/A'}%</li>
        <li>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${alert.metrics.responseTime || 'N/A'}ms</li>
      </ul>

      ${alert.attackDetails ? `
        <h4>–î–µ—Ç–∞–ª–∏ –∞—Ç–∞–∫–∏:</h4>
        <ul>
          <li>–¢–∏–ø: ${alert.attackDetails.type}</li>
          <li>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(alert.attackDetails.confidence * 100)}%</li>
          <li>–û–±—ä–µ–º: ${alert.attackDetails.volume}</li>
          <li>IP –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${alert.attackDetails.sourceIPs.length}</li>
        </ul>
      ` : ''}

      <p><small>–ê–ª–µ—Ä—Ç ID: ${alert.id}</small></p>
    `;
    }
    /**
     * RUSSIAN: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Slack —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    generateSlackMessage(alert) {
        const severityEmoji = {
            low: 'üü°',
            medium: 'üü†',
            high: 'üî¥',
            critical: 'üíÄ'
        };
        return {
            username: this.config.alerting.channels.slack.username,
            channel: this.config.alerting.channels.slack.channel,
            text: `${severityEmoji[alert.severity]} *${alert.title}*`,
            attachments: [{
                    color: this.getSeverityColor(alert.severity),
                    fields: [
                        { title: '–£—Ä–æ–≤–µ–Ω—å', value: alert.severity.toUpperCase(), short: true },
                        { title: '–ò—Å—Ç–æ—á–Ω–∏–∫', value: alert.source, short: true },
                        { title: '–í—Ä–µ–º—è', value: alert.timestamp.toLocaleString('ru-RU'), short: true },
                        { title: 'RPS', value: alert.metrics.rps?.toString() || 'N/A', short: true }
                    ],
                    footer: `Crypto Mixer Security | Alert ID: ${alert.id}`,
                    ts: Math.floor(alert.timestamp.getTime() / 1000)
                }]
        };
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
     */
    getSeverityColor(severity) {
        const colors = {
            low: '#36a64f', // –ó–µ–ª–µ–Ω—ã–π
            medium: '#ff9800', // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            high: '#f44336', // –ö—Ä–∞—Å–Ω—ã–π
            critical: '#9c27b0' // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        };
        return colors[severity] || '#757575';
    }
    /**
     * RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
     */
    async initializeMachineLearning() {
        logger_1.enhancedDbLogger.info('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞—Ç–∞–∫');
        try {
            // RUSSIAN: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞
            this.mlPredictor = {
                features: ['rps', 'errorRate', 'responseTime', 'uniqueIPs', 'blockedIPs'],
                thresholds: new Map(),
                patterns: new Map(),
                lastTraining: new Date()
            };
            logger_1.enhancedDbLogger.info('‚úÖ ML –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML', { error });
            this.config.analytics.machineLearning = false;
        }
    }
    /**
     * RUSSIAN: ML –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
     */
    async performMLAnalysis(metrics) {
        if (!this.mlPredictor)
            return;
        try {
            // RUSSIAN: –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–æ–º–∞–ª–∏–π
            const features = [
                metrics.rps,
                metrics.errorRate,
                metrics.avgResponseTime,
                metrics.uniqueIPs || 0,
                metrics.blockedIPs
            ];
            const anomalyScore = this.calculateAnomalyScore(features);
            if (anomalyScore > 0.8) {
                await this.createAlert({
                    type: 'ddos_attack',
                    severity: 'high',
                    title: 'ML –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏',
                    description: `ML –º–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å—á–µ—Ç: ${anomalyScore.toFixed(2)})`,
                    source: 'ml_predictor',
                    metrics,
                    attackDetails: {
                        type: 'ml_detected',
                        confidence: anomalyScore,
                        sourceIPs: [],
                        targetEndpoints: [],
                        volume: metrics.rps,
                        duration: 0
                    }
                });
            }
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞', { error });
        }
    }
    /**
     * RUSSIAN: –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏
     */
    calculateAnomalyScore(features) {
        // RUSSIAN: –û—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
        let score = 0;
        // –í—ã—Å–æ–∫–∏–π RPS
        if (features[0] > 1000)
            score += 0.3;
        // –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫
        if (features[1] > 10)
            score += 0.2;
        // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if (features[2] > 5000)
            score += 0.2;
        // –ú–Ω–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
        if (features[4] > 50)
            score += 0.3;
        return Math.min(1, score);
    }
    /**
     * RUSSIAN: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞—Ç–∞–∫
     */
    async analyzePatterns(metrics) {
        // RUSSIAN: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    }
    /**
     * RUSSIAN: –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async collectStatistics() {
        // RUSSIAN: –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    }
    /**
     * RUSSIAN: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    async generatePeriodicReport() {
        try {
            const report = await this.createSecurityReport('hourly');
            this.reportHistory.push(report);
            if (this.reportHistory.length > this.maxReportHistory) {
                this.reportHistory = this.reportHistory.slice(-this.maxReportHistory);
            }
            logger_1.enhancedDbLogger.info('üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', {
                reportId: report.id,
                type: report.type,
                period: report.period
            });
            this.emit('report_generated', report);
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞', { error });
        }
    }
    /**
     * RUSSIAN: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async createSecurityReport(type) {
        const now = new Date();
        const periods = {
            hourly: 60 * 60 * 1000,
            daily: 24 * 60 * 60 * 1000,
            weekly: 7 * 24 * 60 * 60 * 1000,
            incident: 60 * 60 * 1000
        };
        const periodMs = periods[type];
        const start = new Date(now.getTime() - periodMs);
        return {
            id: `report_${type}_${now.getTime()}`,
            type,
            period: { start, end: now },
            summary: {
                totalRequests: 0, // –ó–∞–≥–ª—É—à–∫–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ—Ä–µ–º –∏–∑ –º–µ—Ç—Ä–∏–∫
                blockedRequests: 0,
                attacksDetected: 0,
                attacksMitigated: 0,
                averageResponseTime: 0,
                errorRate: 0
            },
            attacks: {
                byType: {},
                byCountry: {},
                topAttackingIPs: [],
                timeline: []
            },
            performance: {
                rpsTimeline: [],
                responseTimeTimeline: [],
                errorRateTimeline: []
            },
            insights: {
                patterns: [],
                recommendations: [],
                riskLevel: 'low'
            }
        };
    }
    /**
     * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     */
    async performHealthCheck() {
        try {
            const health = {
                monitoring: this.isActive,
                alerts: this.activeAlerts.size,
                memoryUsage: process.memoryUsage(),
                uptime: process.uptime()
            };
            this.emit('health_check', health);
        }
        catch (error) {
            logger_1.enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è', { error });
        }
    }
    /**
     * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –∞–ª–µ—Ä—Ç–∞
     */
    async sendWebhookAlert(alert) {
        // RUSSIAN: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger_1.enhancedDbLogger.info('üîó Webhook –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', { alertId: alert.id });
    }
    /**
     * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∞–ª–µ—Ä—Ç–∞
     */
    async sendSMSAlert(alert) {
        // RUSSIAN: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger_1.enhancedDbLogger.info('üì± SMS –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', { alertId: alert.id });
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
     */
    getActiveAlerts() {
        return Array.from(this.activeAlerts.values());
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
     */
    getAlertHistory(limit = 100) {
        return this.alertHistory.slice(-limit);
    }
    /**
     * RUSSIAN: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
     */
    async acknowledgeAlert(alertId, assignedTo) {
        const alert = this.activeAlerts.get(alertId);
        if (!alert)
            return false;
        alert.status = 'acknowledged';
        alert.assignedTo = assignedTo;
        logger_1.enhancedDbLogger.info('‚úÖ –ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', { alertId, assignedTo });
        this.emit('alert_acknowledged', alert);
        return true;
    }
    /**
     * RUSSIAN: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
     */
    async resolveAlert(alertId, notes) {
        const alert = this.activeAlerts.get(alertId);
        if (!alert)
            return false;
        alert.status = 'resolved';
        alert.resolvedAt = new Date();
        if (notes) {
            alert.notes = alert.notes || [];
            alert.notes.push(notes);
        }
        this.activeAlerts.delete(alertId);
        logger_1.enhancedDbLogger.info('‚úÖ –ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω', { alertId, notes });
        this.emit('alert_resolved', alert);
        return true;
    }
    /**
     * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
     */
    getReports(type, limit = 50) {
        let reports = this.reportHistory;
        if (type) {
            reports = reports.filter(r => r.type === type);
        }
        return reports.slice(-limit);
    }
    /**
     * RUSSIAN: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    async shutdown() {
        logger_1.enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
        // RUSSIAN: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.intervals.forEach((interval, name) => {
            clearInterval(interval);
            logger_1.enhancedDbLogger.debug(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${name}`);
        });
        this.intervals.clear();
        this.isActive = false;
        logger_1.enhancedDbLogger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
}
exports.SecurityMonitoring = SecurityMonitoring;
/**
 * RUSSIAN: –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
exports.defaultSecurityMonitoringConfig = {
    enabled: true,
    intervals: {
        realTime: 5000, // 5 —Å–µ–∫—É–Ω–¥
        statistics: 30000, // 30 —Å–µ–∫—É–Ω–¥
        reporting: 3600000, // 1 —á–∞—Å
        healthCheck: 60000 // 1 –º–∏–Ω—É—Ç–∞
    },
    thresholds: {
        criticalRPS: 1000,
        attackConfidence: 0.8,
        blockedIPsThreshold: 50,
        errorRateThreshold: 10,
        responseTimeThreshold: 5000,
        uniqueIPsThreshold: 500
    },
    alerting: {
        enabled: true,
        channels: {
            email: {
                enabled: false,
                recipients: []
            },
            slack: {
                enabled: false,
                channel: '#security-alerts',
                username: 'CryptoMixer Security'
            },
            webhook: {
                enabled: false
            },
            sms: {
                enabled: false,
                recipients: []
            }
        },
        escalation: {
            enabled: true,
            levels: [
                { threshold: 5, delay: 300000, channels: ['email'] }, // 5 –º–∏–Ω—É—Ç
                { threshold: 15, delay: 900000, channels: ['slack'] }, // 15 –º–∏–Ω—É—Ç  
                { threshold: 30, delay: 1800000, channels: ['sms'] } // 30 –º–∏–Ω—É—Ç
            ]
        }
    },
    analytics: {
        geoTracking: true,
        userAgentAnalysis: true,
        patternRecognition: true,
        machineLearning: false,
        behaviorAnalysis: true
    },
    integrations: {
        prometheus: {
            enabled: false,
            jobName: 'crypto-mixer-security'
        },
        grafana: {
            enabled: false
        },
        elasticsearch: {
            enabled: false,
            index: 'crypto-mixer-security-logs'
        },
        splunk: {
            enabled: false
        }
    }
};
//# sourceMappingURL=securityMonitoring.js.map