import { AxiosInstance } from 'axios';
import { SocksProxyAgent } from 'socks-proxy-agent';
import { EventEmitter } from 'events';
import { torManager } from '../utils/TorManager';
import { logger } from '../utils/logger';

/**
 * Tor Blockchain Client –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç—è–º
 * 
 * –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–∞–º–∏ —á–µ—Ä–µ–∑ Tor:
 * - –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 * - –†–æ—Ç–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
 * - –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å—Ö–µ–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */

export interface BlockchainEndpoint {
  url: string;
  type: 'rpc' | 'rest' | 'websocket';
  priority: number;
  isOnion: boolean;
  lastUsed?: Date;
  errorCount: number;
  responseTime: number;
}

export interface CryptocurrencyConfig {
  symbol: string;
  name: string;
  endpoints: BlockchainEndpoint[];
  socksPort: number; // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SOCKS –ø–æ—Ä—Ç –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã
  timeout: number;
  maxRetries: number;
  circuitRotationInterval: number; // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫ (–º—Å)
}

export class TorBlockchainClient extends EventEmitter {
  private currencies: Map<string, CryptocurrencyConfig> = new Map();
  private axiosInstances: Map<string, AxiosInstance> = new Map();
  private rotationTimers: Map<string, NodeJS.Timer> = new Map();
  private endpointStats: Map<string, any> = new Map();
  private isInitialized = false;

  constructor() {
    super();
    this.initializeCurrencyConfigs();
    logger.info('üßÖ TorBlockchainClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
   */
  private initializeCurrencyConfigs(): void {
    // Bitcoin –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.currencies.set('BTC', {
      symbol: 'BTC',
      name: 'Bitcoin',
      socksPort: 9051,
      timeout: 30000,
      maxRetries: 3,
      circuitRotationInterval: 300000, // 5 –º–∏–Ω—É—Ç
      endpoints: [
        // Tor onion services –¥–ª—è Bitcoin
        { 
          url: 'http://bitcoinonion1234567890abcdef.onion:8332', 
          type: 'rpc', 
          priority: 1, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'http://bitcoinonion0987654321fedcba.onion:8332', 
          type: 'rpc', 
          priority: 2, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        // –ü—É–±–ª–∏—á–Ω—ã–µ —É–∑–ª—ã —á–µ—Ä–µ–∑ Tor
        { 
          url: 'https://bitcoin.blockstream.info/api', 
          type: 'rest', 
          priority: 3, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://blockchair.com/bitcoin/raw/node', 
          type: 'rest', 
          priority: 4, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
      ],
    });

    // Ethereum –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.currencies.set('ETH', {
      symbol: 'ETH',
      name: 'Ethereum',
      socksPort: 9054, // –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è ETH
      timeout: 25000,
      maxRetries: 3,
      circuitRotationInterval: 240000, // 4 –º–∏–Ω—É—Ç—ã
      endpoints: [
        { 
          url: 'http://ethereumonion1234567890abcdef.onion:8545', 
          type: 'rpc', 
          priority: 1, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://mainnet.infura.io/v3/' + process.env.INFURA_API_KEY, 
          type: 'rpc', 
          priority: 2, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://eth-mainnet.alchemyapi.io/v2/' + process.env.ALCHEMY_API_KEY, 
          type: 'rpc', 
          priority: 3, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://api.etherscan.io/api', 
          type: 'rest', 
          priority: 4, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
      ],
    });

    // Solana –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.currencies.set('SOL', {
      symbol: 'SOL',
      name: 'Solana',
      socksPort: 9055, // –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è SOL
      timeout: 20000,
      maxRetries: 3,
      circuitRotationInterval: 180000, // 3 –º–∏–Ω—É—Ç—ã
      endpoints: [
        { 
          url: 'http://solanaonion1234567890abcdef.onion:8899', 
          type: 'rpc', 
          priority: 1, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://api.mainnet-beta.solana.com', 
          type: 'rpc', 
          priority: 2, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://solana-api.projectserum.com', 
          type: 'rpc', 
          priority: 3, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
      ],
    });

    // Litecoin –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.currencies.set('LTC', {
      symbol: 'LTC',
      name: 'Litecoin',
      socksPort: 9056,
      timeout: 25000,
      maxRetries: 3,
      circuitRotationInterval: 300000,
      endpoints: [
        { 
          url: 'http://litecoinionion1234567890abcdef.onion:9332', 
          type: 'rpc', 
          priority: 1, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://litecoinspace.org/api', 
          type: 'rest', 
          priority: 2, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
      ],
    });

    // Monero –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å)
    this.currencies.set('XMR', {
      symbol: 'XMR',
      name: 'Monero',
      socksPort: 9057,
      timeout: 30000,
      maxRetries: 3,
      circuitRotationInterval: 120000, // 2 –º–∏–Ω—É—Ç—ã - —á–∞—â–µ —Ä–æ—Ç–∏—Ä—É–µ–º –¥–ª—è XMR
      endpoints: [
        { 
          url: 'http://moneroonion1234567890abcdef.onion:18081', 
          type: 'rpc', 
          priority: 1, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'http://moneroonion0987654321fedcba.onion:18081', 
          type: 'rpc', 
          priority: 2, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'http://node.moneroworld.com:18089/json_rpc', 
          type: 'rpc', 
          priority: 3, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
      ],
    });

    // Zcash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.currencies.set('ZEC', {
      symbol: 'ZEC',
      name: 'Zcash',
      socksPort: 9058,
      timeout: 25000,
      maxRetries: 3,
      circuitRotationInterval: 240000,
      endpoints: [
        { 
          url: 'http://zcashonion1234567890abcdef.onion:8232', 
          type: 'rpc', 
          priority: 1, 
          isOnion: true, 
          errorCount: 0, 
          responseTime: 0 
        },
        { 
          url: 'https://api.zcha.in', 
          type: 'rest', 
          priority: 2, 
          isOnion: false, 
          errorCount: 0, 
          responseTime: 0 
        },
      ],
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  public async initialize(): Promise<void> {
    try {
      logger.info('üßÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TorBlockchainClient...');

      // –°–æ–∑–¥–∞–µ–º axios instances –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
      for (const [symbol, config] of this.currencies) {
        await this.createAxiosInstanceForCurrency(symbol, config);
        this.startCircuitRotationForCurrency(symbol, config);
      }

      this.isInitialized = true;
      logger.info('‚úÖ TorBlockchainClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç');
      this.emit('initialized');

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TorBlockchainClient:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ axios instance –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
   */
  private async createAxiosInstanceForCurrency(symbol: string, config: CryptocurrencyConfig): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SOCKS –∞–≥–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã
      const socksAgent = new SocksProxyAgent(`socks5://127.0.0.1:${config.socksPort}`);
      
      const axiosInstance = torManager.getAxiosInstance('blockchain');
      axiosInstance.defaults.httpAgent = socksAgent;
      axiosInstance.defaults.httpsAgent = socksAgent;
      axiosInstance.defaults.timeout = config.timeout;

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
      axiosInstance.defaults.headers['User-Agent'] = this.generateCurrencySpecificUserAgent(symbol);
      axiosInstance.defaults.headers['Accept'] = 'application/json';
      axiosInstance.defaults.headers['Content-Type'] = 'application/json';

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º interceptors –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.setupCurrencyInterceptors(axiosInstance, symbol);

      this.axiosInstances.set(symbol, axiosInstance);
      logger.info(`‚úÖ Axios instance —Å–æ–∑–¥–∞–Ω –¥–ª—è ${symbol} –Ω–∞ –ø–æ—Ä—Ç—É ${config.socksPort}`);

    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è axios instance –¥–ª—è ${symbol}:`, error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ interceptors –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
   */
  private setupCurrencyInterceptors(axiosInstance: AxiosInstance, symbol: string): void {
    axiosInstance.interceptors.request.use(
      (config) => {
        const startTime = Date.now();
        config.metadata = { startTime, symbol };
        
        logger.debug(`üßÖ ${symbol} –∑–∞–ø—Ä–æ—Å:`, { 
          method: config.method, 
          url: config.url 
        });

        return config;
      },
      (error) => {
        logger.error(`‚ùå ${symbol} –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error);
        return Promise.reject(error);
      }
    );

    axiosInstance.interceptors.response.use(
      (response) => {
        const endTime = Date.now();
        const responseTime = endTime - response.config.metadata.startTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É endpoint'–∞
        this.updateEndpointStats(symbol, response.config.url, responseTime, true);
        
        logger.debug(`‚úÖ ${symbol} –æ—Ç–≤–µ—Ç:`, { 
          status: response.status, 
          responseTime: `${responseTime}ms`,
          url: response.config.url 
        });

        return response;
      },
      async (error) => {
        const endTime = Date.now();
        const responseTime = error.config?.metadata ? 
          endTime - error.config.metadata.startTime : 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ—à–∏–±–∫–æ–π
        this.updateEndpointStats(symbol, error.config?.url, responseTime, false);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —Ä–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É
        if (this.isCriticalError(error)) {
          logger.warn(`üîÑ ${symbol} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —Ä–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É...`);
          await this.rotateCircuitForCurrency(symbol);
        }

        return Promise.reject(error);
      }
    );
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫ –¥–ª—è –≤–∞–ª—é—Ç—ã
   */
  private startCircuitRotationForCurrency(symbol: string, config: CryptocurrencyConfig): void {
    const timer = setInterval(async () => {
      await this.rotateCircuitForCurrency(symbol);
    }, config.circuitRotationInterval);

    this.rotationTimers.set(symbol, timer);
    logger.info(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è ${symbol} (${config.circuitRotationInterval}ms)`);
  }

  /**
   * –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
   */
  private async rotateCircuitForCurrency(symbol: string): Promise<void> {
    try {
      logger.info(`üîÑ –†–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è ${symbol}...`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º NEWNYM –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã
      await torManager.rotateCircuit();
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      logger.info(`‚úÖ –¶–µ–ø–æ—á–∫–∞ –¥–ª—è ${symbol} —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–∞`);
      this.emit('circuitRotated', { symbol });

    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è ${symbol}:`, error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ endpoint'–∞
   */
  private updateEndpointStats(symbol: string, url: string, responseTime: number, success: boolean): void {
    const key = `${symbol}:${url}`;
    const stats = this.endpointStats.get(key) || {
      symbol,
      url,
      requestCount: 0,
      errorCount: 0,
      totalResponseTime: 0,
      averageResponseTime: 0,
      lastUsed: new Date(),
      successRate: 100,
    };

    stats.requestCount++;
    stats.totalResponseTime += responseTime;
    stats.averageResponseTime = stats.totalResponseTime / stats.requestCount;
    stats.lastUsed = new Date();

    if (!success) {
      stats.errorCount++;
    }

    stats.successRate = ((stats.requestCount - stats.errorCount) / stats.requestCount) * 100;

    this.endpointStats.set(key, stats);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã
    const currencyConfig = this.currencies.get(symbol);
    if (currencyConfig) {
      const endpoint = currencyConfig.endpoints.find(ep => ep.url === url);
      if (endpoint) {
        endpoint.responseTime = stats.averageResponseTime;
        endpoint.lastUsed = new Date();
        if (!success) {
          endpoint.errorCount++;
        }
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
   */
  private isCriticalError(error: any): boolean {
    const criticalCodes = ['ECONNREFUSED', 'ETIMEDOUT', 'ENOTFOUND', 'ECONNRESET'];
    return criticalCodes.includes(error.code) || error.response?.status >= 500;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è User-Agent —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –¥–ª—è –≤–∞–ª—é—Ç—ã
   */
  private generateCurrencySpecificUserAgent(symbol: string): string {
    const baseAgents = [
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
    ];

    const agent = baseAgents[Math.floor(Math.random() * baseAgents.length)];
    const version = Math.floor(Math.random() * 10) + 90; // –≤–µ—Ä—Å–∏–∏ 90-99
    
    return `${agent} (KHTML, like Gecko) Chrome/${version}.0.0.0 Safari/537.36 ${symbol}Client/1.0`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ endpoint'–∞ –¥–ª—è –≤–∞–ª—é—Ç—ã
   */
  public getBestEndpoint(symbol: string, type?: 'rpc' | 'rest' | 'websocket'): BlockchainEndpoint | null {
    const config = this.currencies.get(symbol);
    if (!config) {
      return null;
    }

    let endpoints = config.endpoints;
    if (type) {
      endpoints = endpoints.filter(ep => ep.type === type);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ success rate
    endpoints.sort((a, b) => {
      const aStats = this.endpointStats.get(`${symbol}:${a.url}`);
      const bStats = this.endpointStats.get(`${symbol}:${b.url}`);
      
      const aScore = (aStats?.successRate || 100) * (1 / (a.priority || 1));
      const bScore = (bStats?.successRate || 100) * (1 / (b.priority || 1));
      
      return bScore - aScore;
    });

    return endpoints[0] || null;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
   */
  public async makeRequest(symbol: string, endpoint: string, data?: any, options: any = {}): Promise<any> {
    if (!this.isInitialized) {
      throw new Error('TorBlockchainClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    const axiosInstance = this.axiosInstances.get(symbol);
    if (!axiosInstance) {
      throw new Error(`Axios instance –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${symbol}`);
    }

    const config = this.currencies.get(symbol);
    let lastError: Error;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å retry logic
    for (let attempt = 1; attempt <= (config?.maxRetries || 3); attempt++) {
      try {
        logger.debug(`üßÖ ${symbol} –∑–∞–ø—Ä–æ—Å (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, { endpoint, data });
        
        const response = await axiosInstance({
          url: endpoint,
          method: data ? 'POST' : 'GET',
          data,
          ...options,
        });

        logger.debug(`‚úÖ ${symbol} –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:`, { 
          endpoint, 
          status: response.status,
          attempt 
        });

        return response.data;

      } catch (error) {
        lastError = error;
        logger.warn(`‚ö†Ô∏è ${symbol} –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, { 
          endpoint, 
          error: error.message,
          attempt 
        });

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –∏ —Ä–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É
        if (attempt < (config?.maxRetries || 3)) {
          await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
          await this.rotateCircuitForCurrency(symbol);
        }
      }
    }

    throw lastError;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
   */
  public getStats() {
    const stats = {};
    
    for (const [symbol, config] of this.currencies) {
      const currencyStats = {
        symbol,
        name: config.name,
        socksPort: config.socksPort,
        endpoints: config.endpoints.map(ep => ({
          url: ep.url,
          type: ep.type,
          isOnion: ep.isOnion,
          errorCount: ep.errorCount,
          responseTime: ep.responseTime,
          lastUsed: ep.lastUsed,
        })),
        endpointStats: Array.from(this.endpointStats.entries())
          .filter(([key]) => key.startsWith(symbol))
          .map(([key, stat]) => stat),
      };
      
      stats[symbol] = currencyStats;
    }

    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  public async healthCheck(): Promise<any> {
    const results = {};

    for (const [symbol] of this.currencies) {
      try {
        const endpoint = this.getBestEndpoint(symbol);
        if (endpoint) {
          const startTime = Date.now();
          await this.makeRequest(symbol, endpoint.url, null, { timeout: 5000 });
          const responseTime = Date.now() - startTime;
          
          results[symbol] = {
            status: 'healthy',
            responseTime,
            endpoint: endpoint.url,
          };
        } else {
          results[symbol] = {
            status: 'no_endpoints',
            error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints',
          };
        }
      } catch (error) {
        results[symbol] = {
          status: 'unhealthy',
          error: error.message,
        };
      }
    }

    return results;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  public async shutdown(): Promise<void> {
    logger.info('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TorBlockchainClient...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —Ä–æ—Ç–∞—Ü–∏–∏
    for (const [symbol, timer] of this.rotationTimers) {
      clearInterval(timer);
      logger.info(`üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è ${symbol}`);
    }

    this.rotationTimers.clear();
    this.axiosInstances.clear();
    this.isInitialized = false;

    this.emit('shutdown');
    logger.info('‚úÖ TorBlockchainClient –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const torBlockchainClient = new TorBlockchainClient();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
if (process.env.NODE_ENV !== 'test') {
  torBlockchainClient.initialize().catch(error => {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TorBlockchainClient:', error);
  });
}