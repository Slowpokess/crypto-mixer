import { EventEmitter } from 'events';
import { AxiosInstance } from 'axios';
import { torManager } from './TorManager';
import { torBlockchainClient } from '../blockchain/TorBlockchainClient';
import { torMonitoringService } from './TorMonitoringService';
import { logger } from './logger';
import axios from 'axios';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É Tor –∏ –æ–±—ã—á–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
 * 
 * –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö Tor
 * - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
 * - –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å—Ö–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–æ–π
 * - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Tor –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
 * - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
 */

export interface ConnectionStrategy {
  primary: 'tor' | 'direct';
  fallback: 'tor' | 'direct' | 'none';
  timeout: number;
  retries: number;
  healthCheckInterval: number;
  autoRecovery: boolean;
}

export interface ConnectionAttempt {
  timestamp: Date;
  strategy: 'tor' | 'direct';
  success: boolean;
  responseTime: number;
  error?: string;
  endpoint: string;
}

export interface FailoverStats {
  totalAttempts: number;
  torAttempts: number;
  directAttempts: number;
  torSuccessRate: number;
  directSuccessRate: number;
  averageResponseTime: {
    tor: number;
    direct: number;
  };
  currentStrategy: 'tor' | 'direct';
  lastFailover: Date | null;
  failoverCount: number;
  recoveryCount: number;
}

export class ConnectionFailoverManager extends EventEmitter {
  private strategies: Map<string, ConnectionStrategy> = new Map();
  private attempts: ConnectionAttempt[] = [];
  private stats: FailoverStats;
  private currentConnections: Map<string, 'tor' | 'direct'> = new Map();
  private healthCheckTimer: NodeJS.Timer | null = null;
  private maxAttemptsHistory = 1000; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  private readonly DEFAULT_STRATEGIES = {
    web: {
      primary: 'tor' as const,
      fallback: 'direct' as const,
      timeout: 30000,
      retries: 3,
      healthCheckInterval: 60000, // 1 –º–∏–Ω—É—Ç–∞
      autoRecovery: true,
    },
    api: {
      primary: 'tor' as const,
      fallback: 'direct' as const,
      timeout: 15000,
      retries: 2,
      healthCheckInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
      autoRecovery: true,
    },
    blockchain: {
      primary: 'tor' as const,
      fallback: 'direct' as const,
      timeout: 45000,
      retries: 3,
      healthCheckInterval: 120000, // 2 –º–∏–Ω—É—Ç—ã
      autoRecovery: true,
    },
    admin: {
      primary: 'tor' as const,
      fallback: 'none' as const, // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Tor
      timeout: 20000,
      retries: 5,
      healthCheckInterval: 30000,
      autoRecovery: true,
    },
    monitoring: {
      primary: 'direct' as const, // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
      fallback: 'tor' as const,
      timeout: 10000,
      retries: 2,
      healthCheckInterval: 15000,
      autoRecovery: false,
    },
  };

  constructor() {
    super();

    this.stats = {
      totalAttempts: 0,
      torAttempts: 0,
      directAttempts: 0,
      torSuccessRate: 100,
      directSuccessRate: 100,
      averageResponseTime: { tor: 0, direct: 0 },
      currentStrategy: 'tor',
      lastFailover: null,
      failoverCount: 0,
      recoveryCount: 0,
    };

    this.initializeStrategies();
    this.setupEventListeners();
    this.startHealthChecking();

    logger.info('üîÑ ConnectionFailoverManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private initializeStrategies(): void {
    for (const [type, strategy] of Object.entries(this.DEFAULT_STRATEGIES)) {
      this.strategies.set(type, strategy);
      this.currentConnections.set(type, strategy.primary);
    }

    logger.info('‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', 
      Object.keys(this.DEFAULT_STRATEGIES));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventListeners(): void {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Tor –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    torMonitoringService.on('serviceFailed', (event) => {
      this.handleTorServiceFailure(event);
    });

    torMonitoringService.on('serviceRecovered', (event) => {
      this.handleTorServiceRecovery(event);
    });

    torMonitoringService.on('alert', (alert) => {
      if (alert.level === 'critical') {
        this.handleCriticalTorAlert(alert);
      }
    });

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç TorManager
    torManager.on('disconnected', () => {
      this.handleTorDisconnection();
    });

    torManager.on('connected', () => {
      this.handleTorReconnection();
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private startHealthChecking(): void {
    this.healthCheckTimer = setInterval(async () => {
      await this.performHealthCheck();
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    logger.info('üîç –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ axios instance —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
   */
  public async getAxiosInstance(
    requestType: string = 'web',
    endpoint?: string
  ): Promise<{ instance: AxiosInstance; connectionType: 'tor' | 'direct' }> {
    const strategy = this.strategies.get(requestType) || this.strategies.get('web')!;
    const currentConnection = this.currentConnections.get(requestType) || strategy.primary;

    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    try {
      const instance = await this.createAxiosInstance(currentConnection, requestType);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (endpoint) {
        await this.testConnection(instance, endpoint, currentConnection);
      }

      return { instance, connectionType: currentConnection };

    } catch (error) {
      logger.warn(`‚ö†Ô∏è ${requestType} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${currentConnection} –Ω–µ—É–¥–∞—á–Ω–æ:`, error.message);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ fallback
      return await this.attemptFailover(requestType, endpoint, error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ axios instance –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private async createAxiosInstance(connectionType: 'tor' | 'direct', requestType: string): Promise<AxiosInstance> {
    const strategy = this.strategies.get(requestType)!;

    if (connectionType === 'tor') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tor
      const torStats = torManager.getStats();
      if (!torStats.isInitialized || !torStats.connectionInfo.isConnected) {
        throw new Error('Tor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }

      return torManager.getAxiosInstance(requestType as any);
    } else {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π axios instance
      return axios.create({
        timeout: strategy.timeout,
        headers: {
          'User-Agent': this.generateUserAgent(),
          'Accept': 'application/json',
          'Accept-Language': 'en-US,en;q=0.9',
        },
      });
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å—Ö–µ–º—É
   */
  private async attemptFailover(
    requestType: string,
    endpoint?: string,
    originalError?: Error
  ): Promise<{ instance: AxiosInstance; connectionType: 'tor' | 'direct' }> {
    const strategy = this.strategies.get(requestType)!;
    const currentConnection = this.currentConnections.get(requestType)!;
    
    if (strategy.fallback === 'none') {
      throw new Error(`Fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è ${requestType}: ${originalError?.message}`);
    }

    const fallbackConnection = strategy.fallback;
    
    logger.warn(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å ${currentConnection} –Ω–∞ ${fallbackConnection} –¥–ª—è ${requestType}`);

    try {
      const instance = await this.createAxiosInstance(fallbackConnection, requestType);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (endpoint) {
        await this.testConnection(instance, endpoint, fallbackConnection);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
      this.currentConnections.set(requestType, fallbackConnection);
      this.stats.failoverCount++;
      this.stats.lastFailover = new Date();
      this.stats.currentStrategy = fallbackConnection;

      logger.info(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ ${fallbackConnection} –¥–ª—è ${requestType}`);
      this.emit('failover', {
        requestType,
        from: currentConnection,
        to: fallbackConnection,
        reason: originalError?.message,
      });

      return { instance, connectionType: fallbackConnection };

    } catch (fallbackError) {
      logger.error(`‚ùå Fallback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–Ω–æ –¥–ª—è ${requestType}:`, fallbackError.message);
      
      this.emit('failoverFailed', {
        requestType,
        primaryError: originalError?.message,
        fallbackError: fallbackError.message,
      });

      throw new Error(`–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã –¥–ª—è ${requestType}: ${fallbackError.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private async testConnection(
    instance: AxiosInstance,
    endpoint: string,
    connectionType: 'tor' | 'direct'
  ): Promise<void> {
    const startTime = Date.now();
    
    try {
      // –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      await instance.get(endpoint, {
        timeout: 5000,
        validateStatus: (status) => status < 500, // –ü—Ä–∏–Ω–∏–º–∞–µ–º 4xx –∫–∞–∫ —É—Å–ø–µ—Ö
      });

      const responseTime = Date.now() - startTime;
      this.recordAttempt(endpoint, connectionType, true, responseTime);

    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.recordAttempt(endpoint, connectionType, false, responseTime, error.message);
      throw error;
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  private recordAttempt(
    endpoint: string,
    strategy: 'tor' | 'direct',
    success: boolean,
    responseTime: number,
    error?: string
  ): void {
    const attempt: ConnectionAttempt = {
      timestamp: new Date(),
      strategy,
      success,
      responseTime,
      error,
      endpoint,
    };

    this.attempts.push(attempt);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.attempts.length > this.maxAttemptsHistory) {
      this.attempts.shift();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateStats();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private updateStats(): void {
    this.stats.totalAttempts = this.attempts.length;
    
    const torAttempts = this.attempts.filter(a => a.strategy === 'tor');
    const directAttempts = this.attempts.filter(a => a.strategy === 'direct');
    
    this.stats.torAttempts = torAttempts.length;
    this.stats.directAttempts = directAttempts.length;

    // –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    const torSuccessful = torAttempts.filter(a => a.success).length;
    const directSuccessful = directAttempts.filter(a => a.success).length;

    this.stats.torSuccessRate = torAttempts.length > 0 ? 
      (torSuccessful / torAttempts.length) * 100 : 100;
    this.stats.directSuccessRate = directAttempts.length > 0 ? 
      (directSuccessful / directAttempts.length) * 100 : 100;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    const torResponseTimes = torAttempts.map(a => a.responseTime);
    const directResponseTimes = directAttempts.map(a => a.responseTime);

    this.stats.averageResponseTime.tor = torResponseTimes.length > 0 ?
      torResponseTimes.reduce((sum, time) => sum + time, 0) / torResponseTimes.length : 0;
    this.stats.averageResponseTime.direct = directResponseTimes.length > 0 ?
      directResponseTimes.reduce((sum, time) => sum + time, 0) / directResponseTimes.length : 0;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—è Tor —Å–µ—Ä–≤–∏—Å–∞
   */
  private handleTorServiceFailure(event: any): void {
    logger.warn('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ–π Tor —Å–µ—Ä–≤–∏—Å–∞:', event.serviceName);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ direct
    const criticalTypes = ['web', 'api', 'blockchain'];
    
    for (const type of criticalTypes) {
      const strategy = this.strategies.get(type);
      const currentConnection = this.currentConnections.get(type);
      
      if (strategy && currentConnection === 'tor' && strategy.fallback !== 'none') {
        this.currentConnections.set(type, strategy.fallback);
        logger.info(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏ ${type} —Å tor –Ω–∞ ${strategy.fallback}`);
        
        this.emit('automaticFailover', {
          requestType: type,
          reason: `Tor service failure: ${event.serviceName}`,
        });
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Tor —Å–µ—Ä–≤–∏—Å–∞
   */
  private handleTorServiceRecovery(event: any): void {
    logger.info('‚úÖ Tor —Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', event.serviceName);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ Tor –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å autoRecovery
    for (const [type, strategy] of this.strategies) {
      if (strategy.autoRecovery && strategy.primary === 'tor') {
        const currentConnection = this.currentConnections.get(type);
        
        if (currentConnection !== 'tor') {
          this.currentConnections.set(type, 'tor');
          this.stats.recoveryCount++;
          
          logger.info(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ${type} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ tor`);
          
          this.emit('automaticRecovery', {
            requestType: type,
            reason: `Tor service recovered: ${event.serviceName}`,
          });
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ Tor
   */
  private handleCriticalTorAlert(alert: any): void {
    logger.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç Tor:', alert.message);

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ direct
    if (alert.service === 'multiple_failures' || alert.service === 'essential_failures') {
      this.emergencyFailoverAll();
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private emergencyFailoverAll(): void {
    logger.warn('üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ direct');

    for (const [type, strategy] of this.strategies) {
      if (strategy.fallback !== 'none') {
        this.currentConnections.set(type, 'direct');
      }
    }

    this.emit('emergencyFailover', {
      reason: 'Critical Tor infrastructure failure',
      timestamp: new Date(),
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Tor
   */
  private handleTorDisconnection(): void {
    logger.warn('üîå Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–∞ direct –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
    for (const [type, strategy] of this.strategies) {
      if (strategy.fallback === 'direct') {
        this.currentConnections.set(type, 'direct');
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Tor
   */
  private handleTorReconnection(): void {
    logger.info('üîå Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ Tor –≥–¥–µ –≤–∫–ª—é—á–µ–Ω–æ autoRecovery
    for (const [type, strategy] of this.strategies) {
      if (strategy.autoRecovery && strategy.primary === 'tor') {
        this.currentConnections.set(type, 'tor');
      }
    }
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private async performHealthCheck(): Promise<void> {
    try {
      logger.debug('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      for (const [type, connectionType] of this.currentConnections) {
        try {
          const instance = await this.createAxiosInstance(connectionType, type);
          
          // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –∑–∞–ø—Ä–æ—Å –∫ google.com –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –Ω–∞–¥–µ–∂–Ω–æ–º—É —Ö–æ—Å—Ç—É
          const testUrl = connectionType === 'tor' ? 
            'https://check.torproject.org/api/ip' : 
            'https://httpbin.org/ip';
          
          await this.testConnection(instance, testUrl, connectionType);
          
        } catch (error) {
          logger.warn(`‚ö†Ô∏è Health check –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${type}:${connectionType}:`, error.message);
          
          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
          const strategy = this.strategies.get(type);
          if (strategy && strategy.fallback !== 'none' && connectionType !== strategy.fallback) {
            this.currentConnections.set(type, strategy.fallback);
            logger.info(`üîÑ Health check –ø–µ—Ä–µ–∫–ª—é—á–∏–ª ${type} –Ω–∞ ${strategy.fallback}`);
          }
        }
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ health check:', error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
   */
  private generateUserAgent(): string {
    const agents = [
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    ];
    return agents[Math.floor(Math.random() * agents.length)];
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public forceConnectionType(requestType: string, connectionType: 'tor' | 'direct'): void {
    const strategy = this.strategies.get(requestType);
    if (!strategy) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${requestType}`);
    }

    if (connectionType === 'direct' && strategy.fallback === 'none') {
      throw new Error(`Direct —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã –¥–ª—è ${requestType}`);
    }

    this.currentConnections.set(requestType, connectionType);
    logger.info(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${connectionType} –¥–ª—è ${requestType}`);

    this.emit('manualOverride', { requestType, connectionType });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
   */
  public getCurrentConnections(): Map<string, 'tor' | 'direct'> {
    return new Map(this.currentConnections);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  public getStats(): FailoverStats {
    return { ...this.stats };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
   */
  public getAttemptHistory(limit: number = 100): ConnectionAttempt[] {
    return this.attempts.slice(-limit);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  public shutdown(): void {
    if (this.healthCheckTimer) {
      clearInterval(this.healthCheckTimer);
      this.healthCheckTimer = null;
    }

    logger.info('üõë ConnectionFailoverManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    this.emit('shutdown');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const connectionFailoverManager = new ConnectionFailoverManager();