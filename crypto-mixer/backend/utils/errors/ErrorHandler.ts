/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–∏–∫—Å–µ—Ä–∞
 * 
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
 * - Retry –ª–æ–≥–∏–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫  
 * - –ê–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
 * - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - Audit trail –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

import * as winston from 'winston';
import { EventEmitter } from 'events';
import { 
  BaseError, 
  ErrorSeverity, 
  ErrorCategory, 
  ErrorCode,
  ErrorContext,
  ErrorRecoveryStrategy 
} from './ErrorTypes';

export interface ErrorMetrics {
  totalErrors: number;
  errorsByCategory: Record<string, number>;
  errorsBySeverity: Record<string, number>;
  errorsByCode: Record<string, number>;
  criticalErrorsCount: number;
  recoverableErrorsCount: number;
  lastError?: {
    timestamp: Date;
    code: string;
    message: string;
    severity: string;
  };
}

export interface AlertConfig {
  enabled: boolean;
  webhookUrl?: string;
  emailRecipients?: string[];
  slackChannel?: string;
  criticalErrorThreshold: number;
  errorRateThreshold: number;
  timeWindowMinutes: number;
}

export interface RetryResult<T = any> {
  success: boolean;
  result?: T;
  error?: BaseError;
  attempts: number;
  totalTime: number;
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 */
export class ErrorHandler extends EventEmitter {
  private logger: winston.Logger;
  private metrics: ErrorMetrics;
  private alertConfig: AlertConfig;
  private errorHistory: BaseError[] = [];
  private readonly maxHistorySize = 1000;

  constructor(
    logger: winston.Logger,
    alertConfig: Partial<AlertConfig> = {}
  ) {
    super();
    
    this.logger = logger;
    this.alertConfig = {
      enabled: true,
      criticalErrorThreshold: 5,
      errorRateThreshold: 50,
      timeWindowMinutes: 15,
      ...alertConfig
    };
    
    this.metrics = this.initializeMetrics();
    this.setupEventListeners();
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  public async handleError(
    error: Error | BaseError,
    context: Partial<ErrorContext> = {}
  ): Promise<void> {
    const processedError = this.normalizeError(error, context);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    this.updateMetrics(processedError);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.addToHistory(processedError);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    await this.logError(processedError);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–ª–µ—Ä—Ç–æ–≤
    await this.checkAndSendAlerts(processedError);
    
    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    this.emit('error', processedError);
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏ –Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è - —ç–º–∏—Ç–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if (processedError.severity === ErrorSeverity.CRITICAL && !processedError.isOperational) {
      this.emit('criticalError', processedError);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   */
  public async executeWithRetry<T>(
    operation: () => Promise<T>,
    context: Partial<ErrorContext>,
    customRetryStrategy?: Partial<ErrorRecoveryStrategy>
  ): Promise<RetryResult<T>> {
    const startTime = Date.now();
    let lastError: BaseError | undefined;
    let attempts = 0;

    const defaultStrategy: ErrorRecoveryStrategy = {
      canRecover: true,
      maxRetries: 3,
      retryDelay: 1000,
      ...customRetryStrategy
    };

    while (attempts <= (defaultStrategy.maxRetries || 0)) {
      attempts++;
      
      try {
        const result = await operation();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ retry
        if (attempts > 1) {
          this.logger.info('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ retry', {
            context: context.component,
            operation: context.operation,
            attempts,
            totalTime: Date.now() - startTime
          });
        }
        
        return {
          success: true,
          result,
          attempts,
          totalTime: Date.now() - startTime
        };
        
      } catch (error) {
        lastError = this.normalizeError(error as Error, {
          ...context,
          additionalInfo: { attempt: attempts, maxRetries: defaultStrategy.maxRetries }
        });
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–∞—è
        if (attempts > (defaultStrategy.maxRetries || 0) || !lastError.canRecover()) {
          await this.handleError(lastError);
          break;
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É retry
        this.logger.warn('–ü–æ–ø—ã—Ç–∫–∞ retry –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏', {
          error: lastError.toLogObject(),
          attempt: attempts,
          maxRetries: defaultStrategy.maxRetries,
          nextRetryIn: defaultStrategy.retryDelay
        });
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if (defaultStrategy.retryDelay) {
          await this.delay(defaultStrategy.retryDelay * attempts); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        }
      }
    }

    return {
      success: false,
      error: lastError,
      attempts,
      totalTime: Date.now() - startTime
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫
   */
  public getMetrics(): ErrorMetrics {
    return { ...this.metrics };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
   */
  public getRecentErrors(limit: number = 50): BaseError[] {
    return this.errorHistory.slice(-limit);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—à–∏–±–æ–∫
   */
  public getErrorStatistics(timeWindowHours: number = 24): {
    totalInWindow: number;
    byCategory: Record<string, number>;
    bySeverity: Record<string, number>;
    criticalCount: number;
    averagePerHour: number;
  } {
    const cutoffTime = new Date(Date.now() - (timeWindowHours * 60 * 60 * 1000));
    const recentErrors = this.errorHistory.filter(error => error.timestamp > cutoffTime);

    const byCategory: Record<string, number> = {};
    const bySeverity: Record<string, number> = {};
    let criticalCount = 0;

    recentErrors.forEach(error => {
      byCategory[error.category] = (byCategory[error.category] || 0) + 1;
      bySeverity[error.severity] = (bySeverity[error.severity] || 0) + 1;
      
      if (error.severity === ErrorSeverity.CRITICAL) {
        criticalCount++;
      }
    });

    return {
      totalInWindow: recentErrors.length,
      byCategory,
      bySeverity,
      criticalCount,
      averagePerHour: recentErrors.length / timeWindowHours
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫
   */
  public clearHistory(): void {
    this.errorHistory = [];
    this.metrics = this.initializeMetrics();
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ª—é–±—É—é –æ—à–∏–±–∫—É –≤ BaseError
   */
  private normalizeError(error: Error | BaseError, context: Partial<ErrorContext>): BaseError {
    if (error instanceof BaseError) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—à–∏–±–∫–∏
      const updatedContext = { ...error.context, ...context };
      (error as any).context = updatedContext;
      return error;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É –∏–∑ –æ–±—ã—á–Ω–æ–π Error
    const UnknownError = class extends BaseError {
      constructor(message: string, originalError: Error) {
        super(
          message,
          ErrorCode.UNKNOWN_ERROR,
          ErrorSeverity.MEDIUM,
          ErrorCategory.PERFORMANCE,
          {
            timestamp: new Date(),
            component: 'unknown',
            operation: 'unknown',
            additionalInfo: {
              originalErrorName: originalError.name,
              originalStack: originalError.stack
            },
            ...context
          }
        );
      }
    };

    return new UnknownError(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', error);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å—é
   */
  private async logError(error: BaseError): Promise<void> {
    const logObject = error.toLogObject();
    
    switch (error.severity) {
      case ErrorSeverity.CRITICAL:
        this.logger.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê', logObject);
        break;
      case ErrorSeverity.HIGH:
        this.logger.error('‚ùå –°–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞', logObject);
        break;
      case ErrorSeverity.MEDIUM:
        this.logger.warn('‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', logObject);
        break;
      case ErrorSeverity.LOW:
        this.logger.info('‚ÑπÔ∏è –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞', logObject);
        break;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
   */
  private updateMetrics(error: BaseError): void {
    this.metrics.totalErrors++;
    
    this.metrics.errorsByCategory[error.category] = 
      (this.metrics.errorsByCategory[error.category] || 0) + 1;
    
    this.metrics.errorsBySeverity[error.severity] = 
      (this.metrics.errorsBySeverity[error.severity] || 0) + 1;
    
    this.metrics.errorsByCode[error.code] = 
      (this.metrics.errorsByCode[error.code] || 0) + 1;

    if (error.severity === ErrorSeverity.CRITICAL) {
      this.metrics.criticalErrorsCount++;
    }

    if (error.canRecover()) {
      this.metrics.recoverableErrorsCount++;
    }

    this.metrics.lastError = {
      timestamp: error.timestamp,
      code: error.code,
      message: error.message,
      severity: error.severity
    };
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  private addToHistory(error: BaseError): void {
    this.errorHistory.push(error);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.errorHistory.length > this.maxHistorySize) {
      this.errorHistory = this.errorHistory.slice(-this.maxHistorySize);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private async checkAndSendAlerts(error: BaseError): Promise<void> {
    if (!this.alertConfig.enabled) {
      return;
    }

    // –ê–ª–µ—Ä—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (error.severity === ErrorSeverity.CRITICAL) {
      await this.sendAlert('critical', `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, error);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞ –≤—Ä–µ–º—è –æ–∫–Ω–∞
    const recentCriticalErrors = this.getErrorStatistics(
      this.alertConfig.timeWindowMinutes / 60
    ).criticalCount;

    if (recentCriticalErrors >= this.alertConfig.criticalErrorThreshold) {
      await this.sendAlert(
        'threshold', 
        `‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${recentCriticalErrors} –∑–∞ ${this.alertConfig.timeWindowMinutes} –º–∏–Ω—É—Ç`,
        error
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç
   */
  private async sendAlert(type: string, message: string, error: BaseError): Promise<void> {
    try {
      this.emit('alert', { type, message, error });
      
      this.logger.error('üì¢ –ê–õ–ï–†–¢ –û–¢–ü–†–ê–í–õ–ï–ù', {
        alertType: type,
        message,
        error: error.toLogObject()
      });
      
    } catch (alertError) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞', alertError);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
   */
  private initializeMetrics(): ErrorMetrics {
    return {
      totalErrors: 0,
      errorsByCategory: {},
      errorsBySeverity: {},
      errorsByCode: {},
      criticalErrorsCount: 0,
      recoverableErrorsCount: 0
    };
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventListeners(): void {
    // –°–ª—É—à–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.on('criticalError', (error: BaseError) => {
      this.logger.error('üÜò –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ù–ò–ú–ê–ù–ò–ï –¢–†–ï–ë–£–ï–¢–°–Ø', {
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ-–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
        error: error.toLogObject(),
        action: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ'
      });
    });
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è retry –ª–æ–≥–∏–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä error handler'–∞
 */
let globalErrorHandler: ErrorHandler | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π error handler
 */
export function initializeErrorHandler(
  logger: winston.Logger, 
  alertConfig?: Partial<AlertConfig>
): ErrorHandler {
  globalErrorHandler = new ErrorHandler(logger, alertConfig);
  return globalErrorHandler;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π error handler
 */
export function getErrorHandler(): ErrorHandler {
  if (!globalErrorHandler) {
    throw new Error('ErrorHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeErrorHandler() —Å–Ω–∞—á–∞–ª–∞.');
  }
  return globalErrorHandler;
}

/**
 * –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
export async function handleError(
  error: Error | BaseError,
  context?: Partial<ErrorContext>
): Promise<void> {
  const handler = getErrorHandler();
  await handler.handleError(error, context);
}

/**
 * –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è retry –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function withRetry<T>(
  operation: () => Promise<T>,
  context: Partial<ErrorContext>,
  retryStrategy?: Partial<ErrorRecoveryStrategy>
): Promise<RetryResult<T>> {
  const handler = getErrorHandler();
  return handler.executeWithRetry(operation, context, retryStrategy);
}