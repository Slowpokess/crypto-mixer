import { EventEmitter } from 'events';
import { torManager } from './TorManager';
import { torMonitoringService } from './TorMonitoringService';
import { connectionFailoverManager } from './ConnectionFailoverManager';
import logger from './logger';
import * as net from 'net';
import fs from 'fs/promises';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Å—Ö–µ–º Tor –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 * 
 * –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è Tor –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
 * - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ hidden services —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
 * - –†–µ–∑–µ—Ä–≤–Ω—ã–µ SOCKS –ø–æ—Ä—Ç—ã –∏ Tor instances
 * - Geographical failover —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ Tor —Å–µ—Ä–≤–µ—Ä—ã
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
 * - Load balancing –º–µ–∂–¥—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ onion –∞–¥—Ä–µ—Å–∞–º–∏
 * - –ì–æ—Ä—è—á–µ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */

export interface TorInstance {
  id: string;
  name: string;
  socksPort: number;
  controlPort: number;
  dataDirectory: string;
  configFile: string;
  status: 'active' | 'standby' | 'failed' | 'unknown';
  priority: number;
  lastHealthCheck: Date;
  errorCount: number;
  uptime: number;
  region?: string; // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω
}

export interface HiddenServiceCluster {
  serviceName: string;
  primary: string; // –û—Å–Ω–æ–≤–Ω–æ–π onion –∞–¥—Ä–µ—Å
  backups: string[]; // –†–µ–∑–µ—Ä–≤–Ω—ã–µ onion –∞–¥—Ä–µ—Å–∞
  currentActive: string;
  ports: number[];
  lastFailover: Date | null;
  failoverCount: number;
  loadBalancing: boolean;
}

export interface RedundancyConfig {
  enableMultipleInstances: boolean;
  minActiveInstances: number;
  maxFailureThreshold: number;
  healthCheckInterval: number;
  failoverTimeout: number;
  enableLoadBalancing: boolean;
  enableGeoFailover: boolean;
  regions: string[];
}

export class TorRedundancyManager extends EventEmitter {
  private instances: Map<string, TorInstance> = new Map();
  private hiddenServiceClusters: Map<string, HiddenServiceCluster> = new Map();
  private config: RedundancyConfig;
  private healthCheckTimer: NodeJS.Timeout | null = null;
  private isInitialized = false;
  private currentPrimaryInstance: string | null = null;

  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  private getErrorMessage(error: unknown): string {
    if (error instanceof Error) {
      return error.message;
    }
    if (typeof error === 'string') {
      return error;
    }
    return String(error);
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Tor instances
  private readonly INSTANCE_CONFIGS = [
    {
      id: 'primary',
      name: 'Primary Tor Instance',
      socksPort: 9050,
      controlPort: 9053,
      dataDirectory: '/var/lib/tor/primary',
      configFile: '/etc/tor/torrc',
      priority: 1,
      region: 'primary',
    },
    {
      id: 'backup1',
      name: 'Backup Tor Instance 1',
      socksPort: 9060,
      controlPort: 9063,
      dataDirectory: '/var/lib/tor/backup1',
      configFile: '/etc/tor/torrc-backup1',
      priority: 2,
      region: 'eu',
    },
    {
      id: 'backup2',
      name: 'Backup Tor Instance 2',
      socksPort: 9070,
      controlPort: 9073,
      dataDirectory: '/var/lib/tor/backup2',
      configFile: '/etc/tor/torrc-backup2',
      priority: 3,
      region: 'us',
    },
    {
      id: 'emergency',
      name: 'Emergency Tor Instance',
      socksPort: 9080,
      controlPort: 9083,
      dataDirectory: '/var/lib/tor/emergency',
      configFile: '/etc/tor/torrc-emergency',
      priority: 4,
      region: 'asia',
    },
  ];

  constructor(config: Partial<RedundancyConfig> = {}) {
    super();

    this.config = {
      enableMultipleInstances: process.env.TOR_REDUNDANCY_ENABLED === 'true',
      minActiveInstances: 2,
      maxFailureThreshold: 3,
      healthCheckInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
      failoverTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
      enableLoadBalancing: true,
      enableGeoFailover: true,
      regions: ['primary', 'eu', 'us', 'asia'],
      ...config,
    };

    logger.info('üîÑ TorRedundancyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      multipleInstances: this.config.enableMultipleInstances,
      minActiveInstances: this.config.minActiveInstances,
      loadBalancing: this.config.enableLoadBalancing,
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  public async initialize(): Promise<void> {
    if (!this.config.enableMultipleInstances) {
      logger.info('üîÑ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ Tor –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    try {
      logger.info('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è Tor...');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ Tor instances
      await this.initializeInstances();

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await this.createBackupConfigurations();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º hidden service –∫–ª–∞—Å—Ç–µ—Ä—ã
      await this.initializeHiddenServiceClusters();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
      this.startHealthMonitoring();

      // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Tor
      this.setupMonitoringIntegration();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π primary instance
      await this.selectPrimaryInstance();

      this.isInitialized = true;
      logger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è Tor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      this.emit('initialized');

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è Tor:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö Tor instances
   */
  private async initializeInstances(): Promise<void> {
    for (const instanceConfig of this.INSTANCE_CONFIGS) {
      const instance: TorInstance = {
        ...instanceConfig,
        status: 'unknown',
        lastHealthCheck: new Date(),
        errorCount: 0,
        uptime: 0,
      };

      this.instances.set(instance.id, instance);
      logger.info(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Tor instance: ${instance.name}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Tor
   */
  private async createBackupConfigurations(): Promise<void> {
    try {
      // –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const mainConfig = await fs.readFile('/Users/macbook/Documents/CM/crypto-mixer/security/tor/torrc', 'utf-8');

      for (const instanceConfig of this.INSTANCE_CONFIGS.slice(1)) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º primary
        const backupConfig = this.generateBackupTorrcConfig(mainConfig, instanceConfig);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ Docker/Kubernetes —ç—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        const configPath = instanceConfig.configFile;
        logger.info(`üìù –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${configPath}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ)
        // await fs.writeFile(configPath, backupConfig);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(`üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ${instanceConfig.name}:`, {
          configLength: backupConfig.length,
          socksPort: instanceConfig.socksPort,
          controlPort: instanceConfig.controlPort,
          region: instanceConfig.region
        });
        
        logger.info(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${instanceConfig.name}`);
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tor
   */
  private generateBackupTorrcConfig(baseConfig: string, instance: any): string {
    // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let backupConfig = baseConfig
      .replace(/SocksPort 0\.0\.0\.0:9050/g, `SocksPort 0.0.0.0:${instance.socksPort}`)
      .replace(/SocksPort 0\.0\.0\.0:9051/g, `SocksPort 0.0.0.0:${instance.socksPort + 1}`)
      .replace(/SocksPort 0\.0\.0\.0:9052/g, `SocksPort 0.0.0.0:${instance.socksPort + 2}`)
      .replace(/ControlPort 0\.0\.0\.0:9053/g, `ControlPort 0.0.0.0:${instance.controlPort}`)
      .replace(/DataDirectory \/var\/lib\/tor/g, `DataDirectory ${instance.dataDirectory}`)
      .replace(/HiddenServiceDir \/var\/lib\/tor\/mixer_/g, `HiddenServiceDir ${instance.dataDirectory}/mixer_`);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è instance –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    backupConfig += `\n\n# Backup instance specific settings for ${instance.name}\n`;
    backupConfig += `Nickname ${instance.id}-mixer\n`;
    backupConfig += `# Region: ${instance.region}\n`;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è geographic diversity
    if (instance.region === 'eu') {
      backupConfig += 'EntryNodes {eu}\n';
      backupConfig += 'ExitNodes {eu}\n';
    } else if (instance.region === 'us') {
      backupConfig += 'EntryNodes {us}\n';
      backupConfig += 'ExitNodes {us}\n';
    } else if (instance.region === 'asia') {
      backupConfig += 'EntryNodes {??}\n'; // –õ—é–±–∞—è —Å—Ç—Ä–∞–Ω–∞ –∫—Ä–æ–º–µ US/EU
      backupConfig += 'ExitNodes {??}\n';
    }

    return backupConfig;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ hidden services
   */
  private async initializeHiddenServiceClusters(): Promise<void> {
    const serviceTypes = ['web', 'api', 'admin', 'monitoring'];

    for (const serviceType of serviceTypes) {
      const cluster: HiddenServiceCluster = {
        serviceName: `mixer_${serviceType}`,
        primary: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        backups: [],
        currentActive: '',
        ports: serviceType === 'monitoring' ? [80] : [80, 443],
        lastFailover: null,
        failoverCount: 0,
        loadBalancing: this.config.enableLoadBalancing,
      };

      this.hiddenServiceClusters.set(serviceType, cluster);
      logger.info(`üßÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–ª–∞—Å—Ç–µ—Ä hidden service: ${serviceType}`);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private setupMonitoringIntegration(): void {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è TorMonitoringService
    torMonitoringService.on('serviceFailed', (event) => {
      logger.warn('üö® TorMonitoringService —Å–æ–æ–±—â–∞–µ—Ç –æ —Å–±–æ–µ —Å–µ—Ä–≤–∏—Å–∞:', event);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Å–±–æ–π
      this.handleExternalServiceFailure(event);
    });

    torMonitoringService.on('serviceRecovered', (event) => {
      logger.info('‚úÖ TorMonitoringService —Å–æ–æ–±—â–∞–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞:', event);
      // –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã instances
      this.evaluateFailoverNeed();
    });

    logger.info('üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TorMonitoringService –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ–µ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private async handleExternalServiceFailure(event: any): Promise<void> {
    // –ï—Å–ª–∏ —É–ø–∞–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω failover
    if (event.serviceName === 'socks_9050' || event.serviceName === 'control_port') {
      logger.warn('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —É–ø–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å failover');
      await this.evaluateFailoverNeed();
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö instances
   */
  private startHealthMonitoring(): void {
    this.healthCheckTimer = setInterval(async () => {
      await this.performHealthCheck();
    }, this.config.healthCheckInterval);

    logger.info('üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è Tor instances');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö Tor instances
   */
  private async performHealthCheck(): Promise<void> {
    try {
      logger.debug('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö Tor instances...');

      const healthCheckPromises: Promise<void>[] = [];

      for (const [instanceId, instance] of this.instances) {
        healthCheckPromises.push(this.checkInstanceHealth(instanceId, instance));
      }

      await Promise.allSettled(healthCheckPromises);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ failover
      await this.evaluateFailoverNeed();

      // –û–±–Ω–æ–≤–ª—è–µ–º hidden service –∫–ª–∞—Å—Ç–µ—Ä—ã
      await this.updateHiddenServiceClusters();

      this.emit('healthCheckCompleted', this.getStats());

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è instances:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ instance
   */
  private async checkInstanceHealth(instanceId: string, instance: TorInstance): Promise<void> {
    const startTime = Date.now();

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SOCKS –ø–æ—Ä—Ç–∞
      await this.checkPort(instance.socksPort);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å control –ø–æ—Ä—Ç–∞
      await this.checkPort(instance.controlPort);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ TorManager –¥–ª—è primary instance
      if (instanceId === this.currentPrimaryInstance) {
        await torManager.testConnection();
      }

      // –ï—Å–ª–∏ –≤—Å—ë –û–ö, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      instance.status = 'active';
      instance.lastHealthCheck = new Date();
      instance.errorCount = Math.max(0, instance.errorCount - 1); // –°–Ω–∏–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      
      const responseTime = Date.now() - startTime;
      logger.debug(`‚úÖ Instance ${instanceId} –∑–¥–æ—Ä–æ–≤ (${responseTime}ms)`);

    } catch (error) {
      instance.status = 'failed';
      instance.errorCount++;
      instance.lastHealthCheck = new Date();

      logger.warn(`‚ö†Ô∏è Instance ${instanceId} –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω:`, this.getErrorMessage(error));

      // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–π
      if (instance.errorCount >= this.config.maxFailureThreshold) {
        instance.status = 'failed';
        this.emit('instanceFailed', { instanceId, instance });
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
   */
  private async checkPort(port: number): Promise<void> {
    return new Promise((resolve, reject) => {
      const socket = new net.Socket();
      const timeout = setTimeout(() => {
        socket.destroy();
        reject(new Error(`Port ${port} timeout`));
      }, 5000);

      socket.connect(port, '127.0.0.1', () => {
        clearTimeout(timeout);
        socket.destroy();
        resolve();
      });

      socket.on('error', (error) => {
        clearTimeout(timeout);
        reject(error);
      });
    });
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ failover
   */
  private async evaluateFailoverNeed(): Promise<void> {
    const activeInstances = Array.from(this.instances.values())
      .filter(instance => instance.status === 'active');

    const failedInstances = Array.from(this.instances.values())
      .filter(instance => instance.status === 'failed');

    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö instances –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
    if (activeInstances.length < this.config.minActiveInstances) {
      logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö instances: ${activeInstances.length}/${this.config.minActiveInstances}`);
      await this.performEmergencyFailover();
    }

    // –ï—Å–ª–∏ primary instance —É–ø–∞–ª
    if (this.currentPrimaryInstance) {
      const primaryInstance = this.instances.get(this.currentPrimaryInstance);
      if (primaryInstance && primaryInstance.status === 'failed') {
        logger.warn(`üö® Primary instance ${this.currentPrimaryInstance} —É–ø–∞–ª`);
        await this.failoverPrimaryInstance();
      }
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (failedInstances.length > 0) {
      this.emit('instancesDown', {
        failed: failedInstances.map(i => i.id),
        active: activeInstances.map(i => i.id),
      });
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ primary instance
   */
  private async failoverPrimaryInstance(): Promise<void> {
    try {
      logger.info('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º primary instance...');

      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã
      const candidates = Array.from(this.instances.values())
        .filter(instance => instance.status === 'active')
        .sort((a, b) => a.priority - b.priority);

      if (candidates.length === 0) {
        throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö instances –¥–ª—è failover');
      }

      const newPrimary = candidates[0];
      const oldPrimary = this.currentPrimaryInstance;

      this.currentPrimaryInstance = newPrimary.id;

      logger.info(`‚úÖ Primary instance –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å ${oldPrimary} –Ω–∞ ${newPrimary.id}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º ConnectionFailoverManager –æ —Å–º–µ–Ω–µ primary instance
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π instance
      connectionFailoverManager.forceConnectionType('api', 'tor');
      connectionFailoverManager.forceConnectionType('web', 'tor');
      connectionFailoverManager.forceConnectionType('blockchain', 'tor');

      this.emit('primaryInstanceChanged', {
        oldPrimary,
        newPrimary: newPrimary.id,
        newSocksPort: newPrimary.socksPort,
      });

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è primary instance:', error);
      throw error;
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö
   */
  private async performEmergencyFailover(): Promise<void> {
    try {
      logger.warn('üö® –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ...');

      // –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å standby instances
      const standbyInstances = Array.from(this.instances.values())
        .filter(instance => instance.status === 'standby');

      for (const instance of standbyInstances) {
        try {
          await this.activateInstance(instance.id);
        } catch (error) {
          logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${instance.id}:`, this.getErrorMessage(error));
        }
      }

      // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö instances
      const activeCount = Array.from(this.instances.values())
        .filter(instance => instance.status === 'active').length;

      if (activeCount < this.config.minActiveInstances) {
        // –ö—Ä–∞–π–Ω—è—è –º–µ—Ä–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ direct —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        logger.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π Tor –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ direct');
        this.emit('criticalFailure', {
          activeInstances: activeCount,
          requiredMinimum: this.config.minActiveInstances,
        });
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∞—Ü–∏—è instance
   */
  private async activateInstance(instanceId: string): Promise<void> {
    const instance = this.instances.get(instanceId);
    if (!instance) {
      throw new Error(`Instance ${instanceId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    logger.info(`üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º instance ${instanceId}...`);

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ Tor –ø—Ä–æ—Ü–µ—Å—Å–∞
      // await this.startTorProcess(instance);

      instance.status = 'active';
      instance.errorCount = 0;

      logger.info(`‚úÖ Instance ${instanceId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);

    } catch (error) {
      instance.status = 'failed';
      logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ${instanceId}:`, error);
      throw error;
    }
  }

  /**
   * –í—ã–±–æ—Ä primary instance
   */
  private async selectPrimaryInstance(): Promise<void> {
    const activeInstances = Array.from(this.instances.values())
      .filter(instance => instance.status === 'active')
      .sort((a, b) => a.priority - b.priority);

    if (activeInstances.length > 0) {
      this.currentPrimaryInstance = activeInstances[0].id;
      logger.info(`‚úÖ Primary instance: ${this.currentPrimaryInstance}`);
    } else {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö instances –¥–ª—è –≤—ã–±–æ—Ä–∞ primary');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ hidden services
   */
  private async updateHiddenServiceClusters(): Promise<void> {
    for (const [serviceType, cluster] of this.hiddenServiceClusters) {
      try {
        // –ß–∏—Ç–∞–µ–º onion –∞–¥—Ä–µ—Å–∞ –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö instances
        const activeInstances = Array.from(this.instances.values())
          .filter(instance => instance.status === 'active');

        const onionAddresses: string[] = [];

        for (const instance of activeInstances) {
          try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ —á–∏—Ç–∞–µ–º hostname —Ñ–∞–π–ª—ã
            const hostnameFile = `${instance.dataDirectory}/mixer_${serviceType}/hostname`;
            // const onionAddress = await fs.readFile(hostnameFile, 'utf-8');
            // onionAddresses.push(onionAddress.trim());
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —á—Ç–µ–Ω–∏—è hostname —Ñ–∞–π–ª–∞
            logger.debug(`üóã –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è ${hostnameFile} –¥–ª—è ${instance.id}`);
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            const demoOnionAddress = `${instance.id}${serviceType}1234567890abcdef.onion`;
            onionAddresses.push(demoOnionAddress);
            logger.debug(`üßÖ –°–æ–∑–¥–∞–Ω demo onion –∞–¥—Ä–µ—Å: ${demoOnionAddress}`);
          } catch (error) {
            // –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –µ—Å–ª–∏ service –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤
          }
        }

        if (onionAddresses.length > 0) {
          cluster.primary = onionAddresses[0];
          cluster.backups = onionAddresses.slice(1);
          cluster.currentActive = cluster.primary;
        }

      } catch (error) {
        logger.warn(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ ${serviceType}:`, this.getErrorMessage(error));
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ onion –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
   */
  public getBestOnionAddress(serviceType: string): string | null {
    const cluster = this.hiddenServiceClusters.get(serviceType);
    if (!cluster) {
      return null;
    }

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω load balancing, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–¥—Ä–µ—Å
    if (cluster.loadBalancing && cluster.backups.length > 0) {
      const allAddresses = [cluster.primary, ...cluster.backups];
      const randomIndex = Math.floor(Math.random() * allAddresses.length);
      return allAddresses[randomIndex];
    }

    return cluster.currentActive || cluster.primary;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  public getStats() {
    const instances = Array.from(this.instances.values());
    const clusters = Array.from(this.hiddenServiceClusters.entries());

    return {
      isEnabled: this.config.enableMultipleInstances,
      isInitialized: this.isInitialized,
      currentPrimaryInstance: this.currentPrimaryInstance,
      
      instances: {
        total: instances.length,
        active: instances.filter(i => i.status === 'active').length,
        standby: instances.filter(i => i.status === 'standby').length,
        failed: instances.filter(i => i.status === 'failed').length,
        details: instances.map(instance => ({
          id: instance.id,
          name: instance.name,
          status: instance.status,
          region: instance.region,
          socksPort: instance.socksPort,
          errorCount: instance.errorCount,
          lastHealthCheck: instance.lastHealthCheck,
        })),
      },
      
      hiddenServiceClusters: clusters.map(([type, cluster]) => ({
        serviceType: type,
        primary: cluster.primary,
        backupsCount: cluster.backups.length,
        currentActive: cluster.currentActive,
        failoverCount: cluster.failoverCount,
        lastFailover: cluster.lastFailover,
        loadBalancing: cluster.loadBalancing,
      })),
      
      config: this.config,
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π instance
   */
  public async forceSwitchToInstance(instanceId: string): Promise<void> {
    const instance = this.instances.get(instanceId);
    if (!instance) {
      throw new Error(`Instance ${instanceId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (instance.status !== 'active') {
      throw new Error(`Instance ${instanceId} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`);
    }

    const oldPrimary = this.currentPrimaryInstance;
    this.currentPrimaryInstance = instanceId;

    logger.info(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ instance ${instanceId}`);

    this.emit('manualInstanceSwitch', {
      oldPrimary,
      newPrimary: instanceId,
    });
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  public async shutdown(): Promise<void> {
    if (this.healthCheckTimer) {
      clearInterval(this.healthCheckTimer);
      this.healthCheckTimer = null;
    }

    logger.info('üõë TorRedundancyManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    this.emit('shutdown');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const torRedundancyManager = new TorRedundancyManager();