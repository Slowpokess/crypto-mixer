import { SocksProxyAgent } from 'socks-proxy-agent';
import { HttpsProxyAgent } from 'https-proxy-agent';
import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';
import * as net from 'net';
import { EventEmitter } from 'events';
import { enhancedDbLogger } from './logger';

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Tor –¥–ª—è CryptoMixer
 * 
 * –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Tor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É Tor –∏ –æ–±—ã—á–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
 * - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ SOCKS –ø–æ—Ä—Ç–∞–º–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Tor
 * - –†–æ—Ç–∞—Ü–∏–µ–π —Ü–µ–ø–æ—á–µ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–æ –≤—Å–µ–º–∏ blockchain –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 */

export interface TorConfig {
  socksPort: number;
  controlPort: number;
  controlPassword: string;
  enabled: boolean;
  circuitTimeout: number;
  maxRetries: number;
  retryDelay: number;
  isolationLevel: 'none' | 'destination' | 'full';
}

export interface TorConnectionInfo {
  isConnected: boolean;
  circuitCount: number;
  bandwidth: {
    read: number;
    written: number;
  };
  lastCircuitRotation: Date;
  onionAddress?: string;
  errors: string[];
}

export class TorManager extends EventEmitter {
  private config: TorConfig;
  private socksAgent: SocksProxyAgent | null = null;
  private httpsAgent: HttpsProxyAgent | null = null;
  private axiosInstance: AxiosInstance;
  private connectionInfo: TorConnectionInfo;
  private isInitialized = false;
  private circuitRotationTimer: NodeJS.Timeout | null = null;
  private healthCheckTimer: NodeJS.Timeout | null = null;
  private stats = {
    requestCount: 0,
    errorCount: 0,
    circuitRotations: 0,
    lastError: null as Error | null,
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  private readonly CONNECTION_CONFIGS = {
    // –û—Å–Ω–æ–≤–Ω–æ–π SOCKS –ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Ç—Ä–∞—Ñ–∏–∫–∞
    web: { port: 9050, isolation: 'IsolateDestAddr IsolateDestPort' },
    // –ü–æ—Ä—Ç –¥–ª—è blockchain —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    blockchain: { port: 9051, isolation: 'IsolateClientAuth IsolateSOCKSAuth' },
    // –ü–æ—Ä—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    api: { port: 9052, isolation: 'IsolateDestAddr IsolateDestPort IsolateClientProtocol' },
  };

  constructor(config: Partial<TorConfig> = {}) {
    super();
    
    this.config = {
      socksPort: 9050,
      controlPort: 9053,
      controlPassword: process.env.TOR_CONTROL_PASSWORD || '',
      enabled: process.env.TOR_ENABLED === 'true',
      circuitTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
      maxRetries: 3,
      retryDelay: 5000, // 5 —Å–µ–∫—É–Ω–¥
      isolationLevel: 'full',
      ...config,
    };

    this.connectionInfo = {
      isConnected: false,
      circuitCount: 0,
      bandwidth: { read: 0, written: 0 },
      lastCircuitRotation: new Date(),
      errors: [],
    };

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π axios instance
    this.axiosInstance = axios.create({
      timeout: this.config.circuitTimeout,
      headers: {
        'User-Agent': this.generateRandomUserAgent(),
      },
    });

    enhancedDbLogger.info('üßÖ TorManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      enabled: this.config.enabled,
      socksPort: this.config.socksPort,
      controlPort: this.config.controlPort,
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public async initialize(): Promise<void> {
    if (!this.config.enabled) {
      enhancedDbLogger.info('üßÖ Tor –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    try {
      enhancedDbLogger.info('üßÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tor
      await this.checkTorAvailability();

      // –°–æ–∑–¥–∞–µ–º SOCKS –∞–≥–µ–Ω—Ç–æ–≤
      await this.createSocksAgents();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ hidden service
      await this.getHiddenServiceInfo();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      this.startHealthMonitoring();
      this.startCircuitRotation();

      this.isInitialized = true;
      this.connectionInfo.isConnected = true;
      
      enhancedDbLogger.info('‚úÖ TorManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      this.emit('connected');

    } catch (error) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è error –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const errorMessage = error instanceof Error ? error.message : String(error);
      const errorToLog = error instanceof Error ? error : new Error(String(error));
      
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TorManager:', { error: errorMessage });
      this.connectionInfo.errors.push(errorMessage);
      this.stats.lastError = errorToLog;
      throw errorToLog;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tor
   */
  private async checkTorAvailability(): Promise<void> {
    return new Promise((resolve, reject) => {
      const socket = new net.Socket();
      const timeout = setTimeout(() => {
        socket.destroy();
        reject(new Error(`Tor SOCKS –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.socksPort}`));
      }, 5000);

      socket.connect(this.config.socksPort, '127.0.0.1', () => {
        clearTimeout(timeout);
        socket.destroy();
        enhancedDbLogger.info(`‚úÖ Tor SOCKS –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.config.socksPort}`);
        resolve();
      });

      socket.on('error', (error) => {
        clearTimeout(timeout);
        reject(new Error(`Tor SOCKS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`));
      });
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ SOCKS –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private async createSocksAgents(): Promise<void> {
    try {
      // –û—Å–Ω–æ–≤–Ω–æ–π SOCKS –∞–≥–µ–Ω—Ç
      this.socksAgent = new SocksProxyAgent(`socks5://127.0.0.1:${this.config.socksPort}`);
      
      // HTTPS –∞–≥–µ–Ω—Ç
      this.httpsAgent = new HttpsProxyAgent(`socks5://127.0.0.1:${this.config.socksPort}`);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º axios instance —Å Tor –∞–≥–µ–Ω—Ç–æ–º
      this.axiosInstance.defaults.httpAgent = this.socksAgent;
      this.axiosInstance.defaults.httpsAgent = this.httpsAgent;

      // –î–æ–±–∞–≤–ª—è–µ–º interceptors –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      this.setupAxiosInterceptors();

      enhancedDbLogger.info('‚úÖ SOCKS –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SOCKS –∞–≥–µ–Ω—Ç–æ–≤:', { error: errorMessage });
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Axios interceptors
   */
  private setupAxiosInterceptors(): void {
    // Request interceptor
    this.axiosInstance.interceptors.request.use(
      (config) => {
        this.stats.requestCount++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å AxiosHeaders
        if (config.headers) {
          config.headers['Accept-Language'] = this.generateRandomAcceptLanguage();
          config.headers['DNT'] = '1';
          config.headers['Upgrade-Insecure-Requests'] = '1';
        }

        enhancedDbLogger.debug('üßÖ Tor –∑–∞–ø—Ä–æ—Å:', { 
          method: config.method, 
          url: config.url,
          headers: config.headers 
        });

        return config;
      },
      (error) => {
        this.stats.errorCount++;
        const errorMessage = error instanceof Error ? error.message : String(error);
        enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ Tor –∑–∞–ø—Ä–æ—Å–∞:', { error: errorMessage });
        return Promise.reject(error);
      }
    );

    // Response interceptor
    this.axiosInstance.interceptors.response.use(
      (response) => {
        enhancedDbLogger.debug('‚úÖ Tor –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', { 
          status: response.status, 
          url: response.config.url 
        });
        return response;
      },
      async (error) => {
        this.stats.errorCount++;
        this.stats.lastError = error;

        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å —Ü–µ–ø–æ—á–∫—É
        if (error.code === 'ECONNREFUSED' || error.code === 'ETIMEDOUT') {
          enhancedDbLogger.warn('üîÑ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ä–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É...');
          await this.rotateCircuit();
        }

        return Promise.reject(error);
      }
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ hidden service
   */
  private async getHiddenServiceInfo(): Promise<void> {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å onion –∞–¥—Ä–µ—Å –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      // –í Docker —ç—Ç–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ volume
      const fs = await import('fs/promises');
      
      try {
        const onionAddress = await fs.readFile('/shared/onion-address.txt', 'utf-8');
        this.connectionInfo.onionAddress = onionAddress.trim();
        enhancedDbLogger.info(`üßÖ Hidden service –∞–¥—Ä–µ—Å: ${this.connectionInfo.onionAddress}`);
      } catch (error) {
        enhancedDbLogger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å onion –∞–¥—Ä–µ—Å –∏–∑ —Ñ–∞–π–ª–∞');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ hidden service:', { error: errorMessage });
    }
  }

  /**
   * –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ Tor
   */
  public async rotateCircuit(): Promise<void> {
    if (!this.isInitialized) {
      enhancedDbLogger.warn('‚ö†Ô∏è TorManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    try {
      enhancedDbLogger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é Tor —Ü–µ–ø–æ—á–µ–∫...');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª NEWNYM —á–µ—Ä–µ–∑ control port
      await this.sendControlCommand('SIGNAL NEWNYM');
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö —Ü–µ–ø–æ—á–µ–∫
      await new Promise(resolve => setTimeout(resolve, 3000));

      this.connectionInfo.lastCircuitRotation = new Date();
      this.stats.circuitRotations++;

      enhancedDbLogger.info('‚úÖ –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      this.emit('circuitRotated');

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫:', { error: errorMessage });
      this.connectionInfo.errors.push(`Circuit rotation failed: ${errorMessage}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Tor control port
   */
  private async sendControlCommand(command: string): Promise<string> {
    return new Promise((resolve, reject) => {
      const socket = new net.Socket();
      let response = '';

      socket.connect(this.config.controlPort, '127.0.0.1', () => {
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        const authCommand = `AUTHENTICATE "${this.config.controlPassword}"\r\n`;
        socket.write(authCommand);
      });

      socket.on('data', (data) => {
        response += data.toString();
        
        if (response.includes('250 OK\r\n')) {
          if (!response.includes(command)) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            socket.write(`${command}\r\n`);
          } else {
            // –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            socket.write('QUIT\r\n');
            socket.end();
            resolve(response);
          }
        } else if (response.includes('515') || response.includes('550')) {
          reject(new Error(`Control command failed: ${response}`));
        }
      });

      socket.on('error', (error) => {
        reject(error);
      });

      socket.on('timeout', () => {
        socket.destroy();
        reject(new Error('Control connection timeout'));
      });

      socket.setTimeout(10000);
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è Tor
   */
  private startHealthMonitoring(): void {
    this.healthCheckTimer = setInterval(async () => {
      try {
        await this.performHealthCheck();
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Tor:', { error: errorMessage });
      }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫
   */
  private startCircuitRotation(): void {
    // –†–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    this.circuitRotationTimer = setInterval(async () => {
      await this.rotateCircuit();
    }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private async performHealthCheck(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SOCKS –ø–æ—Ä—Ç–∞
      await this.checkTorAvailability();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–ø–æ—á–µ–∫
      const circuitInfo = await this.sendControlCommand('GETINFO circuit-status');
      const circuits = circuitInfo.split('\n').filter(line => line.includes('BUILT'));
      this.connectionInfo.circuitCount = circuits.length;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
      const trafficInfo = await this.sendControlCommand('GETINFO traffic/read traffic/written');
      const trafficLines = trafficInfo.split('\n');
      
      for (const line of trafficLines) {
        if (line.includes('traffic/read=')) {
          this.connectionInfo.bandwidth.read = parseInt(line.split('=')[1]) || 0;
        }
        if (line.includes('traffic/written=')) {
          this.connectionInfo.bandwidth.written = parseInt(line.split('=')[1]) || 0;
        }
      }

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏
      this.connectionInfo.errors = this.connectionInfo.errors.slice(-5);

      this.emit('healthCheck', this.connectionInfo);

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      const errorToEmit = error instanceof Error ? error : new Error(String(error));
      
      this.connectionInfo.isConnected = false;
      this.connectionInfo.errors.push(`Health check failed: ${errorMessage}`);
      this.emit('healthCheckFailed', errorToEmit);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ axios instance –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  public getAxiosInstance(connectionType: 'web' | 'blockchain' | 'api' = 'web'): AxiosInstance {
    if (!this.config.enabled || !this.isInitialized) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π axios instance –±–µ–∑ Tor
      return axios.create({
        timeout: this.config.circuitTimeout,
        headers: {
          'User-Agent': this.generateRandomUserAgent(),
        },
      });
    }

    const config = this.CONNECTION_CONFIGS[connectionType];
    const socksAgent = new SocksProxyAgent(`socks5://127.0.0.1:${config.port}`);
    const httpsAgent = new HttpsProxyAgent(`socks5://127.0.0.1:${config.port}`);

    return axios.create({
      timeout: this.config.circuitTimeout,
      httpAgent: socksAgent,
      httpsAgent: httpsAgent,
      headers: {
        'User-Agent': this.generateRandomUserAgent(),
        'Accept-Language': this.generateRandomAcceptLanguage(),
        'DNT': '1',
      },
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
   */
  private generateRandomUserAgent(): string {
    const userAgents = [
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0',
    ];

    return userAgents[Math.floor(Math.random() * userAgents.length)];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ Accept-Language –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  private generateRandomAcceptLanguage(): string {
    const languages = [
      'en-US,en;q=0.9',
      'en-GB,en;q=0.9',
      'ru-RU,ru;q=0.9,en;q=0.8',
      'de-DE,de;q=0.9,en;q=0.8',
      'fr-FR,fr;q=0.9,en;q=0.8',
    ];

    return languages[Math.floor(Math.random() * languages.length)];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã
   */
  public getStats() {
    return {
      ...this.stats,
      connectionInfo: this.connectionInfo,
      isEnabled: this.config.enabled,
      isInitialized: this.isInitialized,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Tor
   */
  public async testConnection(url: string = 'https://check.torproject.org/api/ip'): Promise<any> {
    try {
      const response = await this.axiosInstance.get(url);
      enhancedDbLogger.info('‚úÖ Tor —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω:', response.data);
      return response.data;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      enhancedDbLogger.error('‚ùå Tor —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω:', { error: errorMessage });
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TorManager
   */
  public async shutdown(): Promise<void> {
    enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TorManager...');

    if (this.healthCheckTimer) {
      clearInterval(this.healthCheckTimer);
    }

    if (this.circuitRotationTimer) {
      clearInterval(this.circuitRotationTimer);
    }

    this.isInitialized = false;
    this.connectionInfo.isConnected = false;

    this.emit('disconnected');
    enhancedDbLogger.info('‚úÖ TorManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TorManager
export const torManager = new TorManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è
if (process.env.NODE_ENV !== 'test') {
  torManager.initialize().catch(error => {
    const errorMessage = error instanceof Error ? error.message : String(error);
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TorManager:', { error: errorMessage });
  });
}