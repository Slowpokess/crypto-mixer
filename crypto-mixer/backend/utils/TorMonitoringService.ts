import { EventEmitter } from 'events';
import { torManager } from './TorManager';
import { torBlockchainClient } from '../blockchain/TorBlockchainClient';
import logger from './logger';
import * as net from 'net';

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Tor –¥–ª—è CryptoMixer
 * 
 * –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö Tor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö hidden services
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ onion –∞–¥—Ä–µ—Å–∞
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
 * - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
 */

export interface TorServiceStatus {
  name: string;
  type: 'hidden_service' | 'socks_proxy' | 'control_port' | 'blockchain_client';
  status: 'healthy' | 'warning' | 'critical' | 'unknown';
  onionAddress?: string;
  port: number;
  lastCheck: Date;
  responseTime: number;
  errorCount: number;
  uptime: number;
  details: any;
}

export interface TorMonitoringStats {
  services: TorServiceStatus[];
  overallHealth: 'healthy' | 'degraded' | 'critical' | 'unknown';
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  averageResponseTime: number;
  circuitRotations: number;
  lastCircuitRotation: Date;
  hiddenServiceUptime: number;
}

export class TorMonitoringService extends EventEmitter {
  private services: Map<string, TorServiceStatus> = new Map();
  private monitoringInterval: NodeJS.Timeout | null = null;
  private deepCheckInterval: NodeJS.Timeout | null = null;
  private isRunning = false;
  private stats: TorMonitoringStats;
  private checkIntervalMs = 30000; // 30 —Å–µ–∫—É–Ω–¥
  private deepCheckIntervalMs = 300000; // 5 –º–∏–Ω—É—Ç
  private startTime = new Date();

  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  private getErrorMessage(error: unknown): string {
    if (error instanceof Error) {
      return error.message;
    }
    if (typeof error === 'string') {
      return error;
    }
    return String(error);
  }

  // –°–ø–∏—Å–æ–∫ onion –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  private readonly ONION_SERVICES = [
    {
      name: 'mixer_web',
      type: 'hidden_service' as const,
      expectedPorts: [80, 443],
      path: '/var/lib/tor/mixer_web/hostname',
    },
    {
      name: 'mixer_api',
      type: 'hidden_service' as const,
      expectedPorts: [80, 443],
      path: '/var/lib/tor/mixer_api/hostname',
    },
    {
      name: 'mixer_admin',
      type: 'hidden_service' as const,
      expectedPorts: [80, 443],
      path: '/var/lib/tor/mixer_admin/hostname',
    },
    {
      name: 'mixer_monitoring',
      type: 'hidden_service' as const,
      expectedPorts: [80],
      path: '/var/lib/tor/mixer_monitoring/hostname',
    },
  ];

  // SOCKS –ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  private readonly SOCKS_PORTS = [9050, 9051, 9052, 9054, 9055, 9056, 9057, 9058];

  constructor() {
    super();
    
    this.stats = {
      services: [],
      overallHealth: 'unknown',
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0,
      circuitRotations: 0,
      lastCircuitRotation: new Date(),
      hiddenServiceUptime: 0,
    };

    this.initializeServices();
    logger.info('üßÖ TorMonitoringService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private initializeServices(): void {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º hidden services
    for (const service of this.ONION_SERVICES) {
      this.services.set(service.name, {
        name: service.name,
        type: service.type,
        status: 'unknown',
        port: service.expectedPorts[0],
        lastCheck: new Date(),
        responseTime: 0,
        errorCount: 0,
        uptime: 0,
        details: {
          expectedPorts: service.expectedPorts,
          hostnameFile: service.path,
        },
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SOCKS –ø–æ—Ä—Ç—ã
    for (const port of this.SOCKS_PORTS) {
      this.services.set(`socks_${port}`, {
        name: `socks_${port}`,
        type: 'socks_proxy',
        status: 'unknown',
        port,
        lastCheck: new Date(),
        responseTime: 0,
        errorCount: 0,
        uptime: 0,
        details: {},
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º control port
    this.services.set('control_port', {
      name: 'control_port',
      type: 'control_port',
      status: 'unknown',
      port: 9053,
      lastCheck: new Date(),
      responseTime: 0,
      errorCount: 0,
      uptime: 0,
      details: {},
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º blockchain client
    this.services.set('blockchain_client', {
      name: 'blockchain_client',
      type: 'blockchain_client',
      status: 'unknown',
      port: 0,
      lastCheck: new Date(),
      responseTime: 0,
      errorCount: 0,
      uptime: 0,
      details: {},
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public start(): void {
    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è TorMonitoringService —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    this.startTime = new Date();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    this.monitoringInterval = setInterval(async () => {
      await this.performBasicHealthCheck();
    }, this.checkIntervalMs);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª—É–±–æ–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.deepCheckInterval = setInterval(async () => {
      await this.performDeepHealthCheck();
    }, this.deepCheckIntervalMs);

    // –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.performBasicHealthCheck();

    logger.info('üßÖ TorMonitoringService –∑–∞–ø—É—â–µ–Ω');
    this.emit('started');
  }

  /**
   * –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  private async performBasicHealthCheck(): Promise<void> {
    try {
      logger.debug('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É Tor —Å–µ—Ä–≤–∏—Å–æ–≤...');

      const checkPromises: Promise<void>[] = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º SOCKS –ø–æ—Ä—Ç—ã
      for (const port of this.SOCKS_PORTS) {
        checkPromises.push(this.checkSocksPort(port));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º control port
      checkPromises.push(this.checkControlPort());

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º hidden services
      for (const service of this.ONION_SERVICES) {
        checkPromises.push(this.checkHiddenService(service.name));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º blockchain client
      checkPromises.push(this.checkBlockchainClient());

      await Promise.allSettled(checkPromises);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateOverallStats();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      this.checkForAlerts();

      this.emit('healthCheckCompleted', this.getStats());

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Tor:', error);
    }
  }

  /**
   * –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private async performDeepHealthCheck(): Promise<void> {
    try {
      logger.info('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –≥–ª—É–±–æ–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É Tor —Å–µ—Ä–≤–∏—Å–æ–≤...');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ onion –∞–¥—Ä–µ—Å–∞
      await this.testOnionConnections();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ü–µ–ø–æ—á–µ–∫
      await this.analyzeCircuitQuality();

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º blockchain —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.testBlockchainConnections();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      await this.performanceAnalysis();

      this.emit('deepCheckCompleted', this.getStats());

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Tor:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ SOCKS –ø–æ—Ä—Ç–∞
   */
  private async checkSocksPort(port: number): Promise<void> {
    const serviceName = `socks_${port}`;
    const service = this.services.get(serviceName);
    if (!service) return;

    const startTime = Date.now();

    try {
      await new Promise<void>((resolve, reject) => {
        const socket = new net.Socket();
        const timeout = setTimeout(() => {
          socket.destroy();
          reject(new Error('Timeout'));
        }, 5000);

        socket.connect(port, '127.0.0.1', () => {
          clearTimeout(timeout);
          socket.destroy();
          resolve();
        });

        socket.on('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });
      });

      const responseTime = Date.now() - startTime;
      this.updateServiceStatus(serviceName, 'healthy', responseTime);

    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.updateServiceStatus(serviceName, 'critical', responseTime, this.getErrorMessage(error));
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ control –ø–æ—Ä—Ç–∞
   */
  private async checkControlPort(): Promise<void> {
    const serviceName = 'control_port';
    const startTime = Date.now();

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ control –ø–æ—Ä—Ç—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
      const result = await torManager.testConnection();
      
      const responseTime = Date.now() - startTime;
      this.updateServiceStatus(serviceName, 'healthy', responseTime, result);

    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.updateServiceStatus(serviceName, 'critical', responseTime, this.getErrorMessage(error));
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ hidden service
   */
  private async checkHiddenService(serviceName: string): Promise<void> {
    const service = this.services.get(serviceName);
    if (!service) return;

    const startTime = Date.now();

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å onion –∞–¥—Ä–µ—Å
      const fs = await import('fs/promises');
      let onionAddress: string;

      try {
        onionAddress = await fs.readFile(service.details.hostnameFile, 'utf-8');
        onionAddress = onionAddress.trim();
        service.onionAddress = onionAddress;
      } catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å hostname: ${this.getErrorMessage(error)}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
      const responseTime = Date.now() - startTime;
      this.updateServiceStatus(serviceName, 'healthy', responseTime, { onionAddress });

    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.updateServiceStatus(serviceName, 'warning', responseTime, this.getErrorMessage(error));
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ blockchain client
   */
  private async checkBlockchainClient(): Promise<void> {
    const serviceName = 'blockchain_client';
    const startTime = Date.now();

    try {
      const healthCheck = await torBlockchainClient.healthCheck();
      const responseTime = Date.now() - startTime;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤–∞–ª—é—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      const currencies = Object.keys(healthCheck);
      const healthyCurrencies = currencies.filter(
        currency => healthCheck[currency].status === 'healthy'
      );

      let status: 'healthy' | 'warning' | 'critical';
      if (healthyCurrencies.length === currencies.length) {
        status = 'healthy';
      } else if (healthyCurrencies.length > currencies.length / 2) {
        status = 'warning';
      } else {
        status = 'critical';
      }

      this.updateServiceStatus(serviceName, status, responseTime, {
        totalCurrencies: currencies.length,
        healthyCurrencies: healthyCurrencies.length,
        details: healthCheck,
      });

    } catch (error) {
      const responseTime = Date.now() - startTime;
      this.updateServiceStatus(serviceName, 'critical', responseTime, this.getErrorMessage(error));
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ onion –∞–¥—Ä–µ—Å–∞
   */
  private async testOnionConnections(): Promise<void> {
    logger.debug('üßÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º onion —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

    for (const [serviceName, service] of this.services) {
      if (service.type === 'hidden_service' && service.onionAddress) {
        try {
          // –°–æ–∑–¥–∞–µ–º Tor axios instance
          const torAxios = torManager.getAxiosInstance('web');
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
          const testUrl = `http://${service.onionAddress}`;
          const startTime = Date.now();
          
          await torAxios.get(testUrl, { 
            timeout: 10000,
            validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
          });
          
          const responseTime = Date.now() - startTime;
          logger.debug(`‚úÖ ${serviceName} onion –¥–æ—Å—Ç—É–ø–µ–Ω: ${responseTime}ms`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–∏—Å–∞
          service.details.onionConnectivity = 'accessible';
          service.details.lastOnionTest = new Date();
          service.details.onionResponseTime = responseTime;

        } catch (error) {
          const errorMessage = this.getErrorMessage(error);
          logger.warn(`‚ö†Ô∏è ${serviceName} onion –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, errorMessage);
          service.details.onionConnectivity = 'inaccessible';
          service.details.lastOnionError = errorMessage;
        }
      }
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–ø–æ—á–µ–∫
   */
  private async analyzeCircuitQuality(): Promise<void> {
    try {
      logger.debug('üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ Tor —Ü–µ–ø–æ—á–µ–∫...');

      const torStats = torManager.getStats();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–ø–æ—á–µ–∫
      this.stats.circuitRotations = torStats.connectionInfo.circuitCount || 0;
      this.stats.lastCircuitRotation = torStats.connectionInfo.lastCircuitRotation;

      // –ï—Å–ª–∏ —Ü–µ–ø–æ—á–µ–∫ –º–∞–ª–æ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
      if (torStats.connectionInfo.circuitCount < 3) {
        this.emit('alert', {
          level: 'warning',
          message: `–ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫: ${torStats.connectionInfo.circuitCount}`,
          service: 'circuit_quality',
        });
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–æ—á–µ–∫:', error);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ blockchain —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  private async testBlockchainConnections(): Promise<void> {
    try {
      logger.debug('‚õìÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º blockchain —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

      const blockchainStats = torBlockchainClient.getStats();
      
      for (const [symbol, currencyStats] of Object.entries(blockchainStats)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        const totalRequests = currencyStats.endpointStats.reduce(
          (sum: number, stat: any) => sum + stat.requestCount, 0
        );
        const totalErrors = currencyStats.endpointStats.reduce(
          (sum: number, stat: any) => sum + stat.errorCount, 0
        );
        
        const errorRate = totalRequests > 0 ? (totalErrors / totalRequests) * 100 : 0;
        
        if (errorRate > 20) { // –ë–æ–ª–µ–µ 20% –æ—à–∏–±–æ–∫
          this.emit('alert', {
            level: 'warning',
            message: `–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ –¥–ª—è ${symbol}: ${errorRate.toFixed(1)}%`,
            service: 'blockchain_client',
            currency: symbol,
          });
        }
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è blockchain:', error);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private async performanceAnalysis(): Promise<void> {
    logger.debug('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Tor...');

    const services = Array.from(this.services.values());
    const healthyServices = services.filter(s => s.status === 'healthy');
    const criticalServices = services.filter(s => s.status === 'critical');

    // –°—Ä–µ–¥–Ω—è—è –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    const avgResponseTime = services.reduce((sum, service) => sum + service.responseTime, 0) / services.length;
    this.stats.averageResponseTime = avgResponseTime;

    // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    const uptimeMs = Date.now() - this.startTime.getTime();
    this.stats.hiddenServiceUptime = uptimeMs / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    this.stats.successfulRequests = healthyServices.length;
    this.stats.failedRequests = criticalServices.length;
    this.stats.totalRequests = services.length;

    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–æ—Ö–∞—è
    if (avgResponseTime > 10000) { // –ë–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥
      this.emit('alert', {
        level: 'warning',
        message: `–ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${avgResponseTime}ms`,
        service: 'performance',
      });
    }

    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if (criticalServices.length > services.length / 3) {
      this.emit('alert', {
        level: 'critical',
        message: `–ú–Ω–æ–≥–æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: ${criticalServices.length}/${services.length}`,
        service: 'overall_health',
        healthyServices: healthyServices.length,
        totalServices: services.length
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  private updateServiceStatus(
    serviceName: string, 
    status: 'healthy' | 'warning' | 'critical',
    responseTime: number,
    details?: any
  ): void {
    const service = this.services.get(serviceName);
    if (!service) return;

    const wasHealthy = service.status === 'healthy';
    
    service.status = status;
    service.lastCheck = new Date();
    service.responseTime = responseTime;
    service.details = { ...service.details, ...details };

    if (status === 'critical') {
      service.errorCount++;
    }

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    if (!wasHealthy && status === 'healthy') {
      this.emit('serviceRecovered', { serviceName, service });
      logger.info(`‚úÖ –°–µ—Ä–≤–∏—Å ${serviceName} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    }

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —É–ø–∞–ª
    if (wasHealthy && status === 'critical') {
      this.emit('serviceFailed', { serviceName, service });
      logger.warn(`‚ùå –°–µ—Ä–≤–∏—Å ${serviceName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private updateOverallStats(): void {
    const services = Array.from(this.services.values());
    const healthyCount = services.filter(s => s.status === 'healthy').length;
    const warningCount = services.filter(s => s.status === 'warning').length;
    const criticalCount = services.filter(s => s.status === 'critical').length;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
    if (criticalCount > services.length / 2) {
      this.stats.overallHealth = 'critical';
    } else if (warningCount + criticalCount > services.length / 3) {
      this.stats.overallHealth = 'degraded';
    } else {
      this.stats.overallHealth = 'healthy';
    }

    this.stats.services = services;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    logger.debug('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤', {
      totalServices: services.length,
      healthyServices: healthyCount,
      warningServices: warningCount,
      criticalServices: criticalCount,
      overallHealth: this.stats.overallHealth
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
   */
  private checkForAlerts(): void {
    const services = Array.from(this.services.values());
    const criticalServices = services.filter(s => s.status === 'critical');

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    if (criticalServices.length >= 3) {
      this.emit('alert', {
        level: 'critical',
        message: `–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–±–æ–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: ${criticalServices.map(s => s.name).join(', ')}`,
        service: 'multiple_failures',
        affectedServices: criticalServices.map(s => s.name),
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    const essentialServices = ['mixer_web', 'socks_9050', 'control_port'];
    const failedEssential = essentialServices.filter(name => {
      const service = this.services.get(name);
      return service && service.status === 'critical';
    });

    if (failedEssential.length > 0) {
      this.emit('alert', {
        level: 'critical',
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${failedEssential.join(', ')}`,
        service: 'essential_failures',
        affectedServices: failedEssential,
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  public getStats(): TorMonitoringStats {
    return { ...this.stats };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
   */
  public getServiceDetails(serviceName: string): TorServiceStatus | null {
    return this.services.get(serviceName) || null;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ü–µ–ø–æ—á–µ–∫
   */
  public async forceCircuitRotation(): Promise<void> {
    try {
      logger.info('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ü–µ–ø–æ—á–µ–∫...');
      
      await torManager.rotateCircuit();
      await torBlockchainClient.healthCheck();
      
      this.stats.circuitRotations++;
      this.stats.lastCircuitRotation = new Date();
      
      this.emit('circuitRotationForced');
      logger.info('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public stop(): void {
    if (!this.isRunning) {
      return;
    }

    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }

    if (this.deepCheckInterval) {
      clearInterval(this.deepCheckInterval);
      this.deepCheckInterval = null;
    }

    this.isRunning = false;
    
    logger.info('üõë TorMonitoringService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    this.emit('stopped');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const torMonitoringService = new TorMonitoringService();

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
if (process.env.NODE_ENV !== 'test') {
  torMonitoringService.start();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  torMonitoringService.on('alert', (alert) => {
    if (alert.level === 'critical') {
      logger.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç Tor:', alert);
    } else {
      logger.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ Tor:', alert);
    }
  });
}