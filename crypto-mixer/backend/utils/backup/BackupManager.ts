import { promises as fs } from 'fs';
import * as path from 'path';
import * as crypto from 'crypto';
import { spawn } from 'child_process';
import { createGzip, createGunzip } from 'zlib';
import { pipeline } from 'stream/promises';
import { createWriteStream } from 'fs';
import * as https from 'https';
import * as http from 'http';
import { EventEmitter } from 'events';
import { DatabaseManager } from '../../database/DatabaseManager';
import { VaultManager } from '../../security/VaultManager';
import { HSMManager } from '../../security/HSMManager';
import { enhancedDbLogger } from '../logger';

/**
 * –¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã backup
 */
export interface BackupConfig {
  enabled: boolean;
  storage: {
    local: {
      enabled: boolean;
      path: string;
      maxFiles: number;
      retention: {
        daily: number;   // –¥–Ω–∏
        weekly: number;  // –Ω–µ–¥–µ–ª–∏  
        monthly: number; // –º–µ—Å—è—Ü—ã
      };
    };
    remote: {
      enabled: boolean;
      type: 'aws-s3' | 'azure-blob' | 'gcp-storage' | 'sftp';
      credentials: Record<string, any>;
      bucket?: string;
      region?: string;
      encryption: boolean;
    };
  };
  schedule: {
    full: string;      // cron expression –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ backup
    incremental: string; // cron expression –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ backup
    differential: string; // cron expression –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backup
  };
  compression: {
    enabled: boolean;
    level: number; // 1-9
    algorithm: 'gzip' | 'brotli' | 'lz4';
  };
  encryption: {
    enabled: boolean;
    algorithm: 'aes-256-gcm' | 'chacha20-poly1305';
    keyRotation: boolean;
    keyRotationDays: number;
  };
  verification: {
    checksumAlgorithm: 'sha256' | 'sha512' | 'blake3';
    integrityCheck: boolean;
    testRestore: boolean;
    testRestoreFrequency: number; // –¥–Ω–∏
  };
  alerts: {
    enabled: boolean;
    webhookUrl?: string;
    emailRecipients?: string[];
    slackChannel?: string;
    alertOnFailure: boolean;
    alertOnSuccess: boolean;
    alertOnLongDuration: boolean;
    maxDurationMinutes: number;
  };
}

export interface BackupMetadata {
  id: string;
  type: 'full' | 'incremental' | 'differential';
  timestamp: Date;
  size: number;
  compressed: boolean;
  encrypted: boolean;
  checksum: string;
  checksumAlgorithm: string;
  components: string[];
  retention: Date;
  status: 'in_progress' | 'completed' | 'failed' | 'corrupted';
  duration: number; // —Å–µ–∫—É–Ω–¥—ã
  errors?: string[];
  metadata: {
    dbVersion: string;
    appVersion: string;
    nodeVersion: string;
    environment: string;
    hostInfo: any;
  };
}

export interface BackupComponent {
  name: string;
  type: 'database' | 'files' | 'configuration' | 'secrets';
  priority: 'critical' | 'high' | 'medium' | 'low';
  path?: string;
  excludePatterns?: string[];
  customBackupFunction?: () => Promise<Buffer>;
  customRestoreFunction?: (data: Buffer) => Promise<void>;
}

export interface RestoreOptions {
  backupId: string;
  components?: string[];
  targetTimestamp?: Date;
  verifyIntegrity: boolean;
  dryRun: boolean;
  continueOnError: boolean;
  restoreLocation?: string;
}

export interface BackupReport {
  id: string;
  timestamp: Date;
  type: 'full' | 'incremental' | 'differential';
  status: 'success' | 'partial' | 'failed';
  duration: number;
  totalSize: number;
  compressedSize: number;
  compressionRatio: number;
  componentsProcessed: number;
  componentsSuccessful: number;
  componentsFailed: number;
  checksumVerified: boolean;
  encryptionApplied: boolean;
  storageLocations: string[];
  errors: string[];
  warnings: string[];
  performance: {
    throughputMBps: number;
    cpuUsagePercent: number;
    memoryUsageMB: number;
    ioWaitPercent: number;
  };
}

/**
 * Enterprise-grade Backup Manager
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ù–∞—Å–ª–µ–¥—É–µ—Ç EventEmitter –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–æ–±—ã—Ç–∏–π–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */
export class BackupManager extends EventEmitter {
  private config: BackupConfig;
  private isRunning: boolean = false;
  private currentBackupId: string | null = null;
  private backupHistory: Map<string, BackupMetadata> = new Map();
  private scheduledJobs: Map<string, NodeJS.Timeout> = new Map();
  private encryptionKeys: Map<string, Buffer> = new Map();
  private dbManager?: DatabaseManager; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è database backup
  
  private readonly BACKUP_COMPONENTS: BackupComponent[] = [
    {
      name: 'database_structure',
      type: 'database',
      priority: 'critical'
    },
    {
      name: 'database_data_critical',
      type: 'database', 
      priority: 'critical'
    },
    {
      name: 'database_data_high',
      type: 'database',
      priority: 'high'
    },
    {
      name: 'hsm_configuration',
      type: 'secrets',
      priority: 'critical'
    },
    {
      name: 'vault_secrets',
      type: 'secrets',
      priority: 'critical'
    },
    {
      name: 'application_config',
      type: 'configuration',
      priority: 'high'
    },
    {
      name: 'logs',
      type: 'files',
      priority: 'medium',
      path: '/app/logs',
      excludePatterns: ['*.tmp', '*.lock']
    }
  ];

  constructor(config: BackupConfig, dbManager?: DatabaseManager) {
    // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ EventEmitter –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–æ–±—ã—Ç–∏–π–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    super();
    this.config = config;
    this.dbManager = dbManager;
    this.validateConfig();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã backup
   */
  async initialize(): Promise<void> {
    const operationId = await enhancedDbLogger.startOperation('backup_initialize');
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
      await this.ensureDirectories();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      await this.initializeEncryptionKeys();
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ backup
      await this.loadBackupHistory();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      if (this.config.enabled) {
        this.setupSchedules();
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await this.verifyComponentsHealth();
      
      await enhancedDbLogger.endOperation(operationId, true);
      enhancedDbLogger.info('‚úÖ BackupManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
        enabled: this.config.enabled,
        scheduledJobs: this.scheduledJobs.size,
        components: this.BACKUP_COMPONENTS.length
      });
      
    } catch (error) {
      await enhancedDbLogger.endOperation(operationId, false);
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
      const errorToLog = error instanceof Error ? error : new Error(String(error));
      await enhancedDbLogger.logError(errorToLog);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ backup
   */
  async createFullBackup(options: { priority?: string } = {}): Promise<BackupReport> {
    const operationId = await enhancedDbLogger.startOperation('backup_full');
    const backupId = this.generateBackupId('full');
    
    try {
      if (this.isRunning) {
        throw new Error('Backup —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      }

      this.isRunning = true;
      this.currentBackupId = backupId;
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ backup –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.emit('backup_started', backupId);

      const startTime = Date.now();
      const metadata: BackupMetadata = {
        id: backupId,
        type: 'full',
        timestamp: new Date(),
        size: 0,
        compressed: this.config.compression.enabled,
        encrypted: this.config.encryption.enabled,
        checksum: '',
        checksumAlgorithm: this.config.verification.checksumAlgorithm,
        components: [],
        retention: this.calculateRetentionDate('full'),
        status: 'in_progress',
        duration: 0,
        metadata: await this.gatherSystemMetadata()
      };

      enhancedDbLogger.info('üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ backup', {
        backupId,
        components: this.BACKUP_COMPONENTS.length,
        encryption: metadata.encrypted,
        compression: metadata.compressed
      });

      const report: BackupReport = {
        id: backupId,
        timestamp: metadata.timestamp,
        type: 'full',
        status: 'success',
        duration: 0,
        totalSize: 0,
        compressedSize: 0,
        compressionRatio: 0,
        componentsProcessed: 0,
        componentsSuccessful: 0,
        componentsFailed: 0,
        checksumVerified: false,
        encryptionApplied: metadata.encrypted,
        storageLocations: [],
        errors: [],
        warnings: [],
        performance: {
          throughputMBps: 0,
          cpuUsagePercent: 0,
          memoryUsageMB: 0,
          ioWaitPercent: 0
        }
      };

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      const components = options.priority 
        ? this.BACKUP_COMPONENTS.filter(c => c.priority === options.priority)
        : this.BACKUP_COMPONENTS;

      // –°–æ–∑–¥–∞–Ω–∏–µ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const backupDir = path.join(this.config.storage.local.path, backupId);
      await fs.mkdir(backupDir, { recursive: true });

      // Backup –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      for (const component of components) {
        try {
          await this.backupComponent(component, backupDir, metadata);
          report.componentsSuccessful++;
          metadata.components.push(component.name);
        } catch (error) {
          enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ backup –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component.name}`, { 
            component: component.name, 
            error: error 
          });
          report.componentsFailed++;
          report.errors.push(`Component ${component.name}: ${error}`);
          
          if (component.priority === 'critical') {
            throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.name} –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: ${error}`);
          }
        }
        report.componentsProcessed++;
      }

      // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ checksums –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
      metadata.checksum = await this.calculateDirectoryChecksum(backupDir);
      metadata.size = await this.getDirectorySize(backupDir);
      
      // –°–∂–∞—Ç–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (this.config.compression.enabled) {
        const compressedPath = await this.compressBackup(backupDir);
        report.compressedSize = await this.getFileSize(compressedPath);
        report.compressionRatio = (metadata.size - report.compressedSize) / metadata.size;
      } else {
        report.compressedSize = metadata.size;
      }

      // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (this.config.encryption.enabled) {
        await this.encryptBackup(backupDir);
      }

      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (this.config.storage.remote.enabled) {
        const remoteLocation = await this.uploadToRemoteStorage(backupDir, metadata);
        report.storageLocations.push(remoteLocation);
      }

      // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
      report.storageLocations.push(backupDir);

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      const endTime = Date.now();
      metadata.duration = Math.floor((endTime - startTime) / 1000);
      metadata.status = 'completed';
      report.duration = metadata.duration;
      report.totalSize = metadata.size;

      // –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      report.performance.throughputMBps = (report.totalSize / (1024 * 1024)) / metadata.duration;

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      await this.saveBackupMetadata(metadata);
      this.backupHistory.set(backupId, metadata);

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup
      await this.cleanupOldBackups();

      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
      if (this.config.verification.integrityCheck) {
        report.checksumVerified = await this.verifyBackupIntegrity(backupId);
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (this.config.alerts.enabled && this.config.alerts.alertOnSuccess) {
        await this.sendAlert('backup_success', report);
      }
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è backup
      this.emit('backup_completed', report);

      await enhancedDbLogger.endOperation(operationId, true);
      enhancedDbLogger.info('‚úÖ –ü–æ–ª–Ω—ã–π backup –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
        backupId,
        duration: metadata.duration,
        size: metadata.size,
        components: metadata.components.length,
        compressionRatio: report.compressionRatio
      });

      return report;

    } catch (error) {
      const metadata = this.backupHistory.get(backupId);
      if (metadata) {
        metadata.status = 'failed';
        metadata.errors = [String(error)];
      }

      if (this.config.alerts.enabled && this.config.alerts.alertOnFailure) {
        await this.sendAlert('backup_failure', { error: String(error), backupId });
      }
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ backup
      this.emit('backup_failed', backupId, error);

      await enhancedDbLogger.endOperation(operationId, false);
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
      const errorToLog = error instanceof Error ? error : new Error(String(error));
      await enhancedDbLogger.logError(errorToLog);
      throw error;
    } finally {
      this.isRunning = false;
      this.currentBackupId = null;
    }
  }

  /**
   * Backup –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  private async backupComponent(
    component: BackupComponent, 
    backupDir: string, 
    metadata: BackupMetadata
  ): Promise<void> {
    enhancedDbLogger.info(`üì¶ Backup –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, {
      type: component.type,
      priority: component.priority
    });

    const componentDir = path.join(backupDir, component.name);
    await fs.mkdir(componentDir, { recursive: true });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ backup
    enhancedDbLogger.debug(`üì¶ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component.name}: ${componentDir}`, {
      componentType: component.type,
      priority: component.priority,
      metadataId: metadata.id
    });

    switch (component.type) {
      case 'database':
        await this.backupDatabase(component, componentDir);
        break;
        
      case 'secrets':
        await this.backupSecrets(component, componentDir);
        break;
        
      case 'configuration':
        await this.backupConfiguration(component, componentDir);
        break;
        
      case 'files':
        await this.backupFiles(component, componentDir);
        break;
        
      default:
        if (component.customBackupFunction) {
          const data = await component.customBackupFunction();
          await fs.writeFile(path.join(componentDir, 'custom_backup.bin'), data);
        } else {
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.type}`);
        }
    }
  }

  /**
   * Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async backupDatabase(component: BackupComponent, outputDir: string): Promise<void> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DatabaseManager –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!this.dbManager) {
      // –°–æ–∑–¥–∞–µ–º DatabaseManager —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const dbConfig = {
        host: process.env.DB_HOST || 'localhost',
        port: parseInt(process.env.DB_PORT || '5432'),
        database: process.env.DB_NAME || 'crypto_mixer',
        username: process.env.DB_USER || 'postgres',
        password: process.env.DB_PASSWORD || '',
        dialect: 'postgres' as const,
        logging: false
      };
      this.dbManager = new DatabaseManager(dbConfig);
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è backup
    enhancedDbLogger.info(`üì¶ –ù–∞—á–∞–ª–æ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, {
      outputDir,
      hasDbManager: !!this.dbManager
    });
    
    if (component.name === 'database_structure') {
      // –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const schema = await this.exportDatabaseSchema();
      await fs.writeFile(path.join(outputDir, 'schema.sql'), schema);
      
    } else if (component.name === 'database_data_critical') {
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      const tables = ['mix_requests', 'deposit_addresses', 'wallets', 'system_config'];
      for (const table of tables) {
        const data = await this.exportTableData(table);
        await fs.writeFile(path.join(outputDir, `${table}.sql`), data);
      }
      
    } else if (component.name === 'database_data_high') {
      // –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      const tables = ['blockchain_transactions', 'audit_logs', 'monitored_addresses'];
      for (const table of tables) {
        const data = await this.exportTableData(table);
        await fs.writeFile(path.join(outputDir, `${table}.sql`), data);
      }
    }
  }

  /**
   * Backup —Å–µ–∫—Ä–µ—Ç–æ–≤ (HSM/Vault)
   */
  private async backupSecrets(component: BackupComponent, outputDir: string): Promise<void> {
    if (component.name === 'hsm_configuration') {
      // HSM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π!)
      const hsmConfig = await this.exportHSMConfiguration();
      await fs.writeFile(path.join(outputDir, 'hsm_config.json'), JSON.stringify(hsmConfig));
      
    } else if (component.name === 'vault_secrets') {
      // Vault —Å–µ–∫—Ä–µ—Ç—ã (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ)
      const vaultBackup = await this.exportVaultSecrets();
      await fs.writeFile(path.join(outputDir, 'vault_backup.enc'), vaultBackup);
    }
  }

  /**
   * Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  private async backupConfiguration(component: BackupComponent, outputDir: string): Promise<void> {
    enhancedDbLogger.info(`‚öôÔ∏è Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, {
      outputDir,
      componentType: component.type
    });
    
    const config = {
      environment: process.env.NODE_ENV,
      database: {
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        name: process.env.DB_NAME
      },
      redis: {
        host: process.env.REDIS_HOST,
        port: process.env.REDIS_PORT
      },
      // –ù–ï –≤–∫–ª—é—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
      backup_timestamp: new Date().toISOString(),
      component_name: component.name
    };
    
    const configPath = path.join(outputDir, 'app_config.json');
    await fs.writeFile(configPath, JSON.stringify(config, null, 2));
    
    enhancedDbLogger.debug(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${configPath}`, {
      configSize: JSON.stringify(config).length
    });
  }

  /**
   * Backup —Ñ–∞–π–ª–æ–≤
   */
  private async backupFiles(component: BackupComponent, outputDir: string): Promise<void> {
    if (!component.path) return;
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    await this.copyDirectoryWithExclusions(component.path, outputDir, component.excludePatterns || []);
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup
   */
  async restore(options: RestoreOptions): Promise<BackupReport> {
    const operationId = await enhancedDbLogger.startOperation('backup_restore');
    
    try {
      enhancedDbLogger.info('üîÑ –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup', {
        backupId: options.backupId,
        dryRun: options.dryRun,
        components: options.components?.length || 'all'
      });

      if (this.isRunning && !options.dryRun) {
        throw new Error('Backup –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      }

      const metadata = this.backupHistory.get(options.backupId);
      if (!metadata) {
        throw new Error(`Backup ${options.backupId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
      if (options.verifyIntegrity) {
        const isValid = await this.verifyBackupIntegrity(options.backupId);
        if (!isValid) {
          throw new Error(`Backup ${options.backupId} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω`);
        }
      }

      const startTime = Date.now();
      const report: BackupReport = {
        id: `restore_${Date.now()}`,
        timestamp: new Date(),
        type: metadata.type,
        status: 'success',
        duration: 0,
        totalSize: metadata.size,
        compressedSize: 0,
        compressionRatio: 0,
        componentsProcessed: 0,
        componentsSuccessful: 0,
        componentsFailed: 0,
        checksumVerified: options.verifyIntegrity,
        encryptionApplied: metadata.encrypted,
        storageLocations: [],
        errors: [],
        warnings: [],
        performance: {
          throughputMBps: 0,
          cpuUsagePercent: 0,
          memoryUsageMB: 0,
          ioWaitPercent: 0
        }
      };

      // –ü–æ–ª—É—á–µ–Ω–∏–µ backup –¥–∞–Ω–Ω—ã—Ö
      const backupDir = path.join(this.config.storage.local.path, options.backupId);
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      if (metadata.encrypted) {
        await this.decryptBackup(backupDir);
      }

      // –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      if (metadata.compressed) {
        await this.decompressBackup(backupDir);
      }

      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const componentsToRestore = options.components 
        ? this.BACKUP_COMPONENTS.filter(c => options.components!.includes(c.name))
        : this.BACKUP_COMPONENTS;

      for (const component of componentsToRestore) {
        if (!metadata.components.includes(component.name)) {
          report.warnings.push(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ backup`);
          continue;
        }

        try {
          if (!options.dryRun) {
            await this.restoreComponent(component, backupDir, options);
          }
          report.componentsSuccessful++;
        } catch (error) {
          enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component.name}`, { 
            component: component.name, 
            error 
          });
          report.componentsFailed++;
          report.errors.push(`Component ${component.name}: ${error}`);
          
          if (!options.continueOnError && component.priority === 'critical') {
            throw error;
          }
        }
        report.componentsProcessed++;
      }

      // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
      const endTime = Date.now();
      report.duration = Math.floor((endTime - startTime) / 1000);
      report.performance.throughputMBps = (report.totalSize / (1024 * 1024)) / report.duration;

      await enhancedDbLogger.endOperation(operationId, true);
      enhancedDbLogger.info('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', {
        backupId: options.backupId,
        duration: report.duration,
        components: report.componentsSuccessful,
        warnings: report.warnings.length
      });

      return report;
      
    } catch (error) {
      await enhancedDbLogger.endOperation(operationId, false);
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
      const errorToLog = error instanceof Error ? error : new Error(String(error));
      await enhancedDbLogger.logError(errorToLog);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup
   */
  getBackupHistory(): BackupMetadata[] {
    return Array.from(this.backupHistory.values())
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ backup
   */
  getCurrentStatus(): { isRunning: boolean; currentBackupId: string | null; progress?: number } {
    return {
      isRunning: this.isRunning,
      currentBackupId: this.currentBackupId
    };
  }

  // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

  private validateConfig(): void {
    if (!this.config.storage.local.enabled && !this.config.storage.remote.enabled) {
      throw new Error('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ backup');
    }
    
    if (this.config.storage.local.enabled && !this.config.storage.local.path) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ backup');
    }
  }

  private generateBackupId(type: string): string {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const random = Math.random().toString(36).substring(2, 8);
    return `${type}_${timestamp}_${random}`;
  }

  private calculateRetentionDate(type: string): Date {
    const date = new Date();
    const retention = this.config.storage.local.retention;
    
    switch (type) {
      case 'full':
        date.setDate(date.getDate() + retention.monthly * 30);
        break;
      case 'differential':
        date.setDate(date.getDate() + retention.weekly * 7);
        break;
      case 'incremental':
        date.setDate(date.getDate() + retention.daily);
        break;
    }
    
    return date;
  }

  private async ensureDirectories(): Promise<void> {
    if (this.config.storage.local.enabled) {
      await fs.mkdir(this.config.storage.local.path, { recursive: true });
    }
  }

  private async initializeEncryptionKeys(): Promise<void> {
    if (this.config.encryption.enabled) {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      const keyId = 'backup_master_key';
      let key = this.encryptionKeys.get(keyId);
      
      if (!key) {
        key = crypto.randomBytes(32); // 256-bit key
        this.encryptionKeys.set(keyId, key);
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ Vault –∏–ª–∏ HSM
        enhancedDbLogger.warn('‚ö†Ô∏è –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è backup —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏ - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Vault –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
      }
    }
  }

  private setupSchedules(): void {
    // –ó–¥–µ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è cron, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º setTimeout
    enhancedDbLogger.info('üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è backup', {
      full: this.config.schedule.full,
      incremental: this.config.schedule.incremental
    });
  }

  private async loadBackupHistory(): Promise<void> {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ backup –∏–∑ —Ñ–∞–π–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    try {
      const historyFile = path.join(this.config.storage.local.path, 'backup_history.json');
      const data = await fs.readFile(historyFile, 'utf-8');
      const history = JSON.parse(data);
      
      for (const [id, metadata] of Object.entries(history)) {
        this.backupHistory.set(id, metadata as BackupMetadata);
      }
      
      enhancedDbLogger.info('üìö –ò—Å—Ç–æ—Ä–∏—è backup –∑–∞–≥—Ä—É–∂–µ–Ω–∞', {
        backups: this.backupHistory.size
      });
    } catch (error) {
      enhancedDbLogger.info('üìö –ò—Å—Ç–æ—Ä–∏—è backup –ø—É—Å—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π');
    }
  }

  private async verifyComponentsHealth(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è backup
    enhancedDbLogger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã');
  }

  private async gatherSystemMetadata(): Promise<any> {
    return {
      dbVersion: 'PostgreSQL 15',
      appVersion: process.env.APP_VERSION || '1.0.0',
      nodeVersion: process.version,
      environment: process.env.NODE_ENV,
      hostInfo: {
        hostname: require('os').hostname(),
        platform: process.platform,
        arch: process.arch
      }
    };
  }

  private async exportDatabaseSchema(): Promise<string> {
    if (!this.dbManager) {
      throw new Error('DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º—ã');
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å—ã
      const tables = await this.dbManager.query(`
        SELECT table_name, table_schema
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_type = 'BASE TABLE'
        ORDER BY table_name;
      `);
      
      let schemaSQL = '-- Database schema export\n';
      schemaSQL += `-- Generated at: ${new Date().toISOString()}\n\n`;
      
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
      for (const table of tables) {
        const tableName = table.table_name;
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const columns = await this.dbManager.query(`
          SELECT column_name, data_type, is_nullable, column_default
          FROM information_schema.columns 
          WHERE table_name = '${tableName}' 
          AND table_schema = 'public'
          ORDER BY ordinal_position;
        `);
        
        schemaSQL += `-- Table: ${tableName}\n`;
        schemaSQL += `CREATE TABLE IF NOT EXISTS ${tableName} (\n`;
        
        const columnDefs = columns.map((col: any) => {
          let def = `  ${col.column_name} ${col.data_type}`;
          if (col.is_nullable === 'NO') def += ' NOT NULL';
          if (col.column_default) def += ` DEFAULT ${col.column_default}`;
          return def;
        });
        
        schemaSQL += columnDefs.join(',\n');
        schemaSQL += '\n);\n\n';
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        const indexes = await this.dbManager.query(`
          SELECT indexname, indexdef
          FROM pg_indexes 
          WHERE tablename = '${tableName}' 
          AND schemaname = 'public'
          AND indexname NOT LIKE '%_pkey';
        `);
        
        for (const index of indexes) {
          schemaSQL += `${index.indexdef};\n`;
        }
        
        schemaSQL += '\n';
      }
      
      enhancedDbLogger.info('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', {
        tablesCount: tables.length,
        schemaSize: schemaSQL.length
      });
      
      return schemaSQL;
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º—ã –ë–î', { error });
      throw error;
    }
  }

  private async exportTableData(tableName: string): Promise<string> {
    if (!this.dbManager) {
      throw new Error('DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const rows = await this.dbManager.query(`SELECT * FROM ${tableName} ORDER BY id;`);
      
      if (rows.length === 0) {
        return `-- Table ${tableName} export\n-- No data found\n`;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
      const columns = await this.dbManager.query(`
        SELECT column_name, data_type
        FROM information_schema.columns 
        WHERE table_name = '${tableName}' 
        AND table_schema = 'public'
        ORDER BY ordinal_position;
      `);
      
      const columnNames = columns.map((col: any) => col.column_name);
      
      let sqlData = `-- Table ${tableName} export\n`;
      sqlData += `-- Generated at: ${new Date().toISOString()}\n`;
      sqlData += `-- Rows count: ${rows.length}\n\n`;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º INSERT statements
      for (const row of rows) {
        const values = columnNames.map((colName: string) => {
          const value = row[colName];
          if (value === null) return 'NULL';
          if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
          if (value instanceof Date) return `'${value.toISOString()}'`;
          if (typeof value === 'object') return `'${JSON.stringify(value).replace(/'/g, "''")}'`;
          return value;
        });
        
        sqlData += `INSERT INTO ${tableName} (${columnNames.join(', ')}) VALUES (${values.join(', ')});\n`;
      }
      
      sqlData += '\n';
      
      enhancedDbLogger.info('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', {
        tableName,
        rowsCount: rows.length,
        dataSize: sqlData.length
      });
      
      return sqlData;
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã', { tableName, error });
      throw error;
    }
  }

  private async exportHSMConfiguration(): Promise<any> {
    // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HSM (–±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π!)
    return {
      slots: [],
      algorithms: [],
      policies: []
    };
  }

  private async exportVaultSecrets(): Promise<Buffer> {
    // –≠–∫—Å–ø–æ—Ä—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤ Vault (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    return Buffer.from('encrypted_vault_backup');
  }

  private async calculateDirectoryChecksum(dirPath: string): Promise<string> {
    const hash = crypto.createHash(this.config.verification.checksumAlgorithm);
    
    try {
      const files = await this.getAllFilesRecursively(dirPath);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      files.sort();
      
      for (const filePath of files) {
        try {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞ –≤ hash –¥–ª—è —É—á–µ—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
          const relativePath = path.relative(dirPath, filePath);
          hash.update(relativePath);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          const fileData = await fs.readFile(filePath);
          hash.update(fileData);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
          const stats = await fs.stat(filePath);
          hash.update(Buffer.from(stats.size.toString()));
          hash.update(Buffer.from(stats.mtime.getTime().toString()));
          
        } catch (fileError) {
          enhancedDbLogger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è checksum: ${filePath}`, { error: fileError });
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ hash
          hash.update(`ERROR:${filePath}`);
        }
      }
      
      const checksum = hash.digest('hex');
      
      enhancedDbLogger.debug('üìã Checksum –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω', {
        dirPath,
        filesCount: files.length,
        algorithm: this.config.verification.checksumAlgorithm,
        checksum: checksum.substring(0, 16) + '...'
      });
      
      return checksum;
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è checksum –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏', { dirPath, error });
      throw error;
    }
  }

  private async getDirectorySize(dirPath: string): Promise<number> {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    let totalSize = 0;
    
    try {
      const stats = await fs.stat(dirPath);
      
      if (stats.isFile()) {
        return stats.size;
      }
      
      if (stats.isDirectory()) {
        const files = await fs.readdir(dirPath);
        
        for (const file of files) {
          const filePath = path.join(dirPath, file);
          totalSize += await this.getDirectorySize(filePath);
        }
      }
      
      enhancedDbLogger.debug(`üìè –†–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}: ${totalSize} –±–∞–π—Ç`);
      return totalSize;
    } catch (error) {
      enhancedDbLogger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}`, { error });
      return 0;
    }
  }

  private async getFileSize(filePath: string): Promise<number> {
    const stats = await fs.stat(filePath);
    return stats.size;
  }

  private async compressBackup(backupDir: string): Promise<string> {
    const compressedPath = `${backupDir}.tar.gz`;
    
    try {
      enhancedDbLogger.info(`üóúÔ∏è –ù–∞—á–∞–ª–æ —Å–∂–∞—Ç–∏—è backup: ${backupDir}`, {
        algorithm: this.config.compression.algorithm,
        level: this.config.compression.level
      });
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å–∂–∞—Ç–∏—è
      const output = createWriteStream(compressedPath);
      const gzip = createGzip({ level: this.config.compression.level });
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤
      const files = await this.getAllFilesRecursively(backupDir);
      
      // –°–æ–∑–¥–∞–µ–º tar-like —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é
      const archive = new Map<string, Buffer>();
      
      for (const filePath of files) {
        try {
          const relativePath = path.relative(backupDir, filePath);
          const fileData = await fs.readFile(filePath);
          archive.set(relativePath, fileData);
        } catch (fileError) {
          enhancedDbLogger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: ${filePath}`, { error: fileError });
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const archiveData = JSON.stringify(Object.fromEntries(archive), null, 2);
      const archiveBuffer = Buffer.from(archiveData);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
      await pipeline(gzip, output);
      gzip.write(archiveBuffer);
      gzip.end();
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
      await new Promise<void>((resolve, reject) => {
        output.on('finish', () => resolve());
        output.on('error', reject);
      });
      
      const stats = await fs.stat(compressedPath);
      const originalSize = await this.getDirectorySize(backupDir);
      const compressionRatio = ((originalSize - stats.size) / originalSize * 100).toFixed(2);
      
      enhancedDbLogger.info('‚úÖ Backup —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç', {
        compressedPath,
        originalSize,
        compressedSize: stats.size,
        compressionRatio: `${compressionRatio}%`
      });
      
      return compressedPath;
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è backup', { backupDir, error });
      throw error;
    }
  }

  private async encryptBackup(backupDir: string): Promise<void> {
    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ backup
    const key = this.encryptionKeys.get('backup_master_key');
    if (!key) throw new Error('–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    enhancedDbLogger.info(`üîê –ù–∞—á–∞–ª–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è backup: ${backupDir}`, {
      algorithm: this.config.encryption.algorithm,
      keyLength: key.length
    });
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const files = await this.getAllFilesRecursively(backupDir);
      
      for (const filePath of files) {
        await this.encryptFile(filePath, key);
      }
      
      enhancedDbLogger.info(`‚úÖ Backup –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: ${files.length} —Ñ–∞–π–ª–æ–≤`);
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è backup: ${backupDir}`, { error });
      throw error;
    }
  }

  private async uploadToRemoteStorage(backupDir: string, metadata: BackupMetadata): Promise<string> {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (S3, Azure, etc.)
    enhancedDbLogger.info(`‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${backupDir}`, {
      backupId: metadata.id,
      storageType: this.config.storage.remote.type,
      encrypted: metadata.encrypted
    });
    
    const remotePath = `backup/${metadata.type}/${metadata.id}`;
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AWS S3, Azure Blob, etc.
      enhancedDbLogger.debug(`üì§ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ ${this.config.storage.remote.type}`, {
        localPath: backupDir,
        remotePath,
        size: metadata.size
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
      return `${this.config.storage.remote.type}://${this.config.storage.remote.bucket || 'default-bucket'}/${remotePath}`;
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`, { error, backupDir });
      throw error;
    }
  }

  private async saveBackupMetadata(metadata: BackupMetadata): Promise<void> {
    const historyFile = path.join(this.config.storage.local.path, 'backup_history.json');
    const history = Object.fromEntries(this.backupHistory.entries());
    history[metadata.id] = metadata;
    
    await fs.writeFile(historyFile, JSON.stringify(history, null, 2));
  }

  private async cleanupOldBackups(): Promise<void> {
    const now = Date.now();
    
    for (const [id, metadata] of Array.from(this.backupHistory.entries())) {
      if (metadata.retention.getTime() < now) {
        await this.deleteBackup(id);
        this.backupHistory.delete(id);
        enhancedDbLogger.info('üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π backup', { id });
      }
    }
  }

  private async deleteBackup(backupId: string): Promise<void> {
    const backupDir = path.join(this.config.storage.local.path, backupId);
    await fs.rm(backupDir, { recursive: true, force: true });
  }

  private async verifyBackupIntegrity(backupId: string): Promise<boolean> {
    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ backup
    const metadata = this.backupHistory.get(backupId);
    if (!metadata) return false;
    
    const backupDir = path.join(this.config.storage.local.path, backupId);
    const currentChecksum = await this.calculateDirectoryChecksum(backupDir);
    
    return currentChecksum === metadata.checksum;
  }

  private async sendAlert(type: string, data: any): Promise<void> {
    enhancedDbLogger.info('üö® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è backup', { type, data });
    
    try {
      const alert = {
        type,
        timestamp: new Date().toISOString(),
        hostname: require('os').hostname(),
        service: 'backup-manager',
        data,
        severity: this.getAlertSeverity(type)
      };
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (this.config.alerts.webhookUrl) {
        await this.sendWebhookAlert(alert);
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ email –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (this.config.alerts.emailRecipients && this.config.alerts.emailRecipients.length > 0) {
        await this.sendEmailAlert(alert);
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (this.config.alerts.slackChannel) {
        await this.sendSlackAlert(alert);
      }
      
      enhancedDbLogger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ backup –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
        type,
        channels: [
          this.config.alerts.webhookUrl ? 'webhook' : null,
          this.config.alerts.emailRecipients?.length ? 'email' : null,
          this.config.alerts.slackChannel ? 'slack' : null
        ].filter(Boolean)
      });
      
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è backup', { type, error });
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É backup –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }
  }

  private async copyDirectoryWithExclusions(source: string, target: string, excludePatterns: string[]): Promise<void> {
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    enhancedDbLogger.debug(`üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏: ${source} -> ${target}`, {
      excludePatterns: excludePatterns.join(', ')
    });
    
    try {
      await fs.mkdir(target, { recursive: true });
      const items = await fs.readdir(source);
      
      for (const item of items) {
        const sourcePath = path.join(source, item);
        const targetPath = path.join(target, item);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        const shouldExclude = excludePatterns.some(pattern => {
          return item.match(new RegExp(pattern.replace('*', '.*')));
        });
        
        if (shouldExclude) {
          enhancedDbLogger.debug(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${item}`);
          continue;
        }
        
        const stats = await fs.stat(sourcePath);
        if (stats.isDirectory()) {
          await this.copyDirectoryWithExclusions(sourcePath, targetPath, excludePatterns);
        } else {
          await fs.copyFile(sourcePath, targetPath);
        }
      }
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏`, { source, target, error });
      throw error;
    }
  }

  private async decryptBackup(backupDir: string): Promise<void> {
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ backup
    const key = this.encryptionKeys.get('backup_master_key');
    if (!key) throw new Error('–ö–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    enhancedDbLogger.info(`üîì –ù–∞—á–∞–ª–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ backup: ${backupDir}`, {
      algorithm: this.config.encryption.algorithm
    });
    
    try {
      const files = await this.getAllFilesRecursively(backupDir);
      
      for (const filePath of files) {
        if (filePath.endsWith('.enc')) {
          await this.decryptFile(filePath, key);
        }
      }
      
      enhancedDbLogger.info(`‚úÖ Backup —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω`);
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ backup: ${backupDir}`, { error });
      throw error;
    }
  }

  private async decompressBackup(backupDir: string): Promise<void> {
    // –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è backup
    enhancedDbLogger.info(`üìÇ –ù–∞—á–∞–ª–æ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ backup: ${backupDir}`, {
      algorithm: this.config.compression.algorithm
    });
    
    try {
      const compressedFile = `${backupDir}.tar.gz`;
      const stats = await fs.stat(compressedFile);
      
      if (stats.isFile()) {
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è tar.gz
        enhancedDbLogger.debug(`üì¶ –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è —Ñ–∞–π–ª–∞: ${compressedFile}`);
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã tar –∏–ª–∏ node-tar
      }
      
      enhancedDbLogger.info(`‚úÖ Backup –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω`);
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ backup: ${backupDir}`, { error });
      throw error;
    }
  }

  private async restoreComponent(component: BackupComponent, backupDir: string, options: RestoreOptions): Promise<void> {
    const componentDir = path.join(backupDir, component.name);
    
    switch (component.type) {
      case 'database':
        await this.restoreDatabase(component, componentDir, options);
        break;
      case 'secrets':
        await this.restoreSecrets(component, componentDir, options);
        break;
      case 'configuration':
        await this.restoreConfiguration(component, componentDir, options);
        break;
      case 'files':
        await this.restoreFiles(component, componentDir, options);
        break;
      default:
        if (component.customRestoreFunction) {
          const data = await fs.readFile(path.join(componentDir, 'custom_backup.bin'));
          await component.customRestoreFunction(data);
        }
    }
  }

  private async restoreDatabase(component: BackupComponent, componentDir: string, options: RestoreOptions): Promise<void> {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    enhancedDbLogger.info(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, {
      componentDir,
      backupId: options.backupId,
      dryRun: options.dryRun
    });
    
    if (!this.dbManager) {
      throw new Error('DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
    
    try {
      if (component.name === 'database_structure') {
        const schemaPath = path.join(componentDir, 'schema.sql');
        const schema = await fs.readFile(schemaPath, 'utf-8');
        enhancedDbLogger.debug(`üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∏–∑: ${schemaPath}`, { 
          schemaLength: schema.length 
        });
        
        if (!options.dryRun) {
          // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã
          if (this.dbManager) {
            await this.dbManager.query(schema);
            enhancedDbLogger.info(`‚úÖ –°—Ö–µ–º–∞ –ë–î —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`, {
              schemaSize: schema.length
            });
          } else {
            enhancedDbLogger.warn(`‚ö†Ô∏è DatabaseManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã`);
          }
        }
      }
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, { error });
      throw error;
    }
  }

  private async restoreSecrets(component: BackupComponent, componentDir: string, options: RestoreOptions): Promise<void> {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
    enhancedDbLogger.info(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, {
      componentDir,
      backupId: options.backupId,
      dryRun: options.dryRun
    });
    
    try {
      if (component.name === 'hsm_configuration') {
        const configPath = path.join(componentDir, 'hsm_config.json');
        const config = await fs.readFile(configPath, 'utf-8');
        enhancedDbLogger.debug(`üîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HSM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑: ${configPath}`);
        
        if (!options.dryRun) {
          // –ü—Ä–∏–º–µ–Ω—è–µ–º HSM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          const hsmConfig = JSON.parse(config);
          
          // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º HSM
          // await this.hsmManager.applyConfiguration(hsmConfig);
          
          enhancedDbLogger.info(`‚úÖ HSM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`, {
            configSize: config.length,
            slots: hsmConfig.slots?.length || 0
          });
        }
      }
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, { error });
      throw error;
    }
  }

  private async restoreConfiguration(component: BackupComponent, componentDir: string, options: RestoreOptions): Promise<void> {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    enhancedDbLogger.info(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, {
      componentDir,
      backupId: options.backupId,
      dryRun: options.dryRun
    });
    
    try {
      const configPath = path.join(componentDir, 'app_config.json');
      const configContent = await fs.readFile(configPath, 'utf-8');
      const configData = JSON.parse(configContent);
      
      enhancedDbLogger.debug(`‚öôÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑: ${configPath}`, {
        environment: configData.environment,
        componentName: configData.component_name
      });
      
      if (!options.dryRun) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
        if (configData.database) {
          process.env.DB_HOST = configData.database.host;
          process.env.DB_PORT = configData.database.port;
          process.env.DB_NAME = configData.database.name;
        }
        
        if (configData.redis) {
          process.env.REDIS_HOST = configData.redis.host;
          process.env.REDIS_PORT = configData.redis.port;
        }
        
        enhancedDbLogger.info(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`, {
          environment: configData.environment
        });
      } else {
        enhancedDbLogger.info(`üîç Dry run: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ã–ª–∞ –±—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`, {
          environment: configData.environment
        });
      }
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, { error });
      throw error;
    }
  }

  private async restoreFiles(component: BackupComponent, componentDir: string, options: RestoreOptions): Promise<void> {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    enhancedDbLogger.info(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, {
      componentDir,
      backupId: options.backupId,
      dryRun: options.dryRun,
      targetLocation: options.restoreLocation
    });
    
    try {
      const targetDir = options.restoreLocation || component.path || '/tmp/restore';
      
      if (!options.dryRun) {
        // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        await fs.mkdir(targetDir, { recursive: true });
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ backup
        await this.copyDirectoryWithExclusions(componentDir, targetDir, []);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        await this.setDirectoryPermissions(targetDir);
        
        enhancedDbLogger.info(`‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤: ${targetDir}`);
      } else {
        enhancedDbLogger.info(`üîç Dry run: —Ñ–∞–π–ª—ã –±—ã–ª–∏ –±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤: ${targetDir}`);
      }
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name}`, { error });
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π backup
   */
  async shutdown(): Promise<void> {
    enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BackupManager');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    for (const [name, timeout] of Array.from(this.scheduledJobs.entries())) {
      clearTimeout(timeout);
      enhancedDbLogger.info(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${name}`);
    }
    this.scheduledJobs.clear();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    await this.saveBackupMetadata({} as BackupMetadata);
    
    enhancedDbLogger.info('‚úÖ BackupManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
   */
  private async getAllFilesRecursively(dirPath: string): Promise<string[]> {
    const files: string[] = [];
    
    try {
      const items = await fs.readdir(dirPath);
      
      for (const item of items) {
        const fullPath = path.join(dirPath, item);
        const stats = await fs.stat(fullPath);
        
        if (stats.isDirectory()) {
          const subFiles = await this.getAllFilesRecursively(fullPath);
          files.push(...subFiles);
        } else {
          files.push(fullPath);
        }
      }
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${dirPath}`, { error });
    }
    
    return files;
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  private async encryptFile(filePath: string, key: Buffer): Promise<void> {
    try {
      const data = await fs.readFile(filePath);
      const iv = crypto.randomBytes(16);
      const cipher = crypto.createCipheriv(this.config.encryption.algorithm, key, iv);
      
      const encrypted = Buffer.concat([
        iv,
        cipher.update(data),
        cipher.final()
      ]);
      
      await fs.writeFile(`${filePath}.enc`, encrypted);
      await fs.unlink(filePath); // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      
      enhancedDbLogger.debug(`üîê –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: ${filePath}`);
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${filePath}`, { error });
      throw error;
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  private async decryptFile(filePath: string, key: Buffer): Promise<void> {
    try {
      const encryptedData = await fs.readFile(filePath);
      const iv = encryptedData.subarray(0, 16);
      const encrypted = encryptedData.subarray(16);
      
      const decipher = crypto.createDecipheriv(this.config.encryption.algorithm, key, iv);
      const decrypted = Buffer.concat([
        decipher.update(encrypted),
        decipher.final()
      ]);
      
      const originalPath = filePath.replace('.enc', '');
      await fs.writeFile(originalPath, decrypted);
      await fs.unlink(filePath); // –£–¥–∞–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
      
      enhancedDbLogger.debug(`üîì –§–∞–π–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω: ${originalPath}`);
    } catch (error) {
      enhancedDbLogger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞: ${filePath}`, { error });
      throw error;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
   */
  private async setDirectoryPermissions(dirPath: string): Promise<void> {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ 755 –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ 644 –¥–ª—è —Ñ–∞–π–ª–æ–≤
      const items = await fs.readdir(dirPath);
      
      for (const item of items) {
        const fullPath = path.join(dirPath, item);
        const stats = await fs.stat(fullPath);
        
        if (stats.isDirectory()) {
          await fs.chmod(fullPath, 0o755);
          await this.setDirectoryPermissions(fullPath); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        } else {
          await fs.chmod(fullPath, 0o644);
        }
      }
      
      enhancedDbLogger.debug(`üîß –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è: ${dirPath}`);
    } catch (error) {
      enhancedDbLogger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: ${dirPath}`, { error });
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–∞
   */
  private getAlertSeverity(type: string): 'info' | 'warning' | 'error' | 'critical' {
    switch (type) {
      case 'backup_success':
        return 'info';
      case 'backup_failure':
      case 'restore_failure':
        return 'error';
      case 'backup_long_duration':
        return 'warning';
      case 'critical_failure':
        return 'critical';
      default:
        return 'warning';
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendWebhookAlert(alert: any): Promise<void> {
    try {
      const url = new URL(this.config.alerts.webhookUrl!);
      const data = JSON.stringify(alert);
      const client = url.protocol === 'https:' ? https : http;
      
      const options = {
        hostname: url.hostname,
        port: url.port || (url.protocol === 'https:' ? 443 : 80),
        path: url.pathname + url.search,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(data),
          'User-Agent': 'crypto-mixer-backup-manager/1.0'
        }
      };
      
      await new Promise<void>((resolve, reject) => {
        const req = client.request(options, (res) => {
          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {
            enhancedDbLogger.debug('üì§ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
              url: this.config.alerts.webhookUrl,
              status: res.statusCode
            });
            resolve();
          } else {
            reject(new Error(`Webhook responded with status ${res.statusCode}`));
          }
        });
        
        req.on('error', reject);
        req.write(data);
        req.end();
      });
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook', { error });
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendEmailAlert(alert: any): Promise<void> {
    try {
      const emailData = {
        to: this.config.alerts.emailRecipients,
        subject: `[Crypto Mixer Backup] ${alert.type} - ${alert.severity.toUpperCase()}`,
        html: this.generateEmailHTML(alert),
        text: this.generateEmailText(alert)
      };
      
      enhancedDbLogger.debug('üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ', {
        recipients: this.config.alerts.emailRecipients?.length,
        subject: emailData.subject
      });
      
      enhancedDbLogger.info('üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)', {
        recipients: emailData.to,
        subject: emailData.subject
      });
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email', { error });
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendSlackAlert(alert: any): Promise<void> {
    try {
      const slackMessage = {
        channel: this.config.alerts.slackChannel,
        username: 'Backup Manager',
        icon_emoji: this.getSlackEmoji(alert.severity),
        attachments: [{
          color: this.getSlackColor(alert.severity),
          title: `Backup Alert: ${alert.type}`,
          text: `${alert.severity.toUpperCase()}: ${JSON.stringify(alert.data, null, 2)}`,
          ts: Math.floor(new Date(alert.timestamp).getTime() / 1000),
          footer: `${alert.hostname} | ${alert.service}`
        }]
      };
      
      enhancedDbLogger.debug('üí¨ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ', {
        channel: this.config.alerts.slackChannel,
        severity: alert.severity
      });
      
      enhancedDbLogger.info('üí¨ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)', slackMessage);
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', { error });
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private generateEmailHTML(alert: any): string {
    return `
      <html>
        <body style="font-family: Arial, sans-serif; margin: 20px;">
          <h2 style="color: ${this.getAlertColor(alert.severity)};">
            üîí Crypto Mixer Backup Alert
          </h2>
          <p><strong>Type:</strong> ${alert.type}</p>
          <p><strong>Severity:</strong> ${alert.severity.toUpperCase()}</p>
          <p><strong>Timestamp:</strong> ${alert.timestamp}</p>
          <p><strong>Hostname:</strong> ${alert.hostname}</p>
          <h3>Details:</h3>
          <pre style="background: #f5f5f5; padding: 10px; border-radius: 4px;">${JSON.stringify(alert.data, null, 2)}</pre>
        </body>
      </html>
    `;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private generateEmailText(alert: any): string {
    return `\nCrypto Mixer Backup Alert\n\nType: ${alert.type}\nSeverity: ${alert.severity.toUpperCase()}\nTimestamp: ${alert.timestamp}\nHostname: ${alert.hostname}\n\nDetails:\n${JSON.stringify(alert.data, null, 2)}\n`;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∞–ª–µ—Ä—Ç–∞
   */
  private getAlertColor(severity: string): string {
    switch (severity) {
      case 'info': return '#2196F3';
      case 'warning': return '#FF9800';
      case 'error': return '#F44336';
      case 'critical': return '#9C27B0';
      default: return '#607D8B';
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –¥–ª—è Slack
   */
  private getSlackEmoji(severity: string): string {
    switch (severity) {
      case 'info': return ':information_source:';
      case 'warning': return ':warning:';
      case 'error': return ':x:';
      case 'critical': return ':rotating_light:';
      default: return ':grey_question:';
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è Slack attachment
   */
  private getSlackColor(severity: string): string {
    switch (severity) {
      case 'info': return 'good';
      case 'warning': return 'warning';
      case 'error': return 'danger';
      case 'critical': return '#9C27B0';
      default: return '#607D8B';
    }
  }
}