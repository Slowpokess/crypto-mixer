import { BackupManager, BackupConfig } from './BackupManager';
import { DisasterRecoveryManager, DisasterRecoveryConfig } from './DisasterRecoveryManager';
import { BackupMonitoring, BackupMonitoringConfig } from './BackupMonitoring';
import { BackupDashboard } from './BackupDashboard';
import { enhancedDbLogger } from '../logger';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã backup
 */
export interface IntegratedBackupSystemConfig {
  backup: BackupConfig;
  disasterRecovery: DisasterRecoveryConfig;
  monitoring: BackupMonitoringConfig;
  dashboard: {
    enabled: boolean;
    port: number;
  };
  integration: {
    autoStart: boolean;
    gracefulShutdownTimeout: number; // —Å–µ–∫—É–Ω–¥—ã
    healthCheckEnabled: boolean;
    healthCheckInterval: number; // —Å–µ–∫—É–Ω–¥—ã
  };
}

/**
 * –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export interface SystemStatus {
  overall: 'healthy' | 'warning' | 'critical' | 'down';
  components: {
    backupManager: 'running' | 'stopped' | 'error';
    disasterRecovery: 'running' | 'stopped' | 'error';
    monitoring: 'running' | 'stopped' | 'error';
    dashboard: 'running' | 'stopped' | 'error';
  };
  lastHealthCheck: Date;
  uptime: number; // —Å–µ–∫—É–Ω–¥—ã
  errors: string[];
}

/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Backup –∏ Disaster Recovery
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ enterprise-—É—Ä–æ–≤–Ω—è
 */
export class IntegratedBackupSystem {
  private config: IntegratedBackupSystemConfig;
  private backupManager: BackupManager;
  private drManager: DisasterRecoveryManager;
  private monitoring: BackupMonitoring;
  private dashboard: BackupDashboard | null = null;
  
  private isInitialized: boolean = false;
  private isRunning: boolean = false;
  private startTime: Date | null = null;
  private healthCheckInterval: NodeJS.Timeout | null = null;
  private lastHealthCheck: Date | null = null;
  private systemErrors: string[] = [];

  constructor(config: IntegratedBackupSystemConfig) {
    this.config = config;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.backupManager = new BackupManager(config.backup);
    this.drManager = new DisasterRecoveryManager(config.disasterRecovery, this.backupManager);
    this.monitoring = new BackupMonitoring(config.monitoring, this.backupManager, this.drManager);
    
    if (config.dashboard.enabled) {
      this.dashboard = new BackupDashboard(
        this.monitoring,
        this.backupManager,
        this.drManager,
        config.dashboard.port
      );
    }
    
    this.setupEventHandlers();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async initialize(): Promise<void> {
    const operationId = await enhancedDbLogger.startOperation('integrated_backup_system_init');
    
    try {
      enhancedDbLogger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Integrated Backup System');
      
      this.systemErrors = [];
      
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await this.initializeBackupManager();
      await this.initializeDisasterRecoveryManager();
      await this.initializeMonitoring();
      
      if (this.dashboard) {
        await this.initializeDashboard();
      }
      
      this.isInitialized = true;
      
      // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
      if (this.config.integration.autoStart) {
        await this.start();
      }
      
      await enhancedDbLogger.endOperation(operationId, true);
      enhancedDbLogger.info('‚úÖ Integrated Backup System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
        components: {
          backupManager: true,
          disasterRecovery: true,
          monitoring: true,
          dashboard: !!this.dashboard
        },
        autoStart: this.config.integration.autoStart
      });
      
    } catch (error) {
      await enhancedDbLogger.endOperation(operationId, false);
      await enhancedDbLogger.logError(error);
      this.systemErrors.push(`Initialization failed: ${error}`);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
   */
  async start(): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞');
    }
    
    if (this.isRunning) {
      enhancedDbLogger.warn('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    const operationId = await enhancedDbLogger.startOperation('integrated_backup_system_start');
    
    try {
      enhancedDbLogger.info('üöÄ –ó–∞–ø—É—Å–∫ Integrated Backup System');
      
      this.startTime = new Date();
      this.systemErrors = [];
      
      // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
      if (this.monitoring && this.config.monitoring.enabled) {
        await this.startMonitoring();
      }
      
      // –ó–∞–ø—É—Å–∫ disaster recovery –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      if (this.drManager && this.config.disasterRecovery.enabled) {
        await this.startDisasterRecovery();
      }
      
      // –ó–∞–ø—É—Å–∫ dashboard
      if (this.dashboard && this.config.dashboard.enabled) {
        await this.startDashboard();
      }
      
      // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ health check
      if (this.config.integration.healthCheckEnabled) {
        this.startSystemHealthCheck();
      }
      
      this.isRunning = true;
      
      await enhancedDbLogger.endOperation(operationId, true);
      enhancedDbLogger.info('‚úÖ Integrated Backup System –∑–∞–ø—É—â–µ–Ω', {
        uptime: this.getUptime(),
        components: this.getComponentsStatus()
      });
      
    } catch (error) {
      await enhancedDbLogger.endOperation(operationId, false);
      await enhancedDbLogger.logError(error);
      this.systemErrors.push(`Start failed: ${error}`);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
   */
  async stop(): Promise<void> {
    if (!this.isRunning) {
      enhancedDbLogger.warn('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      return;
    }

    const operationId = await enhancedDbLogger.startOperation('integrated_backup_system_stop');
    
    try {
      enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Integrated Backup System');
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ health check
      if (this.healthCheckInterval) {
        clearInterval(this.healthCheckInterval);
        this.healthCheckInterval = null;
      }
      
      // Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const shutdownPromises: Promise<void>[] = [];
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ dashboard (–ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã)
      if (this.dashboard) {
        shutdownPromises.push(
          this.stopDashboard().catch(error => {
            this.systemErrors.push(`Dashboard shutdown error: ${error}`);
          })
        );
      }
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      if (this.monitoring) {
        shutdownPromises.push(
          this.stopMonitoring().catch(error => {
            this.systemErrors.push(`Monitoring shutdown error: ${error}`);
          })
        );
      }
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ disaster recovery
      if (this.drManager) {
        shutdownPromises.push(
          this.stopDisasterRecovery().catch(error => {
            this.systemErrors.push(`Disaster Recovery shutdown error: ${error}`);
          })
        );
      }
      
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ backup manager (–ø–æ—Å–ª–µ–¥–Ω–∏–º)
      if (this.backupManager) {
        shutdownPromises.push(
          this.stopBackupManager().catch(error => {
            this.systemErrors.push(`Backup Manager shutdown error: ${error}`);
          })
        );
      }
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const timeout = this.config.integration.gracefulShutdownTimeout * 1000;
      await Promise.race([
        Promise.allSettled(shutdownPromises),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Shutdown timeout')), timeout)
        )
      ]);
      
      this.isRunning = false;
      this.startTime = null;
      
      await enhancedDbLogger.endOperation(operationId, true);
      enhancedDbLogger.info('‚úÖ Integrated Backup System –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', {
        errors: this.systemErrors.length
      });
      
    } catch (error) {
      await enhancedDbLogger.endOperation(operationId, false);
      await enhancedDbLogger.logError(error);
      this.systemErrors.push(`Stop failed: ${error}`);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.isRunning = false;
      this.startTime = null;
      
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
   */
  async restart(): Promise<void> {
    enhancedDbLogger.info('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Integrated Backup System');
    
    await this.stop();
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await this.start();
    
    enhancedDbLogger.info('‚úÖ Integrated Backup System –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  getSystemStatus(): SystemStatus {
    return {
      overall: this.calculateOverallStatus(),
      components: this.getComponentsStatus(),
      lastHealthCheck: this.lastHealthCheck || new Date(0),
      uptime: this.getUptime(),
      errors: [...this.systemErrors]
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  isReady(): boolean {
    return this.isInitialized && this.isRunning;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   */
  getUptime(): number {
    if (!this.startTime) return 0;
    return Math.floor((Date.now() - this.startTime.getTime()) / 1000);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ backup —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
   */
  async createBackup(options: { priority?: string } = {}): Promise<any> {
    if (!this.isReady()) {
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è backup');
    }
    
    enhancedDbLogger.info('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ backup —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É', options);
    
    try {
      const report = await this.backupManager.createFullBackup(options);
      
      enhancedDbLogger.info('‚úÖ Backup —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É', {
        backupId: report.id,
        status: report.status,
        duration: report.duration
      });
      
      return report;
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup', { error });
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
   */
  async performRecovery(planId: string, options: { dryRun?: boolean } = {}): Promise<any> {
    if (!this.isReady()) {
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
    
    enhancedDbLogger.info('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É', {
      planId,
      ...options
    });
    
    try {
      const execution = await this.drManager.manualRecovery(planId, options);
      
      enhancedDbLogger.info('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É', {
        executionId: execution.id,
        status: execution.status
      });
      
      return execution;
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', { error });
      throw error;
    }
  }

  // ========== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ==========

  private setupEventHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (error) => {
      enhancedDbLogger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Backup System', { error });
      this.systemErrors.push(`Uncaught exception: ${error.message}`);
    });

    process.on('unhandledRejection', (reason) => {
      enhancedDbLogger.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise rejection –≤ Backup System', { reason });
      this.systemErrors.push(`Unhandled rejection: ${reason}`);
    });

    // Graceful shutdown –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    const gracefulShutdown = async (signal: string) => {
      enhancedDbLogger.info(`üîö –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è graceful shutdown`);
      try {
        await this.stop();
        process.exit(0);
      } catch (error) {
        enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown', { error });
        process.exit(1);
      }
    };

    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
  }

  private async initializeBackupManager(): Promise<void> {
    try {
      await this.backupManager.initialize();
      enhancedDbLogger.info('‚úÖ BackupManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BackupManager', { error });
      throw new Error(`BackupManager initialization failed: ${error}`);
    }
  }

  private async initializeDisasterRecoveryManager(): Promise<void> {
    try {
      await this.drManager.initialize();
      enhancedDbLogger.info('‚úÖ DisasterRecoveryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DisasterRecoveryManager', { error });
      throw new Error(`DisasterRecoveryManager initialization failed: ${error}`);
    }
  }

  private async initializeMonitoring(): Promise<void> {
    try {
      await this.monitoring.initialize();
      enhancedDbLogger.info('‚úÖ BackupMonitoring –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BackupMonitoring', { error });
      throw new Error(`BackupMonitoring initialization failed: ${error}`);
    }
  }

  private async initializeDashboard(): Promise<void> {
    if (!this.dashboard) return;
    
    try {
      // Dashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      enhancedDbLogger.info('‚úÖ BackupDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BackupDashboard', { error });
      throw new Error(`BackupDashboard initialization failed: ${error}`);
    }
  }

  private async startMonitoring(): Promise<void> {
    try {
      // Monitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ enabled
      enhancedDbLogger.info('‚úÖ BackupMonitoring –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BackupMonitoring', { error });
      this.systemErrors.push(`Monitoring start failed: ${error}`);
    }
  }

  private async startDisasterRecovery(): Promise<void> {
    try {
      // DisasterRecovery –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ enabled
      enhancedDbLogger.info('‚úÖ DisasterRecoveryManager –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ DisasterRecoveryManager', { error });
      this.systemErrors.push(`DisasterRecovery start failed: ${error}`);
    }
  }

  private async startDashboard(): Promise<void> {
    if (!this.dashboard) return;
    
    try {
      await this.dashboard.start();
      enhancedDbLogger.info('‚úÖ BackupDashboard –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BackupDashboard', { error });
      this.systemErrors.push(`Dashboard start failed: ${error}`);
    }
  }

  private startSystemHealthCheck(): void {
    this.healthCheckInterval = setInterval(async () => {
      try {
        await this.performSystemHealthCheck();
      } catch (error) {
        enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ health check', { error });
        this.systemErrors.push(`Health check failed: ${error}`);
      }
    }, this.config.integration.healthCheckInterval * 1000);

    enhancedDbLogger.info('üíì –°–∏—Å—Ç–µ–º–Ω—ã–π health check –∑–∞–ø—É—â–µ–Ω', {
      interval: this.config.integration.healthCheckInterval
    });
  }

  private async performSystemHealthCheck(): Promise<void> {
    this.lastHealthCheck = new Date();
    
    const status = this.getSystemStatus();
    
    if (status.overall === 'critical' || status.overall === 'down') {
      enhancedDbLogger.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã backup', {
        status: status.overall,
        errors: status.errors,
        components: status.components
      });
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    }
    
    enhancedDbLogger.debug('üíì –°–∏—Å—Ç–µ–º–Ω—ã–π health check –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      status: status.overall,
      uptime: status.uptime,
      errors: status.errors.length
    });
  }

  private async stopMonitoring(): Promise<void> {
    if (this.monitoring) {
      await this.monitoring.shutdown();
      enhancedDbLogger.info('üõë BackupMonitoring –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  private async stopDisasterRecovery(): Promise<void> {
    if (this.drManager) {
      await this.drManager.shutdown();
      enhancedDbLogger.info('üõë DisasterRecoveryManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  private async stopDashboard(): Promise<void> {
    if (this.dashboard) {
      await this.dashboard.stop();
      enhancedDbLogger.info('üõë BackupDashboard –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  private async stopBackupManager(): Promise<void> {
    if (this.backupManager) {
      await this.backupManager.shutdown();
      enhancedDbLogger.info('üõë BackupManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  private calculateOverallStatus(): 'healthy' | 'warning' | 'critical' | 'down' {
    if (!this.isRunning) return 'down';
    
    const components = this.getComponentsStatus();
    const componentValues = Object.values(components);
    
    if (componentValues.includes('error')) return 'critical';
    if (this.systemErrors.length > 5) return 'warning';
    if (!this.isReady()) return 'warning';
    
    return 'healthy';
  }

  private getComponentsStatus() {
    return {
      backupManager: this.isRunning ? 'running' : 'stopped',
      disasterRecovery: this.isRunning && this.config.disasterRecovery.enabled ? 'running' : 'stopped',
      monitoring: this.isRunning && this.config.monitoring.enabled ? 'running' : 'stopped',
      dashboard: this.dashboard?.getStatus().isRunning ? 'running' : 'stopped'
    };
  }
}

/**
 * Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã backup
 */
export function createIntegratedBackupSystem(customConfig?: Partial<IntegratedBackupSystemConfig>): IntegratedBackupSystem {
  const defaultConfig: IntegratedBackupSystemConfig = {
    backup: {
      enabled: true,
      storage: {
        local: {
          enabled: true,
          path: '/app/backups',
          maxFiles: 50,
          retention: {
            daily: 7,
            weekly: 4,
            monthly: 12
          }
        },
        remote: {
          enabled: false,
          type: 'aws-s3',
          credentials: {},
          encryption: true
        }
      },
      schedule: {
        full: '0 2 * * *',      // 02:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        incremental: '0 */6 * * *', // –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        differential: '0 8,20 * * *' // 08:00 –∏ 20:00
      },
      compression: {
        enabled: true,
        level: 6,
        algorithm: 'gzip'
      },
      encryption: {
        enabled: true,
        algorithm: 'aes-256-gcm',
        keyRotation: true,
        keyRotationDays: 90
      },
      verification: {
        checksumAlgorithm: 'sha256',
        integrityCheck: true,
        testRestore: true,
        testRestoreFrequency: 7
      },
      alerts: {
        enabled: true,
        alertOnFailure: true,
        alertOnSuccess: false,
        alertOnLongDuration: true,
        maxDurationMinutes: 120
      }
    },
    disasterRecovery: {
      enabled: true,
      autoRecovery: {
        enabled: true,
        triggers: {
          databaseFailure: true,
          applicationCrash: true,
          dataCorruption: true,
          serviceUnavailable: true,
          manualTrigger: true
        },
        thresholds: {
          healthCheckFailures: 3,
          responseTimeMs: 5000,
          errorRate: 10,
          memoryUsagePercent: 90,
          diskUsagePercent: 95
        },
        cooldownPeriod: 15,
        maxRetries: 3
      },
      recoveryPlan: [], // Will be populated by DisasterRecoveryManager
      monitoring: {
        healthCheckInterval: 60,
        alertThresholds: {
          warning: 1,
          critical: 3,
          emergency: 5
        },
        escalation: {
          level1: ['admin@crypto-mixer.com'],
          level2: ['emergency@crypto-mixer.com'],
          level3: ['+1234567890']
        }
      },
      validation: {
        postRecoveryChecks: true,
        dataIntegrityValidation: true,
        serviceHealthValidation: true,
        performanceValidation: true,
        timeoutMinutes: 30
      },
      failover: {
        enabled: false,
        primaryDatacenter: 'primary',
        secondaryDatacenter: 'secondary',
        automaticFailover: false,
        manualApprovalRequired: true,
        replicationLag: 60
      }
    },
    monitoring: {
      enabled: true,
      thresholds: {
        maxBackupDuration: 120,
        minSuccessRate: 95,
        maxFailedBackups: 3,
        diskSpaceWarning: 80,
        diskSpaceCritical: 95,
        healthCheckInterval: 60
      },
      alerts: {
        enabled: true,
        channels: [
          {
            type: 'webhook',
            name: 'default_webhook',
            enabled: true,
            config: {
              url: process.env.BACKUP_WEBHOOK_URL || 'http://localhost:3000/webhooks/backup',
              priority: 'normal'
            },
            filters: {}
          }
        ],
        escalation: {
          enabled: true,
          levels: [
            {
              level: 1,
              channels: ['default_webhook'],
              requireAcknowledgment: false,
              autoResolve: true,
              autoResolveTimeout: 60
            }
          ],
          timeouts: [15, 30, 60],
          maxEscalations: 3
        },
        rateLimit: {
          enabled: true,
          maxAlertsPerHour: 10,
          cooldownMinutes: 5
        }
      },
      metrics: {
        retentionDays: 30,
        aggregationIntervals: [5, 15, 60, 1440],
        exportEnabled: true,
        exportFormat: 'json',
        exportPath: '/app/backup-metrics'
      },
      dashboard: {
        enabled: true,
        refreshInterval: 30,
        historyDepth: 7
      }
    },
    dashboard: {
      enabled: true,
      port: 3030
    },
    integration: {
      autoStart: true,
      gracefulShutdownTimeout: 30,
      healthCheckEnabled: true,
      healthCheckInterval: 300
    }
  };

  // –°–ª–∏—è–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  const config = mergeDeep(defaultConfig, customConfig || {});
  
  return new IntegratedBackupSystem(config);
}

/**
 * –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
 */
function mergeDeep(target: any, source: any): any {
  const result = { ...target };
  
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      result[key] = mergeDeep(target[key] || {}, source[key]);
    } else {
      result[key] = source[key];
    }
  }
  
  return result;
}