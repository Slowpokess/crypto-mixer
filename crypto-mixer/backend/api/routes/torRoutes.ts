import express from 'express';
import { torManager } from '../../utils/TorManager';
import { torMonitoringService } from '../../utils/TorMonitoringService';
import { connectionFailoverManager } from '../../utils/ConnectionFailoverManager';
import { torBlockchainClient } from '../../blockchain/TorBlockchainClient';
import { logger } from '../../utils/logger';

/**
 * API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Tor
 * 
 * –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –ü–æ–ª–Ω—ã–π API –¥–ª—è Tor —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö Tor —Å–µ—Ä–≤–∏—Å–æ–≤
 * - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫
 * - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ failover —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
 */

const router = express.Router();

/**
 * GET /api/tor/status
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ Tor
 */
router.get('/status', async (req, res) => {
  try {
    logger.debug('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ Tor');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const torStats = torManager.getStats();
    const monitoringStats = torMonitoringService.getStats();
    const failoverStats = connectionFailoverManager.getStats();
    const blockchainStats = torBlockchainClient.getStats();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const status = {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      isConnected: torStats.isInitialized && torStats.connectionInfo.isConnected,
      connectionType: failoverStats.currentStrategy,
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ø–æ—á–∫–∞—Ö
      circuitCount: torStats.connectionInfo.circuitCount,
      lastCircuitRotation: torStats.connectionInfo.lastCircuitRotation,
      
      // Hidden service –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      onionAddress: torStats.connectionInfo.onionAddress,
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      averageResponseTime: Math.round(
        (failoverStats.averageResponseTime.tor + failoverStats.averageResponseTime.direct) / 2
      ),
      
      // –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
      overallHealth: monitoringStats.overallHealth,
      healthyServices: monitoringStats.services.filter(s => s.status === 'healthy').length,
      totalServices: monitoringStats.services.length,
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
      requestStats: {
        total: failoverStats.totalAttempts,
        torAttempts: failoverStats.torAttempts,
        directAttempts: failoverStats.directAttempts,
        torSuccessRate: Math.round(failoverStats.torSuccessRate),
        directSuccessRate: Math.round(failoverStats.directSuccessRate),
      },
      
      // –û—à–∏–±–∫–∏
      errors: torStats.connectionInfo.errors.slice(-3), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      lastUpdate: new Date().toISOString(),
      uptime: monitoringStats.hiddenServiceUptime,
      
      // –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
      services: monitoringStats.services.map(service => ({
        name: service.name,
        type: service.type,
        status: service.status,
        responseTime: service.responseTime,
        lastCheck: service.lastCheck,
      })),
      
      // Blockchain —Å—Ç–∞—Ç—É—Å
      blockchainHealth: Object.keys(blockchainStats).reduce((acc, symbol) => {
        const currencyStats = blockchainStats[symbol];
        const healthyEndpoints = currencyStats.endpoints.filter(ep => ep.errorCount < 5).length;
        acc[symbol] = {
          healthyEndpoints,
          totalEndpoints: currencyStats.endpoints.length,
          isHealthy: healthyEndpoints > 0,
        };
        return acc;
      }, {}),
    };

    res.json(status);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Tor:', error);
    res.status(500).json({
      error: 'Failed to get Tor status',
      message: error.message,
    });
  }
});

/**
 * GET /api/tor/detailed
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
router.get('/detailed', async (req, res) => {
  try {
    logger.debug('üìä –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ Tor');

    const response = {
      torManager: torManager.getStats(),
      monitoring: torMonitoringService.getStats(),
      failover: {
        ...connectionFailoverManager.getStats(),
        currentConnections: Object.fromEntries(connectionFailoverManager.getCurrentConnections()),
        recentAttempts: connectionFailoverManager.getAttemptHistory(20),
      },
      blockchain: torBlockchainClient.getStats(),
      timestamp: new Date().toISOString(),
    };

    res.json(response);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({
      error: 'Failed to get detailed status',
      message: error.message,
    });
  }
});

/**
 * POST /api/tor/rotate
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è Tor —Ü–µ–ø–æ—á–µ–∫
 */
router.post('/rotate', async (req, res) => {
  try {
    logger.info('üîÑ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫');

    // –†–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫–∏ –≤ TorManager
    await torManager.rotateCircuit();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    await torMonitoringService.forceCircuitRotation();
    
    res.json({
      success: true,
      message: 'Circuit rotation initiated',
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–µ–∫:', error);
    res.status(500).json({
      error: 'Failed to rotate circuits',
      message: error.message,
    });
  }
});

/**
 * POST /api/tor/connection/:type
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
router.post('/connection/:requestType/:connectionType', async (req, res) => {
  try {
    const { requestType, connectionType } = req.params;
    
    logger.info(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ ${requestType} –Ω–∞ ${connectionType}`);

    if (!['tor', 'direct'].includes(connectionType)) {
      return res.status(400).json({
        error: 'Invalid connection type',
        message: 'Connection type must be "tor" or "direct"',
      });
    }

    connectionFailoverManager.forceConnectionType(requestType, connectionType as 'tor' | 'direct');

    res.json({
      success: true,
      message: `Connection type changed to ${connectionType} for ${requestType}`,
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    res.status(500).json({
      error: 'Failed to change connection type',
      message: error.message,
    });
  }
});

/**
 * GET /api/tor/health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö Tor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
router.get('/health', async (req, res) => {
  try {
    logger.debug('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Tor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');

    // –í—ã–ø–æ–ª–Ω—è–µ–º health check –¥–ª—è blockchain –∫–ª–∏–µ–Ω—Ç–æ–≤
    const blockchainHealth = await torBlockchainClient.healthCheck();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const monitoringStats = torMonitoringService.getStats();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    let torConnectionTest = null;
    try {
      torConnectionTest = await torManager.testConnection();
    } catch (error) {
      torConnectionTest = { error: error.message };
    }

    const healthReport = {
      overall: monitoringStats.overallHealth,
      components: {
        torManager: {
          status: torManager.getStats().isInitialized ? 'healthy' : 'unhealthy',
          details: torManager.getStats(),
        },
        monitoring: {
          status: monitoringStats.overallHealth,
          services: monitoringStats.services.length,
          healthyServices: monitoringStats.services.filter(s => s.status === 'healthy').length,
        },
        blockchain: {
          status: Object.values(blockchainHealth).every(h => h.status === 'healthy') ? 'healthy' : 'degraded',
          details: blockchainHealth,
        },
        connectionTest: {
          status: torConnectionTest.error ? 'failed' : 'passed',
          details: torConnectionTest,
        },
      },
      timestamp: new Date().toISOString(),
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTTP —Å—Ç–∞—Ç—É—Å
    const httpStatus = healthReport.overall === 'critical' ? 503 : 
                       healthReport.overall === 'degraded' ? 207 : 200;

    res.status(httpStatus).json(healthReport);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error);
    res.status(500).json({
      error: 'Health check failed',
      message: error.message,
    });
  }
});

/**
 * GET /api/tor/metrics
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
router.get('/metrics', async (req, res) => {
  try {
    const { timeframe = '1h' } = req.query;
    
    logger.debug(`üìà –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ Tor –∑–∞ ${timeframe}`);

    const failoverStats = connectionFailoverManager.getStats();
    const monitoringStats = torMonitoringService.getStats();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const recentAttempts = connectionFailoverManager.getAttemptHistory(100);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const now = Date.now();
    const timeframes = {
      '5m': 5 * 60 * 1000,
      '15m': 15 * 60 * 1000,
      '1h': 60 * 60 * 1000,
      '24h': 24 * 60 * 60 * 1000,
    };
    
    const timeframeMs = timeframes[timeframe] || timeframes['1h'];
    const cutoffTime = new Date(now - timeframeMs);
    
    const relevantAttempts = recentAttempts.filter(
      attempt => attempt.timestamp >= cutoffTime
    );

    const metrics = {
      timeframe,
      totalRequests: relevantAttempts.length,
      successfulRequests: relevantAttempts.filter(a => a.success).length,
      failedRequests: relevantAttempts.filter(a => !a.success).length,
      
      byStrategy: {
        tor: {
          requests: relevantAttempts.filter(a => a.strategy === 'tor').length,
          successful: relevantAttempts.filter(a => a.strategy === 'tor' && a.success).length,
          averageResponseTime: relevantAttempts
            .filter(a => a.strategy === 'tor')
            .reduce((sum, a) => sum + a.responseTime, 0) / 
            Math.max(relevantAttempts.filter(a => a.strategy === 'tor').length, 1),
        },
        direct: {
          requests: relevantAttempts.filter(a => a.strategy === 'direct').length,
          successful: relevantAttempts.filter(a => a.strategy === 'direct' && a.success).length,
          averageResponseTime: relevantAttempts
            .filter(a => a.strategy === 'direct')
            .reduce((sum, a) => sum + a.responseTime, 0) / 
            Math.max(relevantAttempts.filter(a => a.strategy === 'direct').length, 1),
        },
      },
      
      failovers: failoverStats.failoverCount,
      recoveries: failoverStats.recoveryCount,
      lastFailover: failoverStats.lastFailover,
      
      serviceHealth: monitoringStats.services.reduce((acc, service) => {
        acc[service.name] = {
          status: service.status,
          responseTime: service.responseTime,
          uptime: service.uptime,
          errorCount: service.errorCount,
        };
        return acc;
      }, {}),
      
      timestamp: new Date().toISOString(),
    };

    res.json(metrics);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error);
    res.status(500).json({
      error: 'Failed to get metrics',
      message: error.message,
    });
  }
});

/**
 * POST /api/tor/emergency-failover
 * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ direct
 */
router.post('/emergency-failover', async (req, res) => {
  try {
    logger.warn('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ direct');

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–∞ direct
    const connectionTypes = ['web', 'api', 'blockchain', 'monitoring'];
    
    for (const type of connectionTypes) {
      try {
        connectionFailoverManager.forceConnectionType(type, 'direct');
      } catch (error) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å ${type}:`, error.message);
      }
    }

    res.json({
      success: true,
      message: 'Emergency failover executed',
      affectedConnections: connectionTypes,
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', error);
    res.status(500).json({
      error: 'Emergency failover failed',
      message: error.message,
    });
  }
});

/**
 * GET /api/tor/onion-address
 * –ü–æ–ª—É—á–µ–Ω–∏–µ onion –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
 */
router.get('/onion-address', async (req, res) => {
  try {
    logger.debug('üßÖ –ó–∞–ø—Ä–æ—Å onion –∞–¥—Ä–µ—Å–∞');

    const torStats = torManager.getStats();
    const monitoringStats = torMonitoringService.getStats();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ onion –∞–¥—Ä–µ—Å–∞
    const onionAddresses = {
      web: null,
      api: null,
      admin: null,
      monitoring: null,
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º onion –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    for (const service of monitoringStats.services) {
      if (service.type === 'hidden_service' && service.onionAddress) {
        const serviceName = service.name.replace('mixer_', '');
        onionAddresses[serviceName] = service.onionAddress;
      }
    }

    res.json({
      onionAddresses,
      primaryAddress: torStats.connectionInfo.onionAddress,
      isAvailable: Object.values(onionAddresses).some(addr => addr !== null),
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è onion –∞–¥—Ä–µ—Å–∞:', error);
    res.status(500).json({
      error: 'Failed to get onion address',
      message: error.message,
    });
  }
});

export default router;