import { Request, Response, NextFunction, Express } from 'express';
import { EnhancedRateLimiter, defaultRateLimitConfig, RateLimitConfig } from './rateLimiting.enhanced';
import { AdvancedDDoSProtection, defaultDDoSConfig, DDoSConfig } from './ddosProtection';
import { enhancedDbLogger } from '../../utils/logger';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è crypto-mixer
 * 
 * RUSSIAN COMMENTS: –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –≤ –µ–¥–∏–Ω—ã–π middleware
 * - Rate limiting —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
 * - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è DDoS –∑–∞—â–∏—Ç–∞ —Å ML –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏  
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥
 * - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —É–≥—Ä–æ–∑–∞–º
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

export interface SecurityConfig {
  enabled: boolean;
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º
  rateLimiting: RateLimitConfig;
  ddosProtection: DDoSConfig;
  
  // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  global: {
    trustProxy: boolean;           // –î–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    logLevel: 'debug' | 'info' | 'warn' | 'error';
    blockDuration: number;         // –ë–∞–∑–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (—Å–µ–∫)
    whitelistBypass: boolean;      // –û–±—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
  };
  
  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
  integration: {
    prometheus: {
      enabled: boolean;
      port: number;
      path: string;
    };
    elasticsearch: {
      enabled: boolean;
      host: string;
      index: string;
    };
    webhook: {
      enabled: boolean;
      url: string;
      secret?: string;
    };
  };
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  autoActions: {
    escalateToCloudflare: boolean;   // –≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ Cloudflare
    banPersistentAttackers: boolean; // –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –±–∞–Ω –∞—Ç–∞–∫—É—é—â–∏—Ö
    adaptiveThresholds: boolean;     // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    emergencyMode: {
      enabled: boolean;
      trigger: {
        attacksPerMinute: number;
        blockedIPsCount: number;
      };
      action: 'throttle' | 'lockdown' | 'maintenance';
    };
  };
}

export interface SecurityEvent {
  type: 'rate_limit_exceeded' | 'ddos_detected' | 'ip_blocked' | 'attack_mitigated' | 'emergency_mode';
  severity: 'low' | 'medium' | 'high' | 'critical';
  source: string;
  details: any;
  timestamp: Date;
  metadata?: {
    ip?: string;
    userAgent?: string;
    endpoint?: string;
    attackType?: string;
    confidence?: number;
  };
}

/**
 * RUSSIAN: –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
export class SecurityMiddleware {
  private config: SecurityConfig;
  private rateLimiter: EnhancedRateLimiter;
  private ddosProtection: AdvancedDDoSProtection;
  private isActive: boolean = false;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  private securityStats = {
    totalRequests: 0,
    blockedRequests: 0,
    rateLimitedRequests: 0,
    ddosAttacksDetected: 0,
    attacksMitigated: 0,
    emergencyModeActivations: 0,
    topAttackingIPs: new Map<string, number>(),
    attackTypes: new Map<string, number>()
  };
  
  // –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  private securityEvents: SecurityEvent[] = [];
  private maxEventsHistory = 10000;
  
  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  private emergencyMode = {
    active: false,
    activatedAt: null as Date | null,
    reason: '',
    level: 0
  };

  constructor(config: Partial<SecurityConfig> = {}) {
    this.config = this.mergeConfig(config);
    
    // RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã
    this.rateLimiter = new EnhancedRateLimiter(this.config.rateLimiting);
    this.ddosProtection = new AdvancedDDoSProtection(this.config.ddosProtection);
    
    this.setupEventListeners();
    
    enhancedDbLogger.info('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', {
      rateLimiting: this.config.rateLimiting.redis.enabled,
      ddosProtection: this.config.ddosProtection.enabled,
      emergencyMode: this.config.autoActions.emergencyMode.enabled
    });
  }

  /**
   * RUSSIAN: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π
   */
  private mergeConfig(userConfig: Partial<SecurityConfig>): SecurityConfig {
    const defaultConfig: SecurityConfig = {
      enabled: true,
      rateLimiting: defaultRateLimitConfig,
      ddosProtection: defaultDDoSConfig,
      global: {
        trustProxy: true,
        logLevel: 'info',
        blockDuration: 300,
        whitelistBypass: true
      },
      integration: {
        prometheus: {
          enabled: false,
          port: 9090,
          path: '/metrics'
        },
        elasticsearch: {
          enabled: false,
          host: 'localhost:9200',
          index: 'crypto-mixer-security'
        },
        webhook: {
          enabled: false,
          url: ''
        }
      },
      autoActions: {
        escalateToCloudflare: false,
        banPersistentAttackers: true,
        adaptiveThresholds: true,
        emergencyMode: {
          enabled: true,
          trigger: {
            attacksPerMinute: 50,
            blockedIPsCount: 100
          },
          action: 'throttle'
        }
      }
    };

    return {
      ...defaultConfig,
      ...userConfig,
      rateLimiting: { ...defaultConfig.rateLimiting, ...userConfig.rateLimiting },
      ddosProtection: { ...defaultConfig.ddosProtection, ...userConfig.ddosProtection },
      global: { ...defaultConfig.global, ...userConfig.global },
      integration: { ...defaultConfig.integration, ...userConfig.integration },
      autoActions: { ...defaultConfig.autoActions, ...userConfig.autoActions }
    };
  }

  /**
   * RUSSIAN: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –ø–æ–¥—Å–∏—Å—Ç–µ–º
   */
  private setupEventListeners(): void {
    // RUSSIAN: –°–æ–±—ã—Ç–∏—è –æ—Ç DDoS –∑–∞—â–∏—Ç—ã
    this.ddosProtection.on('attack_detected', (attack) => {
      this.handleSecurityEvent({
        type: 'ddos_detected',
        severity: attack.severity,
        source: 'ddos_protection',
        details: attack,
        timestamp: new Date(),
        metadata: {
          attackType: attack.type,
          confidence: attack.confidence
        }
      });
    });

    this.ddosProtection.on('ip_blocked', (blockInfo) => {
      this.handleSecurityEvent({
        type: 'ip_blocked',
        severity: 'medium',
        source: 'ddos_protection',
        details: blockInfo,
        timestamp: new Date(),
        metadata: {
          ip: blockInfo.ip
        }
      });
    });

    // RUSSIAN: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    setInterval(() => {
      this.checkEmergencyConditions();
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * RUSSIAN: –ì–ª–∞–≤–Ω—ã–π middleware –¥–ª—è Express
   */
  public middleware() {
    return async (req: Request, res: Response, next: NextFunction) => {
      if (!this.config.enabled) {
        return next();
      }

      const startTime = Date.now();
      this.securityStats.totalRequests++;

      try {
        // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        if (this.emergencyMode.active) {
          return this.handleEmergencyMode(req, res);
        }

        // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º DDoS –∑–∞—â–∏—Ç—É –ø–µ—Ä–≤–æ–π
        const ddosResult = await this.applyDDoSProtection(req, res);
        if (!ddosResult.allowed) {
          this.securityStats.blockedRequests++;
          return; // DDoS –∑–∞—â–∏—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –æ—Ç–≤–µ—Ç
        }

        // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
        const rateLimitResult = await this.applyRateLimiting(req, res);
        if (!rateLimitResult.allowed) {
          this.securityStats.rateLimitedRequests++;
          return; // Rate limiter —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—Ç–≤–µ—Ç
        }

        // RUSSIAN: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        this.recordRequestMetrics(req, startTime);

        // RUSSIAN: –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware
        next();

      } catch (error) {
        enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', { error });
        // RUSSIAN: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open)
        next();
      }
    };
  }

  /**
   * RUSSIAN: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ DDoS –∑–∞—â–∏—Ç—ã
   */
  private async applyDDoSProtection(req: Request, res: Response): Promise<{ allowed: boolean }> {
    return new Promise((resolve) => {
      const ddosMiddleware = this.ddosProtection.middleware();
      
      // RUSSIAN: –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DDoS middleware
      const originalSend = res.send;
      const originalJson = res.json;
      let responseSent = false;

      res.send = function(body) {
        responseSent = true;
        resolve({ allowed: false });
        return originalSend.call(this, body);
      };

      res.json = function(body) {
        responseSent = true;
        resolve({ allowed: false });
        return originalJson.call(this, body);
      };

      ddosMiddleware(req, res, () => {
        if (!responseSent) {
          resolve({ allowed: true });
        }
      });
    });
  }

  /**
   * RUSSIAN: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ rate limiting
   */
  private async applyRateLimiting(req: Request, res: Response): Promise<{ allowed: boolean }> {
    return new Promise((resolve) => {
      const rateLimitMiddleware = this.rateLimiter.middleware();
      
      const originalSend = res.send;
      const originalJson = res.json;
      let responseSent = false;

      res.send = function(body) {
        responseSent = true;
        resolve({ allowed: false });
        return originalSend.call(this, body);
      };

      res.json = function(body) {
        responseSent = true;
        resolve({ allowed: false });
        return originalJson.call(this, body);
      };

      rateLimitMiddleware(req, res, () => {
        if (!responseSent) {
          resolve({ allowed: true });
        }
      });
    });
  }

  /**
   * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private handleSecurityEvent(event: SecurityEvent): void {
    this.securityEvents.push(event);
    
    // RUSSIAN: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
    if (this.securityEvents.length > this.maxEventsHistory) {
      this.securityEvents = this.securityEvents.slice(-this.maxEventsHistory);
    }

    // RUSSIAN: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ç–∞–∫
    if (event.type === 'ddos_detected') {
      this.securityStats.ddosAttacksDetected++;
      
      if (event.metadata?.attackType) {
        const count = this.securityStats.attackTypes.get(event.metadata.attackType) || 0;
        this.securityStats.attackTypes.set(event.metadata.attackType, count + 1);
      }
    }

    if (event.metadata?.ip) {
      const count = this.securityStats.topAttackingIPs.get(event.metadata.ip) || 0;
      this.securityStats.topAttackingIPs.set(event.metadata.ip, count + 1);
    }

    // RUSSIAN: –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const logLevel = event.severity === 'critical' || event.severity === 'high' ? 'warn' : 'info';
    enhancedDbLogger[logLevel](`üö® –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${event.type}`, {
      severity: event.severity,
      source: event.source,
      metadata: event.metadata
    });

    // RUSSIAN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    if (this.config.integration.webhook.enabled && event.severity === 'critical') {
      this.sendWebhookNotification(event);
    }
  }

  /**
   * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  private checkEmergencyConditions(): void {
    if (!this.config.autoActions.emergencyMode.enabled || this.emergencyMode.active) {
      return;
    }

    const now = Date.now();
    const oneMinuteAgo = now - 60000;

    // RUSSIAN: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ç–∞–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    const recentAttacks = this.securityEvents.filter(
      event => event.timestamp.getTime() > oneMinuteAgo && 
      (event.type === 'ddos_detected' || event.type === 'rate_limit_exceeded')
    ).length;

    const blockedIPs = this.ddosProtection.getStatistics().blockedIPs;

    const trigger = this.config.autoActions.emergencyMode.trigger;

    if (recentAttacks >= trigger.attacksPerMinute || blockedIPs >= trigger.blockedIPsCount) {
      this.activateEmergencyMode(`–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ—Ä–æ–≥–∏: –∞—Ç–∞–∫–∏=${recentAttacks}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP=${blockedIPs}`);
    }
  }

  /**
   * RUSSIAN: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  private activateEmergencyMode(reason: string): void {
    this.emergencyMode = {
      active: true,
      activatedAt: new Date(),
      reason,
      level: 1
    };

    this.securityStats.emergencyModeActivations++;

    enhancedDbLogger.error('üö® –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò', {
      reason,
      action: this.config.autoActions.emergencyMode.action,
      timestamp: this.emergencyMode.activatedAt
    });

    this.handleSecurityEvent({
      type: 'emergency_mode',
      severity: 'critical',
      source: 'security_middleware',
      details: { reason, action: this.config.autoActions.emergencyMode.action },
      timestamp: new Date()
    });

    // RUSSIAN: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
    setTimeout(() => {
      this.deactivateEmergencyMode();
    }, 15 * 60 * 1000);
  }

  /**
   * RUSSIAN: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  private deactivateEmergencyMode(): void {
    if (!this.emergencyMode.active) return;

    enhancedDbLogger.info('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', {
      duration: this.emergencyMode.activatedAt ? 
        Date.now() - this.emergencyMode.activatedAt.getTime() : 0
    });

    this.emergencyMode = {
      active: false,
      activatedAt: null,
      reason: '',
      level: 0
    };
  }

  /**
   * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
   */
  private handleEmergencyMode(req: Request, res: Response): void {
    const action = this.config.autoActions.emergencyMode.action;

    switch (action) {
      case 'throttle':
        // RUSSIAN: –ñ–µ—Å—Ç–∫–æ–µ throttling - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        if (!this.isCriticalEndpoint(req.path)) {
          return res.status(503).json({
            error: 'Service Temporarily Unavailable',
            message: '–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.',
            emergencyMode: true,
            retryAfter: 300
          });
        }
        break;

      case 'lockdown':
        // RUSSIAN: –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return res.status(503).json({
          error: 'Service Locked Down',
          message: '–°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∞—Ç–∞–∫–∏.',
          emergencyMode: true,
          retryAfter: 900
        });

      case 'maintenance':
        // RUSSIAN: –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        return res.status(503).json({
          error: 'Service Under Maintenance',
          message: '–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.',
          emergencyMode: true,
          retryAfter: 1800
        });
    }
  }

  /**
   * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
   */
  private isCriticalEndpoint(path: string): boolean {
    const criticalPaths = [
      '/api/v1/health',
      '/api/v1/status', 
      '/api/v1/admin',
      '/api/v1/emergency'
    ];

    return criticalPaths.some(criticalPath => path.startsWith(criticalPath));
  }

  /**
   * RUSSIAN: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
   */
  private recordRequestMetrics(req: Request, startTime: number): void {
    const responseTime = Date.now() - startTime;
    
    // RUSSIAN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
    // Rate limiter –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–≤–æ–π middleware
    // DDoS protection —Ç–∞–∫–∂–µ –≤–µ–¥–µ—Ç —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  }

  /**
   * RUSSIAN: –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private async sendWebhookNotification(event: SecurityEvent): Promise<void> {
    if (!this.config.integration.webhook.url) return;

    try {
      const payload = {
        event: event.type,
        severity: event.severity,
        timestamp: event.timestamp.toISOString(),
        source: event.source,
        details: event.details,
        metadata: event.metadata,
        systemInfo: {
          service: 'crypto-mixer',
          instance: process.env.INSTANCE_ID || 'unknown',
          version: process.env.VERSION || '1.0.0'
        }
      };

      // RUSSIAN: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
      enhancedDbLogger.info('üì§ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { 
        url: this.config.integration.webhook.url,
        event: event.type 
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook', { error });
    }
  }

  /**
   * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  public getSecurityStatistics(): {
    general: typeof this.securityStats;
    rateLimiter: any;
    ddosProtection: any;
    emergencyMode: typeof this.emergencyMode;
  } {
    return {
      general: { ...this.securityStats },
      rateLimiter: this.rateLimiter.getStatistics(),
      ddosProtection: this.ddosProtection.getStatistics(),
      emergencyMode: { ...this.emergencyMode }
    };
  }

  /**
   * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  public getSecurityEvents(limit: number = 100): SecurityEvent[] {
    return this.securityEvents
      .slice(-limit)
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
  }

  /**
   * RUSSIAN: –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
   */
  public async toggleEmergencyMode(activate: boolean, reason?: string): Promise<void> {
    if (activate && !this.emergencyMode.active) {
      this.activateEmergencyMode(reason || '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é');
    } else if (!activate && this.emergencyMode.active) {
      this.deactivateEmergencyMode();
    }
  }

  /**
   * RUSSIAN: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  public updateConfiguration(newConfig: Partial<SecurityConfig>): void {
    this.config = this.mergeConfig(newConfig);
    
    enhancedDbLogger.info('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
      rateLimitingEnabled: this.config.rateLimiting.redis.enabled,
      ddosProtectionEnabled: this.config.ddosProtection.enabled
    });
  }

  /**
   * RUSSIAN: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  public async shutdown(): Promise<void> {
    enhancedDbLogger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');

    await this.rateLimiter.shutdown();
    await this.ddosProtection.shutdown();

    if (this.emergencyMode.active) {
      this.deactivateEmergencyMode();
    }

    this.isActive = false;
    enhancedDbLogger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

/**
 * RUSSIAN: –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
export function createSecurityMiddleware(config?: Partial<SecurityConfig>): SecurityMiddleware {
  return new SecurityMiddleware(config);
}

/**
 * RUSSIAN: –•–µ–ª–ø–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
 */
export function setupSecurity(app: Express, config?: Partial<SecurityConfig>): SecurityMiddleware {
  const security = createSecurityMiddleware(config);
  
  // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
  app.use(security.middleware());
  
  // RUSSIAN: –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  app.get('/api/v1/security/stats', (req, res) => {
    const stats = security.getSecurityStatistics();
    res.json(stats);
  });

  // RUSSIAN: –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  app.get('/api/v1/security/events', (req, res) => {
    const limit = parseInt(req.query.limit as string) || 100;
    const events = security.getSecurityEvents(limit);
    res.json(events);
  });

  // RUSSIAN: –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
  app.post('/api/v1/security/emergency', async (req, res) => {
    const { activate, reason } = req.body;
    await security.toggleEmergencyMode(activate, reason);
    res.json({ success: true, emergencyMode: activate });
  });

  enhancedDbLogger.info('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
  
  return security;
}