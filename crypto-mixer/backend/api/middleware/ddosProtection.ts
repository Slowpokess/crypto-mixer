import { Request, Response, NextFunction } from 'express';
import { EventEmitter } from 'events';
import { enhancedDbLogger } from '../../utils/logger';

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç DDoS –∞—Ç–∞–∫ –¥–ª—è crypto-mixer
 * 
 * RUSSIAN COMMENTS: –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞—â–∏—Ç—ã –æ—Ç DDoS
 * - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ç–∏–ø–∞–º –∞—Ç–∞–∫
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
 * - –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ DDoS (volumetric, protocol, application layer)
 */

export interface DDoSConfig {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  enabled: boolean;
  sensitivity: 'low' | 'medium' | 'high' | 'adaptive';
  
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
  thresholds: {
    requestsPerSecond: number;      // –û–±—â–∏–π RPS
    requestsPerIP: number;          // RPS —Å –æ–¥–Ω–æ–≥–æ IP
    concurrentConnections: number;  // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    uniqueIPsPerMinute: number;     // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP –≤ –º–∏–Ω—É—Ç—É
    errorRate: number;              // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫
    payloadSize: number;            // –†–∞–∑–º–µ—Ä payload –≤ –±–∞–π—Ç–∞—Ö
    requestDuration: number;        // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –≤ –º—Å
  };
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  patternDetection: {
    enabled: boolean;
    algorithms: string[];           // ['entropy', 'clustering', 'statistical']
    analysisWindow: number;         // –û–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    minSamples: number;            // –ú–∏–Ω–∏–º—É–º –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  };
  
  // –¢–∏–ø—ã –∞—Ç–∞–∫ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  attackTypes: {
    volumetric: boolean;           // –û–±—ä–µ–º–Ω—ã–µ –∞—Ç–∞–∫–∏
    slowloris: boolean;           // Slow connection attacks
    httpFlood: boolean;           // HTTP flood attacks
    amplification: boolean;       // Amplification attacks
    botnet: boolean;             // Botnet attacks
  };
  
  // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞—Ç–∞–∫–∏
  mitigation: {
    autoBlock: boolean;           // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    blockDuration: number;        // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    escalation: {
      enabled: boolean;
      levels: Array<{
        threshold: number;        // –ü–æ—Ä–æ–≥ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        action: string;          // 'throttle' | 'block' | 'captcha' | 'alert'
        duration: number;        // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
      }>;
    };
  };
  
  // –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
  machineLearning: {
    enabled: boolean;
    model: 'statistical' | 'neural' | 'ensemble';
    trainingPeriod: number;       // –ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
    adaptationRate: number;       // –°–∫–æ—Ä–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (0-1)
  };
  
  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è IP
  reputation: {
    enabled: boolean;
    databases: string[];          // ['tor', 'malware', 'proxy', 'botnet']
    trustScore: {
      minScore: number;           // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
      decayRate: number;          // –°–∫–æ—Ä–æ—Å—Ç—å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    };
  };
  
  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
  external: {
    cloudflare: {
      enabled: boolean;
      apiKey?: string;
      zoneId?: string;
    };
    fail2ban: {
      enabled: boolean;
      logPath: string;
    };
  };
}

export interface AttackSignature {
  type: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  confidence: number;             // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ (0-1)
  indicators: string[];           // –°–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞—Ç–∞–∫–∏
  sourceIPs: string[];            // IP –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  targetEndpoints: string[];      // –¶–µ–ª–µ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
  startTime: Date;
  endTime?: Date;
  metrics: {
    requestCount: number;
    uniqueIPs: number;
    bandwidth: number;            // –ë–∞–π—Ç/—Å–µ–∫
    errorRate: number;
    avgResponseTime: number;
  };
}

export interface TrafficStats {
  timestamp: Date;
  requestsPerSecond: number;
  uniqueIPs: number;
  topIPs: Array<{ ip: string; count: number; reputation: number }>;
  topEndpoints: Array<{ endpoint: string; count: number }>;
  topUserAgents: Array<{ userAgent: string; count: number }>;
  errorRates: { [statusCode: number]: number };
  averageResponseTime: number;
  totalBandwidth: number;
  suspiciousActivity: number;
  geolocation: { [country: string]: number };
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è DDoS –∑–∞—â–∏—Ç–∞
 */
export class AdvancedDDoSProtection extends EventEmitter {
  private config: DDoSConfig;
  private isActive: boolean = false;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
  private trafficHistory: TrafficStats[] = [];
  private currentWindow: Map<string, any> = new Map();
  private ipReputation: Map<string, number> = new Map();
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏
  private activeAttacks: Map<string, AttackSignature> = new Map();
  private attackHistory: AttackSignature[] = [];
  
  // –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
  private mlModel: any = null;
  private trainingData: any[] = [];
  
  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  private blockedIPs: Map<string, { reason: string; until: Date; level: number }> = new Map();
  private suspiciousIPs: Set<string> = new Set();
  
  // –¢–∞–π–º–µ—Ä—ã
  private analysisInterval: NodeJS.Timeout | null = null;
  private cleanupInterval: NodeJS.Timeout | null = null;

  constructor(config: DDoSConfig) {
    super();
    this.config = config;
    
    if (this.config.enabled) {
      this.initialize();
    }
  }

  /**
   * RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã DDoS –∑–∞—â–∏—Ç—ã
   */
  private async initialize(): Promise<void> {
    enhancedDbLogger.info('üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π DDoS –∑–∞—â–∏—Ç—ã', {
      sensitivity: this.config.sensitivity,
      attackTypes: Object.keys(this.config.attackTypes).filter(key => this.config.attackTypes[key as keyof typeof this.config.attackTypes]),
      machineLearning: this.config.machineLearning.enabled
    });

    // RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    if (this.config.machineLearning.enabled) {
      await this.initializeMachineLearning();
    }

    // RUSSIAN: –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    if (this.config.reputation.enabled) {
      await this.loadReputationDatabases();
    }

    // RUSSIAN: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
    this.startTrafficAnalysis();
    
    // RUSSIAN: –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    this.startCleanupTasks();

    this.isActive = true;
    enhancedDbLogger.info('‚úÖ DDoS –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * RUSSIAN: –ì–ª–∞–≤–Ω—ã–π middleware –¥–ª—è DDoS –∑–∞—â–∏—Ç—ã
   */
  public middleware() {
    return async (req: Request, res: Response, next: NextFunction) => {
      if (!this.isActive) {
        return next();
      }

      try {
        const startTime = Date.now();
        const clientIP = this.getClientIP(req);
        const userAgent = req.get('User-Agent') || 'unknown';

        // RUSSIAN: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
        if (this.isBlocked(clientIP)) {
          const blockInfo = this.blockedIPs.get(clientIP);
          enhancedDbLogger.warn('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', {
            ip: clientIP,
            reason: blockInfo?.reason,
            level: blockInfo?.level
          });
          return this.handleBlockedRequest(req, res, blockInfo!);
        }

        // RUSSIAN: –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
        const requestMetrics = {
          ip: clientIP,
          method: req.method,
          path: req.path,
          userAgent,
          timestamp: new Date(),
          payloadSize: parseInt(req.get('Content-Length') || '0'),
          referer: req.get('Referer'),
          country: this.getCountryFromIP(clientIP)
        };

        // RUSSIAN: –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        const suspicionScore = await this.analyzeSuspiciousness(requestMetrics, req);
        
        if (suspicionScore > 0.8) {
          enhancedDbLogger.warn('‚ö†Ô∏è –í—ã—Å–æ–∫–æ–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω', {
            ip: clientIP,
            score: suspicionScore,
            path: req.path
          });
          this.suspiciousIPs.add(clientIP);
        }

        // RUSSIAN: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        this.recordRequest(requestMetrics);

        // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if (await this.checkThresholds(clientIP, requestMetrics)) {
          return this.handleSuspiciousActivity(req, res, clientIP, 'threshold_exceeded');
        }

        // RUSSIAN: –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware
        res.on('finish', () => {
          const responseTime = Date.now() - startTime;
          this.recordResponse(clientIP, res.statusCode, responseTime);
        });

        next();

      } catch (error) {
        enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤ DDoS –∑–∞—â–∏—Ç–µ', { error });
        // RUSSIAN: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å (fail-open –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        next();
      }
    };
  }

  /**
   * RUSSIAN: –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
   */
  private async analyzeSuspiciousness(metrics: any, req: Request): Promise<number> {
    let suspicionScore = 0;

    // RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP
    const reputation = this.ipReputation.get(metrics.ip) || 0.5;
    if (reputation < 0.3) {
      suspicionScore += 0.3;
    }

    // RUSSIAN: –ê–Ω–∞–ª–∏–∑ User-Agent
    if (this.isSuspiciousUserAgent(metrics.userAgent)) {
      suspicionScore += 0.2;
    }

    // RUSSIAN: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (this.config.patternDetection.enabled) {
      const patternScore = await this.analyzeRequestPattern(metrics, req);
      suspicionScore += patternScore;
    }

    // RUSSIAN: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    if (this.config.machineLearning.enabled && this.mlModel) {
      const mlScore = await this.getMachineLearningScore(metrics, req);
      suspicionScore += mlScore * 0.4;
    }

    // RUSSIAN: –ì–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (this.isSuspiciousGeolocation(metrics.country)) {
      suspicionScore += 0.1;
    }

    return Math.min(1, suspicionScore);
  }

  /**
   * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
   */
  private async checkThresholds(ip: string, metrics: any): Promise<boolean> {
    const now = Date.now();
    const windowStart = now - 60000; // 1 –º–∏–Ω—É—Ç–∞

    // RUSSIAN: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    const recentRequests = this.getRecentRequests(windowStart);
    
    // RUSSIAN: –ó–∞–ø—Ä–æ—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É (–æ–±—â–∏–µ)
    const rpsTotal = recentRequests.length / 60;
    if (rpsTotal > this.config.thresholds.requestsPerSecond) {
      enhancedDbLogger.warn('üö® –ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π RPS –ø–æ—Ä–æ–≥', { rpsTotal, threshold: this.config.thresholds.requestsPerSecond });
      await this.triggerAttackDetection('volumetric_rps', 'high', ['high_rps']);
      return true;
    }

    // RUSSIAN: –ó–∞–ø—Ä–æ—Å—ã —Å –æ–¥–Ω–æ–≥–æ IP
    const ipRequests = recentRequests.filter(r => r.ip === ip);
    const rpsPerIP = ipRequests.length / 60;
    if (rpsPerIP > this.config.thresholds.requestsPerIP) {
      enhancedDbLogger.warn('üö® –ü—Ä–µ–≤—ã—à–µ–Ω RPS –ø–æ—Ä–æ–≥ –¥–ª—è IP', { ip, rpsPerIP, threshold: this.config.thresholds.requestsPerIP });
      return true;
    }

    // RUSSIAN: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP –≤ –º–∏–Ω—É—Ç—É
    const uniqueIPs = new Set(recentRequests.map(r => r.ip)).size;
    if (uniqueIPs > this.config.thresholds.uniqueIPsPerMinute) {
      enhancedDbLogger.warn('üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP', { uniqueIPs, threshold: this.config.thresholds.uniqueIPsPerMinute });
      await this.triggerAttackDetection('botnet', 'high', ['many_unique_ips']);
      return true;
    }

    // RUSSIAN: –†–∞–∑–º–µ—Ä payload
    if (metrics.payloadSize > this.config.thresholds.payloadSize) {
      enhancedDbLogger.warn('üö® –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π payload', { ip, size: metrics.payloadSize, threshold: this.config.thresholds.payloadSize });
      return true;
    }

    return false;
  }

  /**
   * RUSSIAN: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
   */
  private async initializeMachineLearning(): Promise<void> {
    enhancedDbLogger.info('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è DDoS –∑–∞—â–∏—Ç—ã');

    try {
      // RUSSIAN: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞
      this.mlModel = {
        type: this.config.machineLearning.model,
        features: [
          'requests_per_minute',
          'payload_size_avg',
          'response_time_avg',
          'error_rate',
          'unique_paths',
          'user_agent_entropy',
          'geographic_distribution'
        ],
        weights: new Map(),
        thresholds: new Map(),
        lastTrained: new Date()
      };

      // RUSSIAN: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      await this.loadPretrainedModel();

      enhancedDbLogger.info('‚úÖ –ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', {
        type: this.mlModel.type,
        features: this.mlModel.features.length
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –º–æ–¥–µ–ª–∏', { error });
      this.config.machineLearning.enabled = false;
    }
  }

  /**
   * RUSSIAN: –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP
   */
  private async loadReputationDatabases(): Promise<void> {
    enhancedDbLogger.info('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP');

    try {
      // RUSSIAN: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–ª–æ—Ö–∏–µ IP –∞–¥—Ä–µ—Å–∞
      const maliciousIPs = await this.loadMaliciousIPDatabase();
      
      for (const ip of maliciousIPs) {
        this.ipReputation.set(ip, 0.1); // –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
      }

      // RUSSIAN: –ó–∞–≥—Ä—É–∂–∞–µ–º Tor exit nodes
      const torExitNodes = await this.loadTorExitNodes();
      
      for (const ip of torExitNodes) {
        this.ipReputation.set(ip, 0.3); // –ù–∏–∑–∫–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
      }

      enhancedDbLogger.info('‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', {
        maliciousIPs: maliciousIPs.length,
        torNodes: torExitNodes.length
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', { error });
    }
  }

  /**
   * RUSSIAN: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
   */
  private startTrafficAnalysis(): void {
    this.analysisInterval = setInterval(async () => {
      await this.analyzeTrafficPatterns();
      await this.updateMLModel();
      this.generateTrafficStats();
    }, this.config.patternDetection.analysisWindow * 1000);

    enhancedDbLogger.info('üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω', {
      interval: this.config.patternDetection.analysisWindow
    });
  }

  /**
   * RUSSIAN: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
   */
  private async analyzeTrafficPatterns(): Promise<void> {
    const now = Date.now();
    const analysisWindow = this.config.patternDetection.analysisWindow * 1000;
    const recentRequests = this.getRecentRequests(now - analysisWindow);

    if (recentRequests.length < this.config.patternDetection.minSamples) {
      return; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    }

    // RUSSIAN: –≠–Ω—Ç—Ä–æ–ø–∏–π–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (this.config.patternDetection.algorithms.includes('entropy')) {
      await this.performEntropyAnalysis(recentRequests);
    }

    // RUSSIAN: –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (this.config.patternDetection.algorithms.includes('clustering')) {
      await this.performClusterAnalysis(recentRequests);
    }

    // RUSSIAN: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    if (this.config.patternDetection.algorithms.includes('statistical')) {
      await this.performStatisticalAnalysis(recentRequests);
    }
  }

  /**
   * RUSSIAN: –≠–Ω—Ç—Ä–æ–ø–∏–π–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–æ—Ç–Ω–µ—Ç–æ–≤
   */
  private async performEntropyAnalysis(requests: any[]): Promise<void> {
    // RUSSIAN: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é User-Agent —Å—Ç—Ä–æ–∫
    const userAgents = requests.map(r => r.userAgent);
    const uaEntropy = this.calculateEntropy(userAgents);

    // RUSSIAN: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é –ø—É—Ç–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤
    const paths = requests.map(r => r.path);
    const pathEntropy = this.calculateEntropy(paths);

    // RUSSIAN: –ù–∏–∑–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –±–æ—Ç–Ω–µ—Ç
    if (uaEntropy < 2.0 && requests.length > 100) {
      await this.triggerAttackDetection('botnet', 'medium', ['low_user_agent_entropy']);
    }

    if (pathEntropy < 1.5 && requests.length > 50) {
      await this.triggerAttackDetection('application_layer', 'medium', ['low_path_entropy']);
    }
  }

  /**
   * RUSSIAN: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
   */
  private async performStatisticalAnalysis(requests: any[]): Promise<void> {
    // RUSSIAN: –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const timeDistribution = this.analyzeTimeDistribution(requests);
    
    // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ periodicity (–ø—Ä–∏–∑–Ω–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ç–∞–∫)
    if (timeDistribution.periodicity > 0.8) {
      await this.triggerAttackDetection('automated', 'medium', ['high_periodicity']);
    }

    // RUSSIAN: –ê–Ω–∞–ª–∏–∑ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const geoDistribution = this.analyzeGeographicDistribution(requests);
    
    // RUSSIAN: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
    const maxCountryPercentage = Math.max(...Object.values(geoDistribution).map(val => Number(val) || 0));
    if (maxCountryPercentage > 0.9 && requests.length > 100) {
      await this.triggerAttackDetection('geographic_anomaly', 'low', ['single_country_dominance']);
    }
  }

  /**
   * RUSSIAN: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –®–µ–Ω–Ω–æ–Ω–∞
   */
  private calculateEntropy(data: string[]): number {
    const freq = new Map<string, number>();
    
    for (const item of data) {
      freq.set(item, (freq.get(item) || 0) + 1);
    }

    let entropy = 0;
    const total = data.length;

    for (const count of freq.values()) {
      const p = count / total;
      entropy -= p * Math.log2(p);
    }

    return entropy;
  }

  /**
   * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞—Ç–∞–∫–∏
   */
  private async triggerAttackDetection(
    type: string, 
    severity: 'low' | 'medium' | 'high' | 'critical',
    indicators: string[]
  ): Promise<void> {
    const attackId = `attack_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    const attack: AttackSignature = {
      type,
      severity,
      confidence: this.calculateAttackConfidence(indicators),
      indicators,
      sourceIPs: Array.from(this.suspiciousIPs),
      targetEndpoints: this.getTopTargetEndpoints(),
      startTime: new Date(),
      metrics: this.getCurrentAttackMetrics()
    };

    this.activeAttacks.set(attackId, attack);
    this.attackHistory.push(attack);

    enhancedDbLogger.warn('üö® DDoS –∞—Ç–∞–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞', {
      id: attackId,
      type,
      severity,
      confidence: attack.confidence,
      indicators: indicators.join(', ')
    });

    // RUSSIAN: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ä—ã –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (this.config.mitigation.autoBlock) {
      await this.applyMitigation(attack);
    }

    // RUSSIAN: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.emit('attack_detected', attack);
  }

  /**
   * RUSSIAN: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ä –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  private async applyMitigation(attack: AttackSignature): Promise<void> {
    enhancedDbLogger.info('üõ°Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ä –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—è', {
      type: attack.type,
      severity: attack.severity
    });

    // RUSSIAN: –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP
    for (const ip of attack.sourceIPs) {
      if (!this.isWhitelisted(ip)) {
        await this.blockIP(ip, `DDoS: ${attack.type}`, this.config.mitigation.blockDuration);
      }
    }

    // RUSSIAN: –≠—Å–∫–∞–ª–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
    if (this.config.mitigation.escalation.enabled) {
      const level = this.getEscalationLevel(attack.severity);
      await this.applyEscalation(level, attack);
    }

    // RUSSIAN: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    if (this.config.external.cloudflare.enabled) {
      await this.notifyCloudflare(attack);
    }

    if (this.config.external.fail2ban.enabled) {
      await this.notifyFail2Ban(attack);
    }
  }

  /**
   * RUSSIAN: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞
   */
  private async blockIP(ip: string, reason: string, duration: number, level: number = 1): Promise<void> {
    const until = new Date(Date.now() + (duration * 1000));
    
    this.blockedIPs.set(ip, { reason, until, level });
    this.suspiciousIPs.delete(ip); // –£–±–∏—Ä–∞–µ–º –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

    enhancedDbLogger.warn('üö´ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω DDoS –∑–∞—â–∏—Ç–æ–π', {
      ip,
      reason,
      duration,
      level,
      until: until.toISOString()
    });

    // RUSSIAN: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    setTimeout(() => {
      this.unblockIP(ip);
    }, duration * 1000);

    this.emit('ip_blocked', { ip, reason, duration, level });
  }

  /**
   * RUSSIAN: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞
   */
  private unblockIP(ip: string): void {
    if (this.blockedIPs.has(ip)) {
      this.blockedIPs.delete(ip);
      enhancedDbLogger.info('‚úÖ IP —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω DDoS –∑–∞—â–∏—Ç–æ–π', { ip });
      this.emit('ip_unblocked', { ip });
    }
  }

  /**
   * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ IP
   */
  private isBlocked(ip: string): boolean {
    const blockInfo = this.blockedIPs.get(ip);
    if (!blockInfo) return false;

    // RUSSIAN: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    if (blockInfo.until < new Date()) {
      this.unblockIP(ip);
      return false;
    }

    return true;
  }

  /**
   * RUSSIAN: –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
   */
  private isWhitelisted(ip: string): boolean {
    // RUSSIAN: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤—Å–µ–≥–¥–∞ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    if (ip === '127.0.0.1' || ip === '::1' || ip.startsWith('192.168.') || ip.startsWith('10.') || ip.startsWith('172.16.')) {
      return true;
    }

    // RUSSIAN: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
    return false;
  }

  /**
   * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private getClientIP(req: Request): string {
    return req.get('CF-Connecting-IP') || 
           req.get('X-Forwarded-For')?.split(',')[0]?.trim() || 
           req.get('X-Real-IP') || 
           req.socket.remoteAddress || 
           'unknown';
  }

  /**
   * RUSSIAN: –ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  private recordRequest(metrics: any): void {
    const key = `request_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    this.currentWindow.set(key, metrics);

    // RUSSIAN: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10000 –∑–∞–ø—Ä–æ—Å–æ–≤)
    if (this.currentWindow.size > 10000) {
      const oldestKey = this.currentWindow.keys().next().value as string;
      this.currentWindow.delete(oldestKey);
    }
  }

  /**
   * RUSSIAN: –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  private recordResponse(ip: string, statusCode: number, responseTime: number): void {
    // RUSSIAN: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é IP –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    this.updateIPReputation(ip, statusCode, responseTime);

    // RUSSIAN: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤–æ–∑–º–æ–∂–Ω–∞—è Slowloris –∞—Ç–∞–∫–∞)
    if (this.config.attackTypes.slowloris && responseTime > this.config.thresholds.requestDuration) {
      this.handleSlowlorisDetection(ip, responseTime);
    }
  }

  /**
   * RUSSIAN: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ IP
   */
  private updateIPReputation(ip: string, statusCode: number, responseTime: number): void {
    const currentReputation = this.ipReputation.get(ip) || 0.5;
    let adjustment = 0;

    // RUSSIAN: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    if (statusCode >= 200 && statusCode < 300) {
      adjustment += 0.01; // –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É–ª—É—á—à–∞—é—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    }

    // RUSSIAN: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    if (statusCode >= 400 && statusCode < 500) {
      adjustment -= 0.02; // –û—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —É—Ö—É–¥—à–∞—é—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    }

    if (responseTime > 5000) {
      adjustment -= 0.01; // –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã
    }

    const newReputation = Math.max(0, Math.min(1, currentReputation + adjustment));
    this.ipReputation.set(ip, newReputation);

    // RUSSIAN: –ï—Å–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ
    if (newReputation < 0.2) {
      this.suspiciousIPs.add(ip);
    }
  }

  /**
   * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private getRecentRequests(since: number): any[] {
    const recent: any[] = [];
    
    for (const metrics of this.currentWindow.values()) {
      if (metrics.timestamp.getTime() >= since) {
        recent.push(metrics);
      }
    }

    return recent;
  }

  /**
   * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  private handleBlockedRequest(req: Request, res: Response, blockInfo: any): void {
    const timeRemaining = Math.ceil((blockInfo.until.getTime() - Date.now()) / 1000);

    res.status(403).json({
      error: 'Access Denied',
      message: '–í–∞—à IP –∞–¥—Ä–µ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
      reason: blockInfo.reason,
      level: blockInfo.level,
      timeRemaining,
      retryAfter: timeRemaining,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * RUSSIAN: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private handleSuspiciousActivity(req: Request, res: Response, ip: string, reason: string): void {
    enhancedDbLogger.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞', { ip, reason });

    res.status(429).json({
      error: 'Too Many Requests',
      message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      reason,
      ip,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DDoS –∑–∞—â–∏—Ç—ã
   */
  public getStatistics(): {
    activeAttacks: number;
    blockedIPs: number;
    suspiciousIPs: number;
    totalRequests: number;
    requestsPerSecond: number;
    topAttackTypes: Array<{ type: string; count: number }>;
    reputationDistribution: { low: number; medium: number; high: number };
  } {
    const now = Date.now();
    const recentRequests = this.getRecentRequests(now - 60000);

    // RUSSIAN: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    const reputationCounts = { low: 0, medium: 0, high: 0 };
    for (const reputation of this.ipReputation.values()) {
      if (reputation < 0.3) reputationCounts.low++;
      else if (reputation < 0.7) reputationCounts.medium++;
      else reputationCounts.high++;
    }

    // RUSSIAN: –¢–æ–ø —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
    const attackTypeCounts = new Map<string, number>();
    for (const attack of this.attackHistory) {
      attackTypeCounts.set(attack.type, (attackTypeCounts.get(attack.type) || 0) + 1);
    }

    const topAttackTypes = Array.from(attackTypeCounts.entries())
      .map(([type, count]) => ({ type, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    return {
      activeAttacks: this.activeAttacks.size,
      blockedIPs: this.blockedIPs.size,
      suspiciousIPs: this.suspiciousIPs.size,
      totalRequests: this.currentWindow.size,
      requestsPerSecond: recentRequests.length / 60,
      topAttackTypes,
      reputationDistribution: reputationCounts
    };
  }

  /**
   * RUSSIAN: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ç–∞–∫–∞—Ö
   */
  public getAttackDetails(): {
    active: AttackSignature[];
    recent: AttackSignature[];
    blockedIPs: Array<{ ip: string; reason: string; until: Date; level: number }>;
  } {
    const recentAttacks = this.attackHistory
      .filter(attack => (Date.now() - attack.startTime.getTime()) < 3600000) // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      .sort((a, b) => b.startTime.getTime() - a.startTime.getTime());

    const blockedIPsList = Array.from(this.blockedIPs.entries())
      .map(([ip, info]) => ({ ip, ...info }));

    return {
      active: Array.from(this.activeAttacks.values()),
      recent: recentAttacks,
      blockedIPs: blockedIPsList
    };
  }

  /**
   * RUSSIAN: –†—É—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
   */
  public async manualBlockIP(ip: string, reason: string, duration: number): Promise<void> {
    await this.blockIP(ip, `Manual: ${reason}`, duration, 999);
    enhancedDbLogger.info('üëÆ IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é', { ip, reason, duration });
  }

  /**
   * RUSSIAN: –†—É—á–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
   */
  public async manualUnblockIP(ip: string): Promise<void> {
    this.unblockIP(ip);
    enhancedDbLogger.info('üëÆ IP —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é', { ip });
  }

  /**
   * RUSSIAN: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ DDoS –∑–∞—â–∏—Ç—ã
   */
  public async shutdown(): Promise<void> {
    this.isActive = false;

    if (this.analysisInterval) {
      clearInterval(this.analysisInterval);
      this.analysisInterval = null;
    }

    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }

    this.currentWindow.clear();
    this.blockedIPs.clear();
    this.suspiciousIPs.clear();
    this.activeAttacks.clear();

    enhancedDbLogger.info('üõ°Ô∏è DDoS –∑–∞—â–∏—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  // RUSSIAN: –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ
  private async loadPretrainedModel(): Promise<void> { /* TODO */ }
  private async loadMaliciousIPDatabase(): Promise<string[]> { return []; }
  private async loadTorExitNodes(): Promise<string[]> { return []; }
  private isSuspiciousUserAgent(userAgent: string): boolean { return false; }
  private async analyzeRequestPattern(metrics: any, req: Request): Promise<number> { return 0; }
  private async getMachineLearningScore(metrics: any, req: Request): Promise<number> { return 0; }
  private isSuspiciousGeolocation(country: string): boolean { return false; }
  private getCountryFromIP(ip: string): string { return 'unknown'; }
  private async performClusterAnalysis(requests: any[]): Promise<void> { /* TODO */ }
  private analyzeTimeDistribution(requests: any[]): any { return { periodicity: 0 }; }
  private analyzeGeographicDistribution(requests: any[]): any { return {}; }
  private calculateAttackConfidence(indicators: string[]): number { return 0.8; }
  private getTopTargetEndpoints(): string[] { return []; }
  private getCurrentAttackMetrics(): any { return {}; }
  private getEscalationLevel(severity: string): any { return {}; }
  private async applyEscalation(level: any, attack: AttackSignature): Promise<void> { /* TODO */ }
  private async notifyCloudflare(attack: AttackSignature): Promise<void> { /* TODO */ }
  private async notifyFail2Ban(attack: AttackSignature): Promise<void> { /* TODO */ }
  private handleSlowlorisDetection(ip: string, responseTime: number): void { /* TODO */ }
  private async updateMLModel(): Promise<void> { /* TODO */ }
  private generateTrafficStats(): void { /* TODO */ }
  private startCleanupTasks(): void { /* TODO */ }
}

/**
 * RUSSIAN: –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DDoS –∑–∞—â–∏—Ç—ã –¥–ª—è crypto-mixer
 */
export const defaultDDoSConfig: DDoSConfig = {
  enabled: true,
  sensitivity: 'adaptive',
  
  thresholds: {
    requestsPerSecond: 100,        // 100 RPS –æ–±—â–∏–π –ª–∏–º–∏—Ç
    requestsPerIP: 20,             // 20 RPS —Å –æ–¥–Ω–æ–≥–æ IP
    concurrentConnections: 1000,   // 1000 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    uniqueIPsPerMinute: 500,       // 500 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP –≤ –º–∏–Ω—É—Ç—É
    errorRate: 10,                 // 10% –æ—à–∏–±–æ–∫
    payloadSize: 10 * 1024 * 1024, // 10MB payload
    requestDuration: 30000         // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å
  },
  
  patternDetection: {
    enabled: true,
    algorithms: ['entropy', 'statistical'],
    analysisWindow: 60,            // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    minSamples: 50                 // –ú–∏–Ω–∏–º—É–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  },
  
  attackTypes: {
    volumetric: true,
    slowloris: true,
    httpFlood: true,
    amplification: true,
    botnet: true
  },
  
  mitigation: {
    autoBlock: true,
    blockDuration: 300,            // 5 –º–∏–Ω—É—Ç –±–∞–∑–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    escalation: {
      enabled: true,
      levels: [
        { threshold: 10, action: 'throttle', duration: 60 },
        { threshold: 25, action: 'block', duration: 300 },
        { threshold: 50, action: 'block', duration: 3600 }
      ]
    }
  },
  
  machineLearning: {
    enabled: false,                // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    model: 'statistical',
    trainingPeriod: 24,           // 24 —á–∞—Å–∞ –æ–±—É—á–µ–Ω–∏—è
    adaptationRate: 0.1           // 10% —Å–∫–æ—Ä–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
  },
  
  reputation: {
    enabled: true,
    databases: ['tor', 'malware'],
    trustScore: {
      minScore: 0.3,              // –ú–∏–Ω–∏–º—É–º 30% –¥–æ–≤–µ—Ä–∏—è
      decayRate: 0.95             // 5% –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –≤ –¥–µ–Ω—å
    }
  },
  
  external: {
    cloudflare: {
      enabled: false
    },
    fail2ban: {
      enabled: false,
      logPath: '/var/log/crypto-mixer/security.log'
    }
  }
};