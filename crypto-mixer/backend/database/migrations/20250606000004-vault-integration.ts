import { QueryInterface, Sequelize, DataTypes } from 'sequelize';

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vault/HSM —Å–∏—Å—Ç–µ–º–æ–π
 * 
 * –ò–∑–º–µ–Ω–µ–Ω–∏—è:
 * 1. –£–¥–∞–ª–µ–Ω–∏–µ encryptedPrivateKey –∏–∑ —Ç–∞–±–ª–∏—Ü wallets –∏ deposit_addresses
 * 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ vault_key_id, key_algorithm, is_hsm_key
 * 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞—É–¥–∏—Ç–∞ –∫–ª—é—á–µ–π
 * 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

export const up = async (queryInterface: QueryInterface, Sequelize: any) => {
  console.log('üîê –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vault/HSM...');

  // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞—É–¥–∏—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–ª—é—á–∞–º–∏
  await queryInterface.createTable('key_audit_logs', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    vault_key_id: {
      type: DataTypes.STRING(128),
      allowNull: false,
      comment: 'ID –∫–ª—é—á–∞ –≤ Vault/HSM'
    },
    operation: {
      type: DataTypes.ENUM('generate', 'access', 'rotate', 'delete', 'sign'),
      allowNull: false,
      comment: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª—é—á–æ–º'
    },
    currency: {
      type: DataTypes.STRING(10),
      allowNull: false
    },
    user_agent: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'User agent –∫–ª–∏–µ–Ω—Ç–∞'
    },
    ip_address: {
      type: DataTypes.INET,
      allowNull: true,
      comment: 'IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞'
    },
    request_id: {
      type: DataTypes.STRING(64),
      allowNull: true,
      comment: 'ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏'
    },
    status: {
      type: DataTypes.ENUM('success', 'failure', 'pending'),
      allowNull: false,
      defaultValue: 'pending'
    },
    error_message: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞'
    },
    metadata: {
      type: DataTypes.JSONB,
      allowNull: true,
      comment: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    },
    created_at: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW
    },
    updated_at: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW
    }
  });

  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ key_audit_logs');

  // 2. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π...');
  
  await queryInterface.createTable('legacy_encrypted_keys_backup', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    original_table: {
      type: DataTypes.STRING(50),
      allowNull: false
    },
    original_id: {
      type: DataTypes.UUID,
      allowNull: false
    },
    encrypted_private_key: {
      type: DataTypes.TEXT,
      allowNull: true
    },
    currency: {
      type: DataTypes.STRING(10),
      allowNull: true
    },
    address: {
      type: DataTypes.STRING(100),
      allowNull: true
    },
    backed_up_at: {
      type: DataTypes.DATE,
      allowNull: false,
      defaultValue: DataTypes.NOW
    }
  });

  // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ wallets
  await queryInterface.sequelize.query(`
    INSERT INTO legacy_encrypted_keys_backup 
      (original_table, original_id, encrypted_private_key, currency, address)
    SELECT 
      'wallets' as original_table,
      id as original_id,
      encrypted_private_key,
      currency,
      address
    FROM wallets 
    WHERE encrypted_private_key IS NOT NULL
  `);

  // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ deposit_addresses
  await queryInterface.sequelize.query(`
    INSERT INTO legacy_encrypted_keys_backup 
      (original_table, original_id, encrypted_private_key, currency, address)
    SELECT 
      'deposit_addresses' as original_table,
      id as original_id,
      private_key_encrypted as encrypted_private_key,
      currency,
      address
    FROM deposit_addresses 
    WHERE private_key_encrypted IS NOT NULL
  `);

  console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–ª—é—á–µ–π —Å–æ–∑–¥–∞–Ω–∞');

  // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É wallets
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã wallets...');

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
  await queryInterface.addColumn('wallets', 'vault_key_id', {
    type: DataTypes.STRING(128),
    allowNull: true,
    comment: 'ID –∫–ª—é—á–∞ –≤ Vault/HSM —Å–∏—Å—Ç–µ–º–µ'
  });

  await queryInterface.addColumn('wallets', 'key_algorithm', {
    type: DataTypes.STRING(32),
    allowNull: true,
    defaultValue: 'secp256k1',
    comment: '–ê–ª–≥–æ—Ä–∏—Ç–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞'
  });

  await queryInterface.addColumn('wallets', 'is_hsm_key', {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false,
    comment: '–§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HSM –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞'
  });

  await queryInterface.addColumn('wallets', 'key_created_at', {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ Vault/HSM'
  });

  await queryInterface.addColumn('wallets', 'last_key_rotation', {
    type: DataTypes.DATE,
    allowNull: true,
    comment: '–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–∞'
  });

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–Ω–∫—É (–ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
  await queryInterface.removeColumn('wallets', 'encrypted_private_key');

  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ wallets –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

  // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É deposit_addresses
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã deposit_addresses...');

  await queryInterface.addColumn('deposit_addresses', 'vault_key_id', {
    type: DataTypes.STRING(128),
    allowNull: true,
    comment: 'ID –∫–ª—é—á–∞ –≤ Vault/HSM —Å–∏—Å—Ç–µ–º–µ'
  });

  await queryInterface.addColumn('deposit_addresses', 'key_algorithm', {
    type: DataTypes.STRING(32),
    allowNull: true,
    defaultValue: 'secp256k1',
    comment: '–ê–ª–≥–æ—Ä–∏—Ç–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞'
  });

  await queryInterface.addColumn('deposit_addresses', 'is_hsm_key', {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false,
    comment: '–§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HSM –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞'
  });

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–Ω–∫—É
  await queryInterface.removeColumn('deposit_addresses', 'private_key_encrypted');

  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ deposit_addresses –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

  // 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');

  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è key_audit_logs
  await queryInterface.addIndex('key_audit_logs', ['vault_key_id'], {
    name: 'idx_key_audit_vault_key_id'
  });

  await queryInterface.addIndex('key_audit_logs', ['operation', 'status'], {
    name: 'idx_key_audit_operation_status'
  });

  await queryInterface.addIndex('key_audit_logs', ['created_at'], {
    name: 'idx_key_audit_created_at'
  });

  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è wallets
  await queryInterface.addIndex('wallets', ['vault_key_id'], {
    name: 'idx_wallets_vault_key_id',
    unique: true,
    where: {
      vault_key_id: {
        [Sequelize.Op.ne]: null
      }
    }
  });

  await queryInterface.addIndex('wallets', ['is_hsm_key', 'currency'], {
    name: 'idx_wallets_hsm_currency'
  });

  // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è deposit_addresses
  await queryInterface.addIndex('deposit_addresses', ['vault_key_id'], {
    name: 'idx_deposit_addresses_vault_key_id',
    unique: true,
    where: {
      vault_key_id: {
        [Sequelize.Op.ne]: null
      }
    }
  });

  console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

  // 6. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞—É–¥–∏—Ç–∞...');

  await queryInterface.sequelize.query(`
    CREATE OR REPLACE FUNCTION log_key_operation() RETURNS TRIGGER AS $$
    BEGIN
      -- –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è vault_key_id
      IF TG_OP = 'UPDATE' AND OLD.vault_key_id IS DISTINCT FROM NEW.vault_key_id THEN
        INSERT INTO key_audit_logs (vault_key_id, operation, currency, status, metadata)
        VALUES (
          COALESCE(NEW.vault_key_id, OLD.vault_key_id),
          'rotate',
          NEW.currency,
          'success',
          jsonb_build_object(
            'old_key_id', OLD.vault_key_id,
            'new_key_id', NEW.vault_key_id,
            'table', TG_TABLE_NAME
          )
        );
      END IF;
      
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
  `);

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞
  await queryInterface.sequelize.query(`
    CREATE TRIGGER wallets_key_audit_trigger
      AFTER UPDATE ON wallets
      FOR EACH ROW
      EXECUTE FUNCTION log_key_operation();
  `);

  await queryInterface.sequelize.query(`
    CREATE TRIGGER deposit_addresses_key_audit_trigger
      AFTER UPDATE ON deposit_addresses
      FOR EACH ROW
      EXECUTE FUNCTION log_key_operation();
  `);

  console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã –∞—É–¥–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã');

  // 7. –°–æ–∑–¥–∞–µ–º view –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª—é—á–µ–π
  await queryInterface.sequelize.query(`
    CREATE VIEW key_management_summary AS
    SELECT 
      'wallets' as source_table,
      currency,
      COUNT(*) as total_keys,
      COUNT(vault_key_id) as vault_keys,
      COUNT(CASE WHEN is_hsm_key THEN 1 END) as hsm_keys,
      COUNT(CASE WHEN NOT is_hsm_key AND vault_key_id IS NOT NULL THEN 1 END) as software_keys
    FROM wallets
    GROUP BY currency
    
    UNION ALL
    
    SELECT 
      'deposit_addresses' as source_table,
      currency,
      COUNT(*) as total_keys,
      COUNT(vault_key_id) as vault_keys,
      COUNT(CASE WHEN is_hsm_key THEN 1 END) as hsm_keys,
      COUNT(CASE WHEN NOT is_hsm_key AND vault_key_id IS NOT NULL THEN 1 END) as software_keys
    FROM deposit_addresses
    GROUP BY currency;
  `);

  console.log('‚úÖ View –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω');

  console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Vault/HSM –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  console.log('');
  console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Vault –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
  console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π –≤ Vault');
  console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π');
  console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π');
};

export const down = async (queryInterface: QueryInterface, Sequelize: any) => {
  console.log('üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Vault/HSM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

  // –£–¥–∞–ª—è–µ–º view
  await queryInterface.sequelize.query('DROP VIEW IF EXISTS key_management_summary;');

  // –£–¥–∞–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
  await queryInterface.sequelize.query('DROP TRIGGER IF EXISTS wallets_key_audit_trigger ON wallets;');
  await queryInterface.sequelize.query('DROP TRIGGER IF EXISTS deposit_addresses_key_audit_trigger ON deposit_addresses;');

  // –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
  await queryInterface.sequelize.query('DROP FUNCTION IF EXISTS log_key_operation();');

  // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
  await queryInterface.removeIndex('key_audit_logs', 'idx_key_audit_vault_key_id');
  await queryInterface.removeIndex('key_audit_logs', 'idx_key_audit_operation_status');
  await queryInterface.removeIndex('key_audit_logs', 'idx_key_audit_created_at');
  await queryInterface.removeIndex('wallets', 'idx_wallets_vault_key_id');
  await queryInterface.removeIndex('wallets', 'idx_wallets_hsm_currency');
  await queryInterface.removeIndex('deposit_addresses', 'idx_deposit_addresses_vault_key_id');

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ wallets
  await queryInterface.addColumn('wallets', 'encrypted_private_key', {
    type: DataTypes.TEXT,
    allowNull: true
  });

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  await queryInterface.sequelize.query(`
    UPDATE wallets SET encrypted_private_key = backup.encrypted_private_key
    FROM legacy_encrypted_keys_backup backup
    WHERE backup.original_table = 'wallets' 
      AND backup.original_id = wallets.id
  `);

  // –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ wallets
  await queryInterface.removeColumn('wallets', 'vault_key_id');
  await queryInterface.removeColumn('wallets', 'key_algorithm');
  await queryInterface.removeColumn('wallets', 'is_hsm_key');
  await queryInterface.removeColumn('wallets', 'key_created_at');
  await queryInterface.removeColumn('wallets', 'last_key_rotation');

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deposit_addresses
  await queryInterface.addColumn('deposit_addresses', 'private_key_encrypted', {
    type: DataTypes.TEXT,
    allowNull: false,
    validate: {
      notEmpty: true
    },
    comment: '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∞–¥—Ä–µ—Å–∞'
  });

  await queryInterface.sequelize.query(`
    UPDATE deposit_addresses SET private_key_encrypted = backup.encrypted_private_key
    FROM legacy_encrypted_keys_backup backup
    WHERE backup.original_table = 'deposit_addresses' 
      AND backup.original_id = deposit_addresses.id
  `);

  await queryInterface.removeColumn('deposit_addresses', 'vault_key_id');
  await queryInterface.removeColumn('deposit_addresses', 'key_algorithm');
  await queryInterface.removeColumn('deposit_addresses', 'is_hsm_key');

  // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
  await queryInterface.dropTable('key_audit_logs');
  await queryInterface.dropTable('legacy_encrypted_keys_backup');

  console.log('‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
};