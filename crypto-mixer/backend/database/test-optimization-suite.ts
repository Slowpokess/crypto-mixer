/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 * - Connection Pool Management
 * - Query Optimization  
 * - Data Recovery & Integrity
 * - Performance Monitoring
 */

import DatabaseOptimizationSuite from './utils/DatabaseOptimizationSuite';
import { enhancedDbLogger } from './logger';

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
async function testDatabaseOptimizations(): Promise<void> {
  let optimizationSuite: DatabaseOptimizationSuite | null = null;

  try {
    enhancedDbLogger.info('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DatabaseOptimizationSuite');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const databaseUrl = process.env.DATABASE_URL || 'postgresql://mixer:mixer_password@localhost:5432/crypto_mixer';
    
    optimizationSuite = new DatabaseOptimizationSuite(databaseUrl, {
      connectionPool: {
        minConnections: 3,
        maxConnections: 10,
        adaptivePooling: true,
        warmupConnections: true
      },
      recovery: {
        enableIntegrityChecks: true,
        enableAutoRecovery: true,
        enableContinuousMonitoring: true
      },
      enablePerformanceMonitoring: true,
      enableAutomatedMaintenance: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      enableAlerting: true
    });

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise((resolve) => {
      optimizationSuite!.once('initialized', resolve);
    });

    enhancedDbLogger.info('‚úÖ DatabaseOptimizationSuite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
    await testHealthCheck(optimizationSuite);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    await testOptimizedRepositories(optimizationSuite);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º connection pooling
    await testConnectionPooling(optimizationSuite);

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º query optimization
    await testQueryOptimization(optimizationSuite);

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º data integrity
    await testDataIntegrity(optimizationSuite);

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º performance monitoring
    await testPerformanceMonitoring(optimizationSuite);

    // 7. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await testLoadPerformance(optimizationSuite);

    enhancedDbLogger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');

  } catch (error) {
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π', { error });
    throw error;
  } finally {
    // Graceful shutdown
    if (optimizationSuite) {
      await optimizationSuite.shutdown();
    }
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check —Å–∏—Å—Ç–µ–º—ã
 */
async function testHealthCheck(suite: DatabaseOptimizationSuite): Promise<void> {
  enhancedDbLogger.info('üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...');

  const healthStatus = await suite.performHealthCheck();
  
  enhancedDbLogger.info('Health check —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
    overall: healthStatus.overall,
    components: healthStatus.components,
    lastCheck: healthStatus.lastCheck
  });

  if (healthStatus.overall === 'CRITICAL') {
    throw new Error('–°–∏—Å—Ç–µ–º–∞ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
  }

  enhancedDbLogger.info('‚úÖ Health check —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
 */
async function testOptimizedRepositories(suite: DatabaseOptimizationSuite): Promise<void> {
  enhancedDbLogger.info('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...');

  try {
    const { MixRequestRepository, WalletRepository } = suite.getOptimizedRepositories();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º MixRequestRepository
    const startTime = Date.now();
    const mixStats = await MixRequestRepository.getStatistics();
    const mixStatsTime = Date.now() - startTime;

    enhancedDbLogger.info('MixRequest —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞', {
      time: mixStatsTime + 'ms',
      stats: {
        total: mixStats.total,
        successRate: mixStats.successRate
      }
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º WalletRepository
    const walletStartTime = Date.now();
    const walletStats = await WalletRepository.getStatistics();
    const walletStatsTime = Date.now() - walletStartTime;

    enhancedDbLogger.info('Wallet —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞', {
      time: walletStatsTime + 'ms',
      stats: {
        total: walletStats.total,
        activeWallets: walletStats.activeWallets
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ (–±–ª–∞–≥–æ–¥–∞—Ä—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    if (mixStatsTime > 5000 || walletStatsTime > 5000) {
      enhancedDbLogger.warn('‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã', {
        mixStatsTime,
        walletStatsTime
      });
    }

    enhancedDbLogger.info('‚úÖ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–π–¥–µ–Ω');

  } catch (error) {
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤', { error });
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ connection pooling
 */
async function testConnectionPooling(suite: DatabaseOptimizationSuite): Promise<void> {
  enhancedDbLogger.info('üèä‚Äç‚ôÇÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º connection pooling...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—É–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
    const readPool = suite.getSequelize(true);
    const writePool = suite.getSequelize(false);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = [];
    for (let i = 0; i < 5; i++) {
      queries.push(readPool.query('SELECT 1 as test'));
      queries.push(writePool.query('SELECT 2 as test'));
    }

    const startTime = Date.now();
    await Promise.all(queries);
    const executionTime = Date.now() - startTime;

    enhancedDbLogger.info('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞', {
      time: executionTime + 'ms',
      queriesCount: queries.length
    });

    enhancedDbLogger.info('‚úÖ –¢–µ—Å—Ç connection pooling –ø—Ä–æ–π–¥–µ–Ω');

  } catch (error) {
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è connection pooling', { error });
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ query optimization
 */
async function testQueryOptimization(suite: DatabaseOptimizationSuite): Promise<void> {
  enhancedDbLogger.info('‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º query optimization...');

  try {
    const queryBuilder = suite.getQueryBuilder();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    const cacheKey = 'test_cache_query';
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
    const startTime1 = Date.now();
    await queryBuilder.getMixRequestStatistics();
    const time1 = Date.now() - startTime1;

    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (—Å –∫—ç—à–µ–º)
    const startTime2 = Date.now();
    await queryBuilder.getMixRequestStatistics();
    const time2 = Date.now() - startTime2;

    enhancedDbLogger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      firstQuery: time1 + 'ms',
      secondQuery: time2 + 'ms',
      improvement: time1 > time2 ? `${Math.round((1 - time2/time1) * 100)}%` : 'no improvement'
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    const cacheStats = queryBuilder.getCacheStats();
    enhancedDbLogger.info('Cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', cacheStats);

    enhancedDbLogger.info('‚úÖ –¢–µ—Å—Ç query optimization –ø—Ä–æ–π–¥–µ–Ω');

  } catch (error) {
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è query optimization', { error });
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ data integrity
 */
async function testDataIntegrity(suite: DatabaseOptimizationSuite): Promise<void> {
  enhancedDbLogger.info('üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º data integrity...');

  try {
    const recoveryManager = suite.getRecoveryManager();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    const startTime = Date.now();
    const integrityReport = await recoveryManager.performIntegrityCheck();
    const checkTime = Date.now() - startTime;

    enhancedDbLogger.info('Integrity check –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞', {
      time: checkTime + 'ms',
      report: {
        totalChecks: integrityReport.totalChecks,
        passedChecks: integrityReport.passedChecks,
        failedChecks: integrityReport.failedChecks,
        issuesCount: integrityReport.issues.length,
        criticalIssues: integrityReport.issues.filter(i => i.severity === 'CRITICAL').length
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (integrityReport.recommendedActions.length > 0) {
      enhancedDbLogger.info('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:', {
        recommendations: integrityReport.recommendedActions
      });
    }

    enhancedDbLogger.info('‚úÖ –¢–µ—Å—Ç data integrity –ø—Ä–æ–π–¥–µ–Ω');

  } catch (error) {
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è data integrity', { error });
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ performance monitoring
 */
async function testPerformanceMonitoring(suite: DatabaseOptimizationSuite): Promise<void> {
  enhancedDbLogger.info('üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º performance monitoring...');

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const perfAnalysis = await suite.triggerPerformanceAnalysis();

    enhancedDbLogger.info('Performance analysis —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      poolStats: {
        totalConnections: perfAnalysis.poolStats.totalConnections,
        activeConnections: perfAnalysis.poolStats.activeConnections,
        poolUtilization: perfAnalysis.poolStats.poolUtilization + '%',
        averageAcquireTime: perfAnalysis.poolStats.averageAcquireTime + 'ms'
      },
      databaseStats: {
        avgQueryTime: perfAnalysis.databaseStats.avgQueryTime + 'ms',
        slowQueries: perfAnalysis.databaseStats.slowQueries,
        totalQueries: perfAnalysis.databaseStats.totalQueries,
        cacheHitRate: perfAnalysis.databaseStats.cacheHitRate + '%'
      },
      cacheStats: perfAnalysis.cacheStats
    });

    enhancedDbLogger.info('‚úÖ –¢–µ—Å—Ç performance monitoring –ø—Ä–æ–π–¥–µ–Ω');

  } catch (error) {
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è performance monitoring', { error });
    throw error;
  }
}

/**
 * –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
async function testLoadPerformance(suite: DatabaseOptimizationSuite): Promise<void> {
  enhancedDbLogger.info('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...');

  try {
    const { MixRequestRepository, WalletRepository } = suite.getOptimizedRepositories();

    // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const concurrentRequests = 50;
    const requests = [];

    const startTime = Date.now();

    for (let i = 0; i < concurrentRequests; i++) {
      // –ß–µ—Ä–µ–¥—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
      if (i % 3 === 0) {
        requests.push(MixRequestRepository.getStatistics());
      } else if (i % 3 === 1) {
        requests.push(WalletRepository.getStatistics());
      } else {
        requests.push(suite.getSequelize(true).query('SELECT COUNT(*) as count FROM mix_requests'));
      }
    }

    const results = await Promise.allSettled(requests);
    const endTime = Date.now();

    const successful = results.filter(r => r.status === 'fulfilled').length;
    const failed = results.filter(r => r.status === 'rejected').length;
    const totalTime = endTime - startTime;
    const avgTime = totalTime / concurrentRequests;

    enhancedDbLogger.info('–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      concurrentRequests,
      successful,
      failed,
      totalTime: totalTime + 'ms',
      avgTimePerRequest: avgTime.toFixed(2) + 'ms',
      requestsPerSecond: Math.round(concurrentRequests / (totalTime / 1000))
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    if (failed > concurrentRequests * 0.1) { // –ë–æ–ª–µ–µ 10% –Ω–µ—É–¥–∞—á
      throw new Error(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${failed}/${concurrentRequests}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    if (avgTime > 1000) { // –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ä–µ–¥–Ω–µ–º
      enhancedDbLogger.warn('‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π', { avgTime });
    }

    enhancedDbLogger.info('‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ');

  } catch (error) {
    enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', { error });
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDatabaseOptimizations()
    .then(() => {
      enhancedDbLogger.info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
      process.exit(0);
    })
    .catch((error) => {
      enhancedDbLogger.error('üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', { error });
      process.exit(1);
    });
}

export { testDatabaseOptimizations };