/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è:
 * - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –ë–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
 * - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫–æ–º–∏—Å—Å–∏–∏
 * - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏ —Å–µ—Å—Å–∏–∏
 * - Blockchain confirmations —Å—Ç–∞—Ç—É—Å—ã
 * - Anti-fraud –¥–∞–Ω–Ω—ã–µ –∏ –±–ª—ç–∫–ª–∏—Å—Ç—ã
 */

import { RedisCacheLayer } from './RedisCacheLayer';
import { enhancedDbLogger } from '../logger';
import { EventEmitter } from 'events';

export interface MixingSessionData {
  id: string;
  currency: string;
  inputAmount: number;
  outputAddresses: string[];
  depositAddress: string;
  status: 'PENDING' | 'DEPOSITED' | 'POOLING' | 'MIXING' | 'COMPLETED' | 'FAILED';
  expiresAt: Date;
  lastUpdated: Date;
  metadata: {
    userAgent?: string;
    ipAddress?: string;
    fingerprint?: string;
  };
}

export interface WalletBalanceData {
  id: string;
  currency: string;
  balance: number;
  availableBalance: number;
  lockedBalance: number;
  lastTransactionAt: Date;
  lastUpdated: Date;
  isActive: boolean;
  isLocked: boolean;
}

export interface ExchangeRateData {
  baseCurrency: string;
  quoteCurrency: string;
  rate: number;
  timestamp: Date;
  source: string;
  confidence: number; // 0-100
}

export interface AntifraudData {
  address: string;
  riskScore: number; // 0-100
  lastSeen: Date;
  flags: string[];
  source: 'INTERNAL' | 'EXTERNAL' | 'USER_REPORT';
}

export interface BlockchainConfirmationData {
  txid: string;
  currency: string;
  confirmations: number;
  requiredConfirmations: number;
  blockHeight: number;
  timestamp: Date;
  isConfirmed: boolean;
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
 */
export class CriticalDataCacheManager extends EventEmitter {
  private cache: RedisCacheLayer;
  
  // Cache prefixes –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  private readonly PREFIXES = {
    MIXING_SESSION: 'mix_session:',
    WALLET_BALANCE: 'wallet_balance:',
    EXCHANGE_RATE: 'exchange_rate:',
    ANTIFRAUD: 'antifraud:',
    CONFIRMATION: 'confirmation:',
    TEMP_KEY: 'temp_key:',
    USER_SESSION: 'user_session:',
    BLACKLIST: 'blacklist:',
    WHITELIST: 'whitelist:'
  };

  // TTL –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  private readonly TTL = {
    MIXING_SESSION: 3600 * 24, // 24 —á–∞—Å–∞
    WALLET_BALANCE: 60, // 1 –º–∏–Ω—É—Ç–∞
    EXCHANGE_RATE: 300, // 5 –º–∏–Ω—É—Ç
    ANTIFRAUD: 3600 * 24 * 7, // 1 –Ω–µ–¥–µ–ª—è
    CONFIRMATION: 300, // 5 –º–∏–Ω—É—Ç
    TEMP_KEY: 1800, // 30 –º–∏–Ω—É—Ç
    USER_SESSION: 3600 * 2, // 2 —á–∞—Å–∞
    BLACKLIST: 3600 * 24, // 24 —á–∞—Å–∞
    WHITELIST: 3600 * 12 // 12 —á–∞—Å–æ–≤
  };

  constructor(cache: RedisCacheLayer) {
    super();
    this.cache = cache;
    
    enhancedDbLogger.info('üîí CriticalDataCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * MIXING SESSION MANAGEMENT
   */

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async setMixingSession(sessionData: MixingSessionData): Promise<void> {
    try {
      const key = `${this.PREFIXES.MIXING_SESSION}${sessionData.id}`;
      
      await this.cache.set(key, sessionData, this.TTL.MIXING_SESSION);
      
      // –¢–∞–∫–∂–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ deposit address –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const depositKey = `${this.PREFIXES.MIXING_SESSION}deposit:${sessionData.depositAddress}`;
      await this.cache.set(depositKey, sessionData.id, this.TTL.MIXING_SESSION);

      enhancedDbLogger.debug('üíæ Mixing session —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', { 
        sessionId: sessionData.id,
        status: sessionData.status,
        currency: sessionData.currency 
      });

      this.emit('mixing_session_cached', sessionData);

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è mixing session', { 
        sessionId: sessionData.id, 
        error 
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getMixingSession(sessionId: string): Promise<MixingSessionData | null> {
    try {
      const key = `${this.PREFIXES.MIXING_SESSION}${sessionId}`;
      const sessionData = await this.cache.get<MixingSessionData>(key);

      if (sessionData) {
        enhancedDbLogger.debug('‚úÖ Mixing session –Ω–∞–π–¥–µ–Ω–∞', { 
          sessionId,
          status: sessionData.status 
        });
      }

      return sessionData;

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è mixing session', { sessionId, error });
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ deposit address
   */
  async findMixingSessionByDeposit(depositAddress: string): Promise<MixingSessionData | null> {
    try {
      const depositKey = `${this.PREFIXES.MIXING_SESSION}deposit:${depositAddress}`;
      const sessionId = await this.cache.get<string>(depositKey);
      
      if (!sessionId) return null;
      
      return await this.getMixingSession(sessionId);

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ session –ø–æ deposit', { depositAddress, error });
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async updateMixingSessionStatus(
    sessionId: string, 
    status: MixingSessionData['status'],
    metadata?: Partial<MixingSessionData>
  ): Promise<boolean> {
    try {
      const existingSession = await this.getMixingSession(sessionId);
      if (!existingSession) return false;

      const updatedSession: MixingSessionData = {
        ...existingSession,
        status,
        lastUpdated: new Date(),
        ...metadata
      };

      await this.setMixingSession(updatedSession);
      
      enhancedDbLogger.info('üîÑ Mixing session —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω', { 
        sessionId, 
        oldStatus: existingSession.status,
        newStatus: status 
      });

      this.emit('mixing_session_status_updated', { sessionId, oldStatus: existingSession.status, newStatus: status });

      return true;

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ session', { sessionId, status, error });
      return false;
    }
  }

  /**
   * WALLET BALANCE MANAGEMENT
   */

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  async setWalletBalance(balanceData: WalletBalanceData): Promise<void> {
    try {
      const key = `${this.PREFIXES.WALLET_BALANCE}${balanceData.id}`;
      
      await this.cache.set(key, balanceData, this.TTL.WALLET_BALANCE);

      // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –≤–∞–ª—é—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const currencyKey = `${this.PREFIXES.WALLET_BALANCE}currency:${balanceData.currency}`;
      const currencyWallets = await this.cache.get<string[]>(currencyKey) || [];
      
      if (!currencyWallets.includes(balanceData.id)) {
        currencyWallets.push(balanceData.id);
        await this.cache.set(currencyKey, currencyWallets, this.TTL.WALLET_BALANCE);
      }

      enhancedDbLogger.debug('üí∞ Wallet balance –∫—ç—à–∏—Ä–æ–≤–∞–Ω', { 
        walletId: balanceData.id,
        currency: balanceData.currency,
        balance: balanceData.balance 
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è wallet balance', { 
        walletId: balanceData.id, 
        error 
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  async getWalletBalance(walletId: string): Promise<WalletBalanceData | null> {
    try {
      const key = `${this.PREFIXES.WALLET_BALANCE}${walletId}`;
      return await this.cache.get<WalletBalanceData>(key);

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è wallet balance', { walletId, error });
      return null;
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  async invalidateWalletBalance(walletId: string): Promise<void> {
    try {
      const key = `${this.PREFIXES.WALLET_BALANCE}${walletId}`;
      await this.cache.delete(key);
      
      enhancedDbLogger.debug('üóëÔ∏è Wallet balance –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', { walletId });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ wallet balance', { walletId, error });
    }
  }

  /**
   * EXCHANGE RATES MANAGEMENT
   */

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
   */
  async setExchangeRate(rateData: ExchangeRateData): Promise<void> {
    try {
      const key = `${this.PREFIXES.EXCHANGE_RATE}${rateData.baseCurrency}_${rateData.quoteCurrency}`;
      
      await this.cache.set(key, rateData, this.TTL.EXCHANGE_RATE);

      enhancedDbLogger.debug('üìà Exchange rate –∫—ç—à–∏—Ä–æ–≤–∞–Ω', { 
        pair: `${rateData.baseCurrency}/${rateData.quoteCurrency}`,
        rate: rateData.rate,
        source: rateData.source 
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è exchange rate', { 
        pair: `${rateData.baseCurrency}/${rateData.quoteCurrency}`, 
        error 
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
   */
  async getExchangeRate(baseCurrency: string, quoteCurrency: string): Promise<ExchangeRateData | null> {
    try {
      const key = `${this.PREFIXES.EXCHANGE_RATE}${baseCurrency}_${quoteCurrency}`;
      return await this.cache.get<ExchangeRateData>(key);

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è exchange rate', { 
        baseCurrency, 
        quoteCurrency, 
        error 
      });
      return null;
    }
  }

  /**
   * ANTIFRAUD & SECURITY MANAGEMENT
   */

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ antifraud –¥–∞–Ω–Ω—ã—Ö
   */
  async setAntifraudData(data: AntifraudData): Promise<void> {
    try {
      const key = `${this.PREFIXES.ANTIFRAUD}${data.address}`;
      
      await this.cache.set(key, data, this.TTL.ANTIFRAUD);

      // –ï—Å–ª–∏ risk score –≤—ã—Å–æ–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤ blacklist
      if (data.riskScore >= 80) {
        await this.addToBlacklist(data.address, `High risk score: ${data.riskScore}`);
      }

      enhancedDbLogger.debug('üõ°Ô∏è Antifraud –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã', { 
        address: data.address.substring(0, 10) + '...',
        riskScore: data.riskScore,
        flags: data.flags 
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è antifraud –¥–∞–Ω–Ω—ã—Ö', { 
        address: data.address, 
        error 
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ antifraud –¥–∞–Ω–Ω—ã—Ö
   */
  async getAntifraudData(address: string): Promise<AntifraudData | null> {
    try {
      const key = `${this.PREFIXES.ANTIFRAUD}${address}`;
      return await this.cache.get<AntifraudData>(key);

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è antifraud –¥–∞–Ω–Ω—ã—Ö', { address, error });
      return null;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ blacklist
   */
  async addToBlacklist(address: string, reason: string): Promise<void> {
    try {
      const key = `${this.PREFIXES.BLACKLIST}${address}`;
      
      await this.cache.set(key, {
        address,
        reason,
        addedAt: new Date(),
        source: 'INTERNAL'
      }, this.TTL.BLACKLIST);

      enhancedDbLogger.warn('‚ö†Ô∏è –ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist', { 
        address: address.substring(0, 10) + '...',
        reason 
      });

      this.emit('address_blacklisted', { address, reason });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ blacklist', { address, reason, error });
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤ blacklist
   */
  async isBlacklisted(address: string): Promise<boolean> {
    try {
      const key = `${this.PREFIXES.BLACKLIST}${address}`;
      const result = await this.cache.exists(key);
      
      if (result) {
        enhancedDbLogger.warn('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω blacklisted –∞–¥—Ä–µ—Å', { 
          address: address.substring(0, 10) + '...' 
        });
      }

      return result;

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ blacklist', { address, error });
      return false;
    }
  }

  /**
   * BLOCKCHAIN CONFIRMATIONS MANAGEMENT
   */

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
   */
  async setConfirmationData(data: BlockchainConfirmationData): Promise<void> {
    try {
      const key = `${this.PREFIXES.CONFIRMATION}${data.txid}`;
      
      await this.cache.set(key, data, this.TTL.CONFIRMATION);

      enhancedDbLogger.debug('‚õìÔ∏è Confirmation –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã', { 
        txid: data.txid.substring(0, 16) + '...',
        confirmations: data.confirmations,
        isConfirmed: data.isConfirmed 
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è confirmation –¥–∞–Ω–Ω—ã—Ö', { 
        txid: data.txid, 
        error 
      });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
   */
  async getConfirmationData(txid: string): Promise<BlockchainConfirmationData | null> {
    try {
      const key = `${this.PREFIXES.CONFIRMATION}${txid}`;
      return await this.cache.get<BlockchainConfirmationData>(key);

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è confirmation –¥–∞–Ω–Ω—ã—Ö', { txid, error });
      return null;
    }
  }

  /**
   * TEMPORARY KEYS & SESSION MANAGEMENT
   */

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  async setTempKey(keyId: string, data: any, customTTL?: number): Promise<void> {
    try {
      const key = `${this.PREFIXES.TEMP_KEY}${keyId}`;
      const ttl = customTTL || this.TTL.TEMP_KEY;
      
      await this.cache.set(key, data, ttl);

      enhancedDbLogger.debug('üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω', { keyId, ttl });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞', { keyId, error });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  async getTempKey(keyId: string): Promise<any | null> {
    try {
      const key = `${this.PREFIXES.TEMP_KEY}${keyId}`;
      return await this.cache.get(key);

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞', { keyId, error });
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  async deleteTempKey(keyId: string): Promise<boolean> {
    try {
      const key = `${this.PREFIXES.TEMP_KEY}${keyId}`;
      const deleted = await this.cache.delete(key);
      
      if (deleted) {
        enhancedDbLogger.debug('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á —É–¥–∞–ª–µ–Ω', { keyId });
      }

      return deleted;

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞', { keyId, error });
      return false;
    }
  }

  /**
   * BULK OPERATIONS –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */

  /**
   * Bulk –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  async bulkSetWalletBalances(balances: WalletBalanceData[]): Promise<void> {
    try {
      const operations = balances.map(balance => ({
        type: 'set' as const,
        key: `${this.PREFIXES.WALLET_BALANCE}${balance.id}`,
        value: balance,
        ttl: this.TTL.WALLET_BALANCE
      }));

      await this.cache.executeBatch({ operations });

      enhancedDbLogger.debug('üì¶ Bulk –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤', { count: balances.length });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ bulk –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤', { 
        count: balances.length, 
        error 
      });
      throw error;
    }
  }

  /**
   * Bulk –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  async bulkGetWalletBalances(walletIds: string[]): Promise<Map<string, WalletBalanceData | null>> {
    try {
      const operations = walletIds.map(id => ({
        type: 'get' as const,
        key: `${this.PREFIXES.WALLET_BALANCE}${id}`
      }));

      const results = await this.cache.executeBatch({ operations });
      
      const balancesMap = new Map<string, WalletBalanceData | null>();
      walletIds.forEach((id, index) => {
        balancesMap.set(id, results[index] || null);
      });

      enhancedDbLogger.debug('üì¶ Bulk –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤', { count: walletIds.length });

      return balancesMap;

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ bulk –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤', { 
        count: walletIds.length, 
        error 
      });
      throw error;
    }
  }

  /**
   * ANALYTICS & MONITORING
   */

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  getCacheStats(): any {
    return {
      ...this.cache.getStats(),
      prefixes: Object.keys(this.PREFIXES),
      ttlSettings: this.TTL
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–û–°–¢–û–†–û–ñ–ù–û!)
   */
  async clearAllCriticalData(): Promise<void> {
    enhancedDbLogger.warn('‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –í–°–ï–• –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!');

    try {
      for (const prefix of Object.values(this.PREFIXES)) {
        await this.cache.invalidatePattern(prefix);
      }

      enhancedDbLogger.info('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      this.emit('all_critical_data_cleared');

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö', { error });
      throw error;
    }
  }

  /**
   * Graceful shutdown
   */
  async shutdown(): Promise<void> {
    enhancedDbLogger.info('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ CriticalDataCacheManager...');
    
    // –ö—ç—à –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    this.removeAllListeners();
    
    enhancedDbLogger.info('‚úÖ CriticalDataCacheManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

export default CriticalDataCacheManager;