/**
 * –ú–æ—â–Ω—ã–π Redis Connection Manager –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∫—Ä–∏–ø—Ç–æ–º–∏–∫—Å–µ—Ä–∞
 * 
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - Connection pooling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * - Cluster support –¥–ª—è –≤—ã—Å–æ–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 * - Automatic failover –∏ reconnection
 * - Health monitoring –∏ performance metrics
 * - Read/Write splitting –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

import Redis, { Cluster, RedisOptions, ClusterOptions } from 'ioredis';
import { enhancedDbLogger } from '../logger';
import { EventEmitter } from 'events';

export interface RedisConnectionConfig {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  host: string;
  port: number;
  password?: string;
  db: number;
  keyPrefix: string;
  
  // Cluster –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  enableCluster: boolean;
  clusterNodes?: Array<{ host: string; port: number }>;
  
  // Connection pool –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  maxConnections: number;
  minConnections: number;
  connectionTimeout: number;
  commandTimeout: number;
  retryDelayOnFailover: number;
  maxRetriesPerRequest: number;
  
  // Read/Write splitting
  enableReadWriteSplit: boolean;
  readOnlyNodes?: Array<{ host: string; port: number }>;
  readWriteRatio: number; // 0.8 = 80% read, 20% write
  
  // Health monitoring
  enableHealthChecks: boolean;
  healthCheckInterval: number;
  healthCheckTimeout: number;
  
  // Performance optimization
  enableKeepAlive: boolean;
  enableCompression: boolean;
  lazyConnect: boolean;
  enableOfflineQueue: boolean;
  
  // Failover settings
  enableAutomaticFailover: boolean;
  failoverTimeout: number;
  maxFailoverAttempts: number;
}

export interface RedisConnectionStats {
  totalConnections: number;
  activeConnections: number;
  idleConnections: number;
  failedConnections: number;
  commandsExecuted: number;
  commandsFailed: number;
  averageResponseTime: number;
  memoryUsage: number;
  hitRate: number;
  uptime: number;
}

export interface RedisHealthStatus {
  isHealthy: boolean;
  responseTime: number;
  memoryUsage: number;
  connectedClients: number;
  lastError?: string;
  clusterStatus?: string;
  replicationStatus?: string;
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Redis Connection Manager
 */
export class RedisConnectionManager extends EventEmitter {
  private config: RedisConnectionConfig;
  private masterConnection?: Redis | Cluster;
  private readConnections: (Redis | Cluster)[] = [];
  private writeConnection?: Redis | Cluster;
  
  private connectionPool: Redis[] = [];
  private isConnected = false;
  private isShuttingDown = false;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  private stats: RedisConnectionStats;
  private healthStatus: RedisHealthStatus;
  private responseTimes: number[] = [];
  private healthCheckTimer?: NodeJS.Timeout;
  
  // Failover management
  private currentMasterIndex = 0;
  private failoverInProgress = false;
  private failoverAttempts = 0;

  constructor(config: Partial<RedisConnectionConfig> = {}) {
    super();
    
    this.config = {
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      password: process.env.REDIS_PASSWORD,
      db: parseInt(process.env.REDIS_DB || '0'),
      keyPrefix: process.env.REDIS_KEY_PREFIX || 'mixer:',
      
      enableCluster: false,
      clusterNodes: [],
      
      maxConnections: 20,
      minConnections: 5,
      connectionTimeout: 10000,
      commandTimeout: 5000,
      retryDelayOnFailover: 100,
      maxRetriesPerRequest: 3,
      
      enableReadWriteSplit: false,
      readOnlyNodes: [],
      readWriteRatio: 0.8,
      
      enableHealthChecks: true,
      healthCheckInterval: 30000,
      healthCheckTimeout: 5000,
      
      enableKeepAlive: true,
      enableCompression: false,
      lazyConnect: true,
      enableOfflineQueue: true,
      
      enableAutomaticFailover: true,
      failoverTimeout: 10000,
      maxFailoverAttempts: 3,
      
      ...config
    };

    this.stats = {
      totalConnections: 0,
      activeConnections: 0,
      idleConnections: 0,
      failedConnections: 0,
      commandsExecuted: 0,
      commandsFailed: 0,
      averageResponseTime: 0,
      memoryUsage: 0,
      hitRate: 0,
      uptime: 0
    };

    this.healthStatus = {
      isHealthy: false,
      responseTime: 0,
      memoryUsage: 0,
      connectedClients: 0
    };

    enhancedDbLogger.info('üîó RedisConnectionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      config: {
        host: this.config.host,
        port: this.config.port,
        enableCluster: this.config.enableCluster,
        enableReadWriteSplit: this.config.enableReadWriteSplit,
        maxConnections: this.config.maxConnections
      }
    });
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
   */
  public async connect(): Promise<void> {
    if (this.isConnected) {
      enhancedDbLogger.warn('‚ö†Ô∏è Redis —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    try {
      enhancedDbLogger.info('üöÄ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis...');

      if (this.config.enableCluster) {
        await this.connectToCluster();
      } else {
        await this.connectToSingleInstance();
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Read/Write splitting –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (this.config.enableReadWriteSplit) {
        await this.setupReadWriteSplitting();
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º connection pool
      await this.initializeConnectionPool();

      // –ó–∞–ø—É—Å–∫–∞–µ–º health monitoring
      if (this.config.enableHealthChecks) {
        this.startHealthMonitoring();
      }

      this.isConnected = true;
      enhancedDbLogger.info('‚úÖ Redis —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      this.emit('connected');

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis', { error });
      throw error;
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis Cluster
   */
  private async connectToCluster(): Promise<void> {
    const clusterOptions: ClusterOptions = {
      retryDelayOnFailover: this.config.retryDelayOnFailover,
      enableOfflineQueue: this.config.enableOfflineQueue,
      lazyConnect: this.config.lazyConnect,
      keyPrefix: this.config.keyPrefix,
      redisOptions: {
        password: this.config.password,
        connectTimeout: this.config.connectionTimeout,
        commandTimeout: this.config.commandTimeout,
        maxRetriesPerRequest: this.config.maxRetriesPerRequest,
        keepAlive: this.config.enableKeepAlive ? 30000 : 0
      }
    };

    this.masterConnection = new Cluster(
      this.config.clusterNodes || [{ host: this.config.host, port: this.config.port }],
      clusterOptions
    );

    await this.setupConnectionEventHandlers(this.masterConnection as Cluster);
    
    enhancedDbLogger.info('‚úÖ Redis Cluster –ø–æ–¥–∫–ª—é—á–µ–Ω', {
      nodes: this.config.clusterNodes?.length || 1
    });
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–¥–∏–Ω–æ—á–Ω–æ–º—É Redis –∏–Ω—Å—Ç–∞–Ω—Å—É
   */
  private async connectToSingleInstance(): Promise<void> {
    const redisOptions: RedisOptions = {
      host: this.config.host,
      port: this.config.port,
      password: this.config.password,
      db: this.config.db,
      keyPrefix: this.config.keyPrefix,
      connectTimeout: this.config.connectionTimeout,
      commandTimeout: this.config.commandTimeout,
      maxRetriesPerRequest: this.config.maxRetriesPerRequest,
      lazyConnect: this.config.lazyConnect,
      enableOfflineQueue: this.config.enableOfflineQueue,
      keepAlive: this.config.enableKeepAlive ? 30000 : 0
    };

    this.masterConnection = new Redis(redisOptions);
    await this.setupConnectionEventHandlers(this.masterConnection as Redis);
    
    enhancedDbLogger.info('‚úÖ Redis Single Instance –ø–æ–¥–∫–ª—é—á–µ–Ω');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Read/Write splitting
   */
  private async setupReadWriteSplitting(): Promise<void> {
    if (!this.config.readOnlyNodes || this.config.readOnlyNodes.length === 0) {
      enhancedDbLogger.warn('‚ö†Ô∏è ReadWrite splitting –≤–∫–ª—é—á–µ–Ω, –Ω–æ read-only nodes –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      return;
    }

    enhancedDbLogger.info('üîÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Read/Write splitting...');

    // –°–æ–∑–¥–∞–µ–º write connection (–æ–±—ã—á–Ω–æ master)
    this.writeConnection = this.masterConnection;

    // –°–æ–∑–¥–∞–µ–º read connections
    for (const node of this.config.readOnlyNodes) {
      const readConnection = new Redis({
        host: node.host,
        port: node.port,
        password: this.config.password,
        db: this.config.db,
        keyPrefix: this.config.keyPrefix,
        connectTimeout: this.config.connectionTimeout,
        commandTimeout: this.config.commandTimeout,
        lazyConnect: this.config.lazyConnect,
        readOnly: true // –í–∞–∂–Ω–æ: —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
      });

      await this.setupConnectionEventHandlers(readConnection);
      this.readConnections.push(readConnection);
    }

    enhancedDbLogger.info('‚úÖ Read/Write splitting –Ω–∞—Å—Ç—Ä–æ–µ–Ω', {
      readNodes: this.readConnections.length,
      writeNodes: 1
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è connection pool
   */
  private async initializeConnectionPool(): Promise<void> {
    enhancedDbLogger.info('üèä‚Äç‚ôÇÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º connection pool...');

    const poolSize = Math.min(this.config.maxConnections, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞

    for (let i = 0; i < poolSize; i++) {
      const connection = new Redis({
        host: this.config.host,
        port: this.config.port,
        password: this.config.password,
        db: this.config.db,
        keyPrefix: this.config.keyPrefix,
        connectTimeout: this.config.connectionTimeout,
        lazyConnect: this.config.lazyConnect
      });

      await this.setupConnectionEventHandlers(connection);
      this.connectionPool.push(connection);
    }

    this.stats.totalConnections = this.connectionPool.length;
    this.stats.idleConnections = this.connectionPool.length;

    enhancedDbLogger.info('‚úÖ Connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      poolSize: this.connectionPool.length
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private async setupConnectionEventHandlers(connection: Redis | Cluster): Promise<void> {
    connection.on('connect', () => {
      enhancedDbLogger.info('üîó Redis connection established');
      this.stats.activeConnections++;
    });

    connection.on('ready', () => {
      enhancedDbLogger.info('‚úÖ Redis connection ready');
      this.healthStatus.isHealthy = true;
    });

    connection.on('error', (error) => {
      enhancedDbLogger.error('‚ùå Redis connection error', { error });
      this.stats.failedConnections++;
      this.handleConnectionError(error);
    });

    connection.on('close', () => {
      enhancedDbLogger.warn('‚ö†Ô∏è Redis connection closed');
      this.stats.activeConnections = Math.max(0, this.stats.activeConnections - 1);
    });

    connection.on('reconnecting', () => {
      enhancedDbLogger.info('üîÑ Redis reconnecting...');
    });

    connection.on('end', () => {
      enhancedDbLogger.info('üîö Redis connection ended');
    });

    // –î–ª—è cluster-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    if (connection instanceof Cluster) {
      connection.on('node error', (error, node) => {
        enhancedDbLogger.error('‚ùå Cluster node error', { error, node });
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  public getConnection(isReadOperation: boolean = false): Redis | Cluster {
    if (!this.isConnected || !this.masterConnection) {
      throw new Error('Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    // –ï—Å–ª–∏ Read/Write splitting –≤—ã–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º master
    if (!this.config.enableReadWriteSplit) {
      return this.masterConnection;
    }

    // –î–ª—è write –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º write connection
    if (!isReadOperation) {
      return this.writeConnection || this.masterConnection;
    }

    // –î–ª—è read –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–±–∏—Ä–∞–µ–º –º–µ–∂–¥—É read –∏ write connections
    if (this.readConnections.length > 0 && Math.random() < this.config.readWriteRatio) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º round-robin –¥–ª—è read connections
      const randomIndex = Math.floor(Math.random() * this.readConnections.length);
      return this.readConnections[randomIndex];
    }

    return this.masterConnection;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  public async executeCommand(
    command: string,
    args: any[],
    isReadOperation: boolean = false
  ): Promise<any> {
    const startTime = Date.now();
    
    try {
      const connection = this.getConnection(isReadOperation);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
      const result = await (connection as any)[command](...args);
      
      const responseTime = Date.now() - startTime;
      this.recordResponseTime(responseTime);
      this.stats.commandsExecuted++;
      
      return result;
      
    } catch (error) {
      this.stats.commandsFailed++;
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Redis –∫–æ–º–∞–Ω–¥—ã', {
        command,
        args: args.slice(0, 3), // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        error
      });
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
   */
  private startHealthMonitoring(): void {
    this.healthCheckTimer = setInterval(async () => {
      if (!this.isShuttingDown) {
        await this.performHealthCheck();
      }
    }, this.config.healthCheckInterval);

    enhancedDbLogger.info('üíì Redis health monitoring –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis
   */
  private async performHealthCheck(): Promise<void> {
    if (!this.masterConnection) return;

    const startTime = Date.now();

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É PING
      await Promise.race([
        this.masterConnection.ping(),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Health check timeout')), this.config.healthCheckTimeout)
        )
      ]);

      const responseTime = Date.now() - startTime;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
      const info = await this.masterConnection.info('memory');
      const memoryUsage = this.parseMemoryUsage(info);

      const clientsInfo = await this.masterConnection.info('clients');
      const connectedClients = this.parseConnectedClients(clientsInfo);

      this.healthStatus = {
        isHealthy: true,
        responseTime,
        memoryUsage,
        connectedClients,
        lastError: undefined
      };

      // –î–ª—è cluster –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (this.masterConnection instanceof Cluster) {
        try {
          const clusterInfo = await (this.masterConnection as any).cluster('info');
          this.healthStatus.clusterStatus = this.parseClusterStatus(clusterInfo);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ cluster info
        }
      }

    } catch (error) {
      this.healthStatus = {
        isHealthy: false,
        responseTime: Date.now() - startTime,
        memoryUsage: 0,
        connectedClients: 0,
        lastError: (error as Error).message
      };

      enhancedDbLogger.error('‚ùå Redis health check failed', { error });
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π failover
      if (this.config.enableAutomaticFailover && !this.failoverInProgress) {
        await this.attemptFailover();
      }
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ failover –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
   */
  private async attemptFailover(): Promise<void> {
    if (this.failoverInProgress || this.failoverAttempts >= this.config.maxFailoverAttempts) {
      return;
    }

    this.failoverInProgress = true;
    this.failoverAttempts++;

    enhancedDbLogger.warn('üîÑ –ù–∞—á–∏–Ω–∞–µ–º Redis failover', {
      attempt: this.failoverAttempts,
      maxAttempts: this.config.maxFailoverAttempts
    });

    try {
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
      await this.reconnect();
      
      this.failoverInProgress = false;
      this.failoverAttempts = 0;
      
      enhancedDbLogger.info('‚úÖ Redis failover —É—Å–ø–µ—à–µ–Ω');
      this.emit('failover_success');

    } catch (error) {
      enhancedDbLogger.error('‚ùå Redis failover failed', { error });
      
      setTimeout(() => {
        this.failoverInProgress = false;
      }, this.config.failoverTimeout);

      this.emit('failover_failed', error);
    }
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
   */
  private async reconnect(): Promise<void> {
    enhancedDbLogger.info('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis...');

    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (this.masterConnection) {
        await this.masterConnection.disconnect();
      }

      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      await this.connect();

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis', { error });
      throw error;
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private recordResponseTime(time: number): void {
    this.responseTimes.push(time);
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    if (this.responseTimes.length > 100) {
      this.responseTimes.shift();
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    this.stats.averageResponseTime = 
      this.responseTimes.reduce((sum, t) => sum + t, 0) / this.responseTimes.length;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private handleConnectionError(error: Error): void {
    this.healthStatus.isHealthy = false;
    this.healthStatus.lastError = error.message;
    
    this.emit('connection_error', error);

    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π failover, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    if (this.config.enableAutomaticFailover) {
      setImmediate(() => this.attemptFailover());
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∏–∑ Redis INFO
   */
  private parseMemoryUsage(info: string): number {
    const match = info.match(/used_memory:(\d+)/);
    return match ? parseInt(match[1]) : 0;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  private parseConnectedClients(info: string): number {
    const match = info.match(/connected_clients:(\d+)/);
    return match ? parseInt(match[1]) : 0;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
   */
  private parseClusterStatus(info: string): string {
    const match = info.match(/cluster_state:(\w+)/);
    return match ? match[1] : 'unknown';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  public getConnectionStats(): RedisConnectionStats {
    this.stats.idleConnections = this.connectionPool.length - this.stats.activeConnections;
    this.stats.uptime = process.uptime();
    
    return { ...this.stats };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
   */
  public getHealthStatus(): RedisHealthStatus {
    return { ...this.healthStatus };
  }

  /**
   * Graceful shutdown
   */
  public async shutdown(): Promise<void> {
    this.isShuttingDown = true;
    
    enhancedDbLogger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown Redis connections...');

    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health monitoring
      if (this.healthCheckTimer) {
        clearInterval(this.healthCheckTimer);
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const disconnectPromises = [];

      if (this.masterConnection) {
        disconnectPromises.push(this.masterConnection.disconnect());
      }

      if (this.writeConnection && this.writeConnection !== this.masterConnection) {
        disconnectPromises.push(this.writeConnection.disconnect());
      }

      for (const readConnection of this.readConnections) {
        disconnectPromises.push(readConnection.disconnect());
      }

      for (const poolConnection of this.connectionPool) {
        disconnectPromises.push(poolConnection.disconnect());
      }

      await Promise.all(disconnectPromises);

      this.isConnected = false;
      enhancedDbLogger.info('‚úÖ Redis connections —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã');

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis connections', { error });
      throw error;
    }
  }
}

export default RedisConnectionManager;