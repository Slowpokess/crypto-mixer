/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ database —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –º–æ–¥–µ–ª–∏, –º–∏–≥—Ä–∞—Ü–∏–∏, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
 */

const DatabaseManager = require('./DatabaseManager');
const { initializeModels } = require('./models');
const { MixRequestRepository, WalletRepository } = require('./repositories');
const logger = require('../utils/logger');

async function testDatabaseInitialization() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ database —Å–∏—Å—Ç–µ–º—ã...\n');

    // 1. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DatabaseManager
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DatabaseManager...');
    await DatabaseManager.initialize('development');
    
    const health = await DatabaseManager.getHealth();
    console.log('‚úÖ DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', health.status);
    
    const poolStatus = await DatabaseManager.getPoolStatus();
    console.log('‚úÖ Connection pool –∞–∫—Ç–∏–≤–µ–Ω:', poolStatus ? 'OK' : 'ERROR');

    // 2. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π...');
    const sequelize = DatabaseManager.getSequelize();
    const models = await initializeModels(sequelize);
    
    console.log('‚úÖ –ú–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', Object.keys(models).filter(k => k !== 'sequelize' && k !== 'Sequelize').length);

    // 3. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
    const connectionTest = await DatabaseManager.testConnection();
    console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionTest.success ? `OK (${connectionTest.responseTime}ms)` : 'FAILED');

    // 4. –¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    try {
      const mixRepo = MixRequestRepository;
      const walletRepo = WalletRepository;
      console.log('‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: MixRequest, Wallet');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:', error.message);
    }

    // 5. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    const { validateCurrency, validateAmount } = require('./types');
    
    const currencyTest = validateCurrency('BTC');
    const amountTest = validateAmount(1.5);
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:', currencyTest && amountTest ? 'OK' : 'ERROR');

    // 6. –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç...');
    const { BackupManager, DatabaseMonitoring } = require('./utils');
    
    const backupStats = await BackupManager.getBackupStats();
    console.log('‚úÖ BackupManager:', backupStats ? 'OK' : 'ERROR');
    
    const monitoringStatus = DatabaseMonitoring.getMonitoringStatus ? 'OK' : 'ERROR';
    console.log('‚úÖ DatabaseMonitoring:', monitoringStatus);

    // 7. –§–∏–Ω–∞–ª—å–Ω—ã–π health check
    console.log('\n7Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const finalHealth = await DatabaseManager.getHealth();
    const isHealthy = DatabaseManager.isHealthy();
    
    console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', finalHealth.status);
    console.log('‚úÖ Database —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞:', isHealthy ? 'YES' : 'NO');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await DatabaseManager.disconnect();
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    return {
      success: true,
      components: {
        databaseManager: true,
        models: true,
        repositories: true,
        validation: true,
        utilities: true,
        healthCheck: isHealthy
      }
    };

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    
    try {
      await DatabaseManager.disconnect();
    } catch (disconnectError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', disconnectError.message);
    }
    
    return {
      success: false,
      error: error.message
    };
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDatabaseInitialization()
    .then(result => {
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = testDatabaseInitialization;