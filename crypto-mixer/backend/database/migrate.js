#!/usr/bin/env node

/**
 * CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node migrate.js [command] [options]
 */

const MigrationManager = require('./migrations');
const databaseConfig = require('../config/database');

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = databaseConfig.createConnection();
const migrationManager = new MigrationManager(sequelize);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

async function runCommand() {
  try {
    switch (command) {
      case 'up':
      case 'migrate':
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
        await migrationManager.migrate();
        break;

      case 'down':
      case 'rollback':
        const steps = parseInt(args[1]) || 1;
        console.log(`üîÑ –û—Ç–∫–∞—Ç ${steps} –º–∏–≥—Ä–∞—Ü–∏–π...`);
        await migrationManager.rollback(steps);
        break;

      case 'status':
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π...');
        await migrationManager.status();
        break;

      case 'create':
        const migrationName = args[1];
        if (!migrationName) {
          console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
          console.log('–ü—Ä–∏–º–µ—Ä: node migrate.js create "add user table"');
          process.exit(1);
        }
        const filepath = migrationManager.createMigration(migrationName);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: ${filepath}`);
        break;

      case 'validate':
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π...');
        const issues = await migrationManager.validateMigrations();
        
        if (issues.length === 0) {
          console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã');
        } else {
          console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
          issues.forEach(issue => {
            console.log(`  - ${issue.version}: ${issue.message} (${issue.type})`);
          });
          process.exit(1);
        }
        break;

      case 'init':
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...');
        await migrationManager.initializeMigrationTable();
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        break;

      case 'help':
      case '--help':
      case '-h':
        showHelp();
        break;

      default:
        console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
        showHelp();
        process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
    
    if (process.env.NODE_ENV === 'development') {
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }
    
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    await sequelize.close();
  }
}

function showHelp() {
  console.log(`
üóÑÔ∏è  –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ Crypto Mixer

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node migrate.js <command> [options]

–ö–æ–º–∞–Ω–¥—ã:
  up, migrate           –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  down, rollback [n]    –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –º–∏–≥—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
  status               –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
  create <name>        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
  validate             –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–π
  init                 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º–∏–≥—Ä–∞—Ü–∏–π
  help                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node migrate.js up                    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  node migrate.js down 2                # –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–≥—Ä–∞—Ü–∏–∏
  node migrate.js create "add indexes"  # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
  node migrate.js status                # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  node migrate.js validate              # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  NODE_ENV             –û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production)
  DB_HOST              –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  DB_PORT              –ü–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  DB_NAME              –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  DB_USER              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î
  DB_PASSWORD          –ü–∞—Ä–æ–ª—å –ë–î

–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  NODE_ENV=development DB_NAME=cryptomixer_dev node migrate.js up
  NODE_ENV=production node migrate.js status
`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  await sequelize.close();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  await sequelize.close();
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã
if (require.main === module) {
  runCommand();
}

module.exports = { migrationManager, sequelize };