/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π  
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
 * - Backup –∏ rollback –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

import { Sequelize, Transaction, QueryTypes } from 'sequelize';
import { enhancedDbLogger } from '../logger';
import { MixRequest } from '../models/MixRequest';
import { Wallet } from '../models/Wallet';
import { OutputTransaction } from '../models/OutputTransaction';
import { DepositAddress } from '../models/DepositAddress';
import { AuditLog } from '../models/AuditLog';
import { BackupManager } from './BackupManager';
import { EventEmitter } from 'events';

export interface RecoveryOptions {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
  enableIntegrityChecks: boolean;
  integrityCheckInterval: number;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
  enableAutoRecovery: boolean;
  maxRecoveryAttempts: number;
  recoveryDelay: number;
  
  // Backup –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  createRecoveryBackups: boolean;
  backupRetentionDays: number;
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  enableContinuousMonitoring: boolean;
  monitoringInterval: number;
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
  maxInconsistentRecords: number;
  maxBalanceDiscrepancy: number;
}

export interface DataIntegrityReport {
  timestamp: Date;
  totalChecks: number;
  passedChecks: number;
  failedChecks: number;
  issues: IntegrityIssue[];
  recommendedActions: string[];
}

export interface IntegrityIssue {
  type: 'BALANCE_MISMATCH' | 'ORPHANED_RECORD' | 'STATUS_INCONSISTENCY' | 'MISSING_RELATION' | 'DUPLICATE_ADDRESS';
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  description: string;
  affectedRecords: string[];
  suggestedFix: string;
  autoFixable: boolean;
}

export interface RecoveryOperation {
  id: string;
  type: 'INTEGRITY_CHECK' | 'AUTO_RECOVERY' | 'MANUAL_RECOVERY' | 'BACKUP_RESTORE';
  status: 'PENDING' | 'RUNNING' | 'COMPLETED' | 'FAILED';
  startedAt: Date;
  completedAt?: Date;
  error?: string;
  details: any;
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
export class DataRecoveryManager extends EventEmitter {
  private sequelize: Sequelize;
  private backupManager: BackupManager;
  private config: RecoveryOptions;
  private integrityTimer?: NodeJS.Timeout;
  private monitoringTimer?: NodeJS.Timeout;
  private activeOperations = new Map<string, RecoveryOperation>();
  private isShuttingDown = false;

  constructor(
    sequelize: Sequelize,
    backupManager: BackupManager,
    config: Partial<RecoveryOptions> = {}
  ) {
    super();
    
    this.sequelize = sequelize;
    this.backupManager = backupManager;
    this.config = {
      enableIntegrityChecks: true,
      integrityCheckInterval: 3600000, // 1 —á–∞—Å
      enableAutoRecovery: true,
      maxRecoveryAttempts: 3,
      recoveryDelay: 5000,
      createRecoveryBackups: true,
      backupRetentionDays: 30,
      enableContinuousMonitoring: true,
      monitoringInterval: 300000, // 5 –º–∏–Ω—É—Ç
      maxInconsistentRecords: 10,
      maxBalanceDiscrepancy: 0.000001, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
      ...config
    };

    this.startIntegrityChecks();
    this.startContinuousMonitoring();
    
    enhancedDbLogger.info('üõ°Ô∏è DataRecoveryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      config: this.config
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
   */
  private startIntegrityChecks(): void {
    if (!this.config.enableIntegrityChecks) return;

    this.integrityTimer = setInterval(async () => {
      if (!this.isShuttingDown) {
        await this.performIntegrityCheck();
      }
    }, this.config.integrityCheckInterval);

    enhancedDbLogger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω—ã', {
      interval: this.config.integrityCheckInterval
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private startContinuousMonitoring(): void {
    if (!this.config.enableContinuousMonitoring) return;

    this.monitoringTimer = setInterval(async () => {
      if (!this.isShuttingDown) {
        await this.performQuickHealthCheck();
      }
    }, this.config.monitoringInterval);

    enhancedDbLogger.info('üìä –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω', {
      interval: this.config.monitoringInterval
    });
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  public async performIntegrityCheck(): Promise<DataIntegrityReport> {
    const operationId = `integrity_${Date.now()}`;
    const operation: RecoveryOperation = {
      id: operationId,
      type: 'INTEGRITY_CHECK',
      status: 'RUNNING',
      startedAt: new Date(),
      details: {}
    };

    this.activeOperations.set(operationId, operation);
    enhancedDbLogger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');

    try {
      const issues: IntegrityIssue[] = [];

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
      const balanceIssues = await this.checkWalletBalances();
      issues.push(...balanceIssues);

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const relationIssues = await this.checkMixRequestRelations();
      issues.push(...relationIssues);

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
      const statusIssues = await this.checkStatusConsistency();
      issues.push(...statusIssues);

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–¥—Ä–µ—Å–æ–≤
      const duplicateIssues = await this.checkDuplicateAddresses();
      issues.push(...duplicateIssues);

      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned –∑–∞–ø–∏—Å–µ–π
      const orphanIssues = await this.checkOrphanedRecords();
      issues.push(...orphanIssues);

      const report: DataIntegrityReport = {
        timestamp: new Date(),
        totalChecks: 5,
        passedChecks: 5 - issues.filter(i => i.severity === 'CRITICAL' || i.severity === 'HIGH').length,
        failedChecks: issues.filter(i => i.severity === 'CRITICAL' || i.severity === 'HIGH').length,
        issues,
        recommendedActions: this.generateRecommendations(issues)
      };

      operation.status = 'COMPLETED';
      operation.completedAt = new Date();
      operation.details = { report };

      enhancedDbLogger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        totalIssues: issues.length,
        criticalIssues: issues.filter(i => i.severity === 'CRITICAL').length,
        autoFixableIssues: issues.filter(i => i.autoFixable).length
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (this.config.enableAutoRecovery && issues.some(i => i.autoFixable)) {
        await this.performAutoRecovery(issues.filter(i => i.autoFixable));
      }

      this.emit('integrity_check_completed', report);
      return report;

    } catch (error) {
      operation.status = 'FAILED';
      operation.error = (error as Error).message;
      operation.completedAt = new Date();

      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏', { error });
      throw error;
    } finally {
      this.activeOperations.delete(operationId);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  private async checkWalletBalances(): Promise<IntegrityIssue[]> {
    const issues: IntegrityIssue[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
      const negativeBalances = await this.sequelize.query(`
        SELECT id, address, currency, balance 
        FROM wallets 
        WHERE balance < 0
      `, { type: QueryTypes.SELECT }) as any[];

      negativeBalances.forEach(wallet => {
        issues.push({
          type: 'BALANCE_MISMATCH',
          severity: 'CRITICAL',
          description: `–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –∫–æ—à–µ–ª—å–∫–µ ${wallet.address}`,
          affectedRecords: [wallet.id],
          suggestedFix: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å',
          autoFixable: false
        });
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ –±–∞–ª–∞–Ω—Å—ã (–≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞)
      const suspiciousBalances = await this.sequelize.query(`
        SELECT id, address, currency, balance 
        FROM wallets 
        WHERE balance > 1000000 -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–æ—Ä–æ–≥
      `, { type: QueryTypes.SELECT }) as any[];

      suspiciousBalances.forEach(wallet => {
        issues.push({
          type: 'BALANCE_MISMATCH',
          severity: 'MEDIUM',
          description: `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å –≤ –∫–æ—à–µ–ª—å–∫–µ ${wallet.address}: ${wallet.balance}`,
          affectedRecords: [wallet.id],
          suggestedFix: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞',
          autoFixable: false
        });
      });

      enhancedDbLogger.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        negativeBalances: negativeBalances.length,
        suspiciousBalances: suspiciousBalances.length
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤', { error });
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async checkMixRequestRelations(): Promise<IntegrityIssue[]> {
    const issues: IntegrityIssue[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º MixRequest –±–µ–∑ DepositAddress
      const orphanedMixRequests = await this.sequelize.query(`
        SELECT mr.id, mr.status, mr.currency 
        FROM mix_requests mr
        LEFT JOIN deposit_addresses da ON mr.id = da.mix_request_id
        WHERE da.id IS NULL 
          AND mr.status NOT IN ('CANCELLED', 'FAILED')
      `, { type: QueryTypes.SELECT }) as any[];

      orphanedMixRequests.forEach(request => {
        issues.push({
          type: 'MISSING_RELATION',
          severity: 'HIGH',
          description: `MixRequest ${request.id} –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ DepositAddress`,
          affectedRecords: [request.id],
          suggestedFix: '–°–æ–∑–¥–∞—Ç—å DepositAddress –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
          autoFixable: true
        });
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º OutputTransaction –±–µ–∑ MixRequest
      const orphanedOutputs = await this.sequelize.query(`
        SELECT ot.id, ot.mix_request_id 
        FROM output_transactions ot
        LEFT JOIN mix_requests mr ON ot.mix_request_id = mr.id
        WHERE mr.id IS NULL
      `, { type: QueryTypes.SELECT }) as any[];

      orphanedOutputs.forEach(output => {
        issues.push({
          type: 'ORPHANED_RECORD',
          severity: 'MEDIUM',
          description: `OutputTransaction ${output.id} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π MixRequest`,
          affectedRecords: [output.id],
          suggestedFix: '–£–¥–∞–ª–∏—Ç—å orphaned OutputTransaction',
          autoFixable: true
        });
      });

      enhancedDbLogger.info('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        orphanedMixRequests: orphanedMixRequests.length,
        orphanedOutputs: orphanedOutputs.length
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö', { error });
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
   */
  private async checkStatusConsistency(): Promise<IntegrityIssue[]> {
    const issues: IntegrityIssue[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤ MIXING —Å—Ç–∞—Ç—É—Å–µ –∑–∞–ø—Ä–æ—Å—ã
      const stuckMixing = await this.sequelize.query(`
        SELECT id, status, created_at, updated_at 
        FROM mix_requests 
        WHERE status = 'MIXING' 
          AND updated_at < NOW() - INTERVAL 2 HOUR
      `, { type: QueryTypes.SELECT }) as any[];

      stuckMixing.forEach(request => {
        issues.push({
          type: 'STATUS_INCONSISTENCY',
          severity: 'HIGH',
          description: `MixRequest ${request.id} –∑–∞—Å—Ç—Ä—è–ª –≤ —Å—Ç–∞—Ç—É—Å–µ MIXING –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤`,
          affectedRecords: [request.id],
          suggestedFix: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
          autoFixable: true
        });
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º DEPOSITED –±–µ–∑ confirmations —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
      const stuckDeposited = await this.sequelize.query(`
        SELECT id, status, created_at, deposit_confirmed_at 
        FROM mix_requests 
        WHERE status = 'DEPOSITED' 
          AND created_at < NOW() - INTERVAL 24 HOUR
          AND deposit_confirmed_at IS NULL
      `, { type: QueryTypes.SELECT }) as any[];

      stuckDeposited.forEach(request => {
        issues.push({
          type: 'STATUS_INCONSISTENCY',
          severity: 'MEDIUM',
          description: `MixRequest ${request.id} –≤ —Å—Ç–∞—Ç—É—Å–µ DEPOSITED –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤`,
          affectedRecords: [request.id],
          suggestedFix: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫—á–µ–π–Ω —Å—Ç–∞—Ç—É—Å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
          autoFixable: false
        });
      });

      enhancedDbLogger.info('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        stuckMixing: stuckMixing.length,
        stuckDeposited: stuckDeposited.length
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤', { error });
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–¥—Ä–µ—Å–æ–≤
   */
  private async checkDuplicateAddresses(): Promise<IntegrityIssue[]> {
    const issues: IntegrityIssue[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
      const duplicateWallets = await this.sequelize.query(`
        SELECT address, COUNT(*) as count, GROUP_CONCAT(id) as wallet_ids
        FROM wallets 
        GROUP BY address 
        HAVING COUNT(*) > 1
      `, { type: QueryTypes.SELECT }) as any[];

      duplicateWallets.forEach(duplicate => {
        issues.push({
          type: 'DUPLICATE_ADDRESS',
          severity: 'CRITICAL',
          description: `–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${duplicate.address} (${duplicate.count} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)`,
          affectedRecords: duplicate.wallet_ids.split(','),
          suggestedFix: '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ—à–µ–ª—å–∫–∏',
          autoFixable: false
        });
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è deposit –∞–¥—Ä–µ—Å–∞
      const duplicateDeposits = await this.sequelize.query(`
        SELECT address, COUNT(*) as count, GROUP_CONCAT(id) as deposit_ids
        FROM deposit_addresses 
        GROUP BY address 
        HAVING COUNT(*) > 1
      `, { type: QueryTypes.SELECT }) as any[];

      duplicateDeposits.forEach(duplicate => {
        issues.push({
          type: 'DUPLICATE_ADDRESS',
          severity: 'HIGH',
          description: `–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è deposit –∞–¥—Ä–µ—Å: ${duplicate.address} (${duplicate.count} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)`,
          affectedRecords: duplicate.deposit_ids.split(','),
          suggestedFix: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥—É–±–ª–∏',
          autoFixable: true
        });
      });

      enhancedDbLogger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        duplicateWallets: duplicateWallets.length,
        duplicateDeposits: duplicateDeposits.length
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π', { error });
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned –∑–∞–ø–∏—Å–µ–π
   */
  private async checkOrphanedRecords(): Promise<IntegrityIssue[]> {
    const issues: IntegrityIssue[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ deposit –∞–¥—Ä–µ—Å–∞ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
      const unusedDeposits = await this.sequelize.query(`
        SELECT da.id, da.address, da.created_at
        FROM deposit_addresses da
        LEFT JOIN mix_requests mr ON da.mix_request_id = mr.id
        WHERE da.used = false 
          AND da.created_at < NOW() - INTERVAL 7 DAY
          AND (mr.id IS NULL OR mr.status IN ('CANCELLED', 'FAILED'))
      `, { type: QueryTypes.SELECT }) as any[];

      if (unusedDeposits.length > 0) {
        issues.push({
          type: 'ORPHANED_RECORD',
          severity: 'LOW',
          description: `–ù–∞–π–¥–µ–Ω–æ ${unusedDeposits.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö deposit –∞–¥—Ä–µ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π`,
          affectedRecords: unusedDeposits.map(d => d.id),
          suggestedFix: '–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ deposit –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤',
          autoFixable: true
        });
      }

      enhancedDbLogger.info('üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ orphaned –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        unusedDeposits: unusedDeposits.length
      });

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ orphaned –∑–∞–ø–∏—Å–µ–π', { error });
    }

    return issues;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  private async performAutoRecovery(fixableIssues: IntegrityIssue[]): Promise<void> {
    if (fixableIssues.length === 0) return;

    const operationId = `auto_recovery_${Date.now()}`;
    const operation: RecoveryOperation = {
      id: operationId,
      type: 'AUTO_RECOVERY',
      status: 'RUNNING',
      startedAt: new Date(),
      details: { fixableIssues: fixableIssues.length }
    };

    this.activeOperations.set(operationId, operation);
    enhancedDbLogger.info('üîß –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', {
      issuesCount: fixableIssues.length
    });

    try {
      // –°–æ–∑–¥–∞–µ–º backup –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      if (this.config.createRecoveryBackups) {
        await this.backupManager.createBackup('pre_recovery_' + Date.now());
      }

      let fixedCount = 0;
      const transaction = await this.sequelize.transaction();

      try {
        for (const issue of fixableIssues) {
          try {
            await this.applyAutoFix(issue, transaction);
            fixedCount++;
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            await AuditLog.logAction({
              level: 'INFO',
              action: 'DATA_AUTO_RECOVERED',
              message: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: ${issue.description}`,
              details: {
                issueType: issue.type,
                affectedRecords: issue.affectedRecords,
                fix: issue.suggestedFix
              }
            }, transaction);

          } catch (fixError) {
            enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞', {
              issue: issue.type,
              error: fixError
            });
          }
        }

        await transaction.commit();
        
        operation.status = 'COMPLETED';
        operation.completedAt = new Date();
        operation.details.fixedCount = fixedCount;

        enhancedDbLogger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
          fixedCount,
          totalIssues: fixableIssues.length
        });

        this.emit('auto_recovery_completed', { fixedCount, totalIssues: fixableIssues.length });

      } catch (error) {
        await transaction.rollback();
        throw error;
      }

    } catch (error) {
      operation.status = 'FAILED';
      operation.error = (error as Error).message;
      operation.completedAt = new Date();

      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', { error });
      throw error;
    } finally {
      this.activeOperations.delete(operationId);
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private async applyAutoFix(issue: IntegrityIssue, transaction: Transaction): Promise<void> {
    switch (issue.type) {
      case 'MISSING_RELATION':
        await this.fixMissingRelation(issue, transaction);
        break;
        
      case 'ORPHANED_RECORD':
        await this.fixOrphanedRecord(issue, transaction);
        break;
        
      case 'STATUS_INCONSISTENCY':
        await this.fixStatusInconsistency(issue, transaction);
        break;
        
      case 'DUPLICATE_ADDRESS':
        await this.fixDuplicateAddress(issue, transaction);
        break;
        
      default:
        enhancedDbLogger.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞', { type: issue.type });
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π
   */
  private async fixMissingRelation(issue: IntegrityIssue, transaction: Transaction): Promise<void> {
    // –î–ª—è MixRequest –±–µ–∑ DepositAddress —Å–æ–∑–¥–∞–µ–º DepositAddress –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    for (const recordId of issue.affectedRecords) {
      const mixRequest = await MixRequest.findByPk(recordId, { transaction });
      if (mixRequest && mixRequest.status === 'PENDING') {
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—â–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
        await mixRequest.update({
          status: 'CANCELLED',
          errorMessage: 'Auto-cancelled due to missing deposit address'
        }, { transaction });
        
        enhancedDbLogger.info('üîß –û—Ç–º–µ–Ω–µ–Ω MixRequest –±–µ–∑ DepositAddress', { id: recordId });
      }
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ orphaned –∑–∞–ø–∏—Å–µ–π
   */
  private async fixOrphanedRecord(issue: IntegrityIssue, transaction: Transaction): Promise<void> {
    // –£–¥–∞–ª—è–µ–º orphaned –∑–∞–ø–∏—Å–∏
    for (const recordId of issue.affectedRecords) {
      if (issue.description.includes('OutputTransaction')) {
        await OutputTransaction.destroy({ where: { id: recordId }, transaction });
      } else if (issue.description.includes('deposit –∞–¥—Ä–µ—Å')) {
        await DepositAddress.destroy({ where: { id: recordId }, transaction });
      }
      
      enhancedDbLogger.info('üîß –£–¥–∞–ª–µ–Ω–∞ orphaned –∑–∞–ø–∏—Å—å', { id: recordId });
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤
   */
  private async fixStatusInconsistency(issue: IntegrityIssue, transaction: Transaction): Promise<void> {
    for (const recordId of issue.affectedRecords) {
      const mixRequest = await MixRequest.findByPk(recordId, { transaction });
      if (mixRequest) {
        if (issue.description.includes('–∑–∞—Å—Ç—Ä—è–ª –≤ —Å—Ç–∞—Ç—É—Å–µ MIXING')) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ POOLING –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          await mixRequest.update({
            status: 'POOLING',
            errorMessage: 'Auto-reset from stuck MIXING status'
          }, { transaction });
          
          enhancedDbLogger.info('üîß –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞—Å—Ç—Ä—è–≤—à–µ–≥–æ MixRequest', { id: recordId });
        }
      }
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–¥—Ä–µ—Å–æ–≤
   */
  private async fixDuplicateAddress(issue: IntegrityIssue, transaction: Transaction): Promise<void> {
    if (issue.description.includes('deposit –∞–¥—Ä–µ—Å')) {
      // –î–ª—è deposit –∞–¥—Ä–µ—Å–æ–≤ —É–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥—É–±–ª–∏
      const deposits = await DepositAddress.findAll({
        where: { id: issue.affectedRecords },
        transaction
      });
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
      for (let i = 1; i < deposits.length; i++) {
        if (!deposits[i].used) {
          await deposits[i].destroy({ transaction });
          enhancedDbLogger.info('üîß –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π deposit –∞–¥—Ä–µ—Å', { 
            id: deposits[i].id 
          });
        }
      }
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  private async performQuickHealthCheck(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const metrics = await this.sequelize.query(`
        SELECT 
          (SELECT COUNT(*) FROM mix_requests WHERE status = 'MIXING' AND updated_at < NOW() - INTERVAL 30 MINUTE) as stuck_mixing,
          (SELECT COUNT(*) FROM wallets WHERE balance < 0) as negative_balances,
          (SELECT COUNT(*) FROM deposit_addresses WHERE used = false AND created_at < NOW() - INTERVAL 1 DAY) as old_unused_deposits
      `, { type: QueryTypes.SELECT }) as any[];

      const { stuck_mixing, negative_balances, old_unused_deposits } = metrics[0] || {};

      if (stuck_mixing > 0 || negative_balances > 0 || old_unused_deposits > 50) {
        enhancedDbLogger.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ', {
          stuck_mixing,
          negative_balances,
          old_unused_deposits
        });

        this.emit('health_check_warning', {
          stuck_mixing,
          negative_balances,
          old_unused_deposits
        });
      }

    } catch (error) {
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è', { error });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
   */
  private generateRecommendations(issues: IntegrityIssue[]): string[] {
    const recommendations: string[] = [];
    
    const criticalCount = issues.filter(i => i.severity === 'CRITICAL').length;
    const autoFixableCount = issues.filter(i => i.autoFixable).length;
    
    if (criticalCount > 0) {
      recommendations.push('–ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –î–ï–ô–°–¢–í–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.');
    }
    
    if (autoFixableCount > 0) {
      recommendations.push(`${autoFixableCount} –ø—Ä–æ–±–ª–µ–º –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.`);
    }
    
    if (issues.some(i => i.type === 'BALANCE_MISMATCH')) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.');
    }
    
    if (issues.some(i => i.type === 'STATUS_INCONSISTENCY')) {
      recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤.');
    }
    
    if (issues.length === 0) {
      recommendations.push('–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.');
    }
    
    return recommendations;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  public getActiveOperations(): RecoveryOperation[] {
    return Array.from(this.activeOperations.values());
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
   */
  public async manualRecovery(issueId: string, customFix?: string): Promise<void> {
    const operationId = `manual_recovery_${Date.now()}`;
    const operation: RecoveryOperation = {
      id: operationId,
      type: 'MANUAL_RECOVERY',
      status: 'RUNNING',
      startedAt: new Date(),
      details: { issueId, customFix }
    };

    this.activeOperations.set(operationId, operation);
    
    try {
      enhancedDbLogger.info('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', { issueId, customFix });
      
      // –°–æ–∑–¥–∞–µ–º backup –ø–µ—Ä–µ–¥ —Ä—É—á–Ω—ã–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      if (this.config.createRecoveryBackups) {
        await this.backupManager.createBackup('pre_manual_recovery_' + Date.now());
      }

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
      
      operation.status = 'COMPLETED';
      operation.completedAt = new Date();
      
      enhancedDbLogger.info('‚úÖ –†—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', { issueId });
      
    } catch (error) {
      operation.status = 'FAILED';
      operation.error = (error as Error).message;
      operation.completedAt = new Date();
      
      enhancedDbLogger.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', { error, issueId });
      throw error;
    } finally {
      this.activeOperations.delete(operationId);
    }
  }

  /**
   * Graceful shutdown
   */
  public async shutdown(): Promise<void> {
    this.isShuttingDown = true;
    
    enhancedDbLogger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown DataRecoveryManager');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    if (this.integrityTimer) clearInterval(this.integrityTimer);
    if (this.monitoringTimer) clearInterval(this.monitoringTimer);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const activeOps = Array.from(this.activeOperations.values())
      .filter(op => op.status === 'RUNNING');

    if (activeOps.length > 0) {
      enhancedDbLogger.info('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', {
        count: activeOps.length
      });

      // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
      const timeout = setTimeout(() => {
        enhancedDbLogger.warn('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è');
      }, 30000);

      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 500ms
      while (this.activeOperations.size > 0 && Date.now() < Date.now() + 30000) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      clearTimeout(timeout);
    }

    enhancedDbLogger.info('‚úÖ DataRecoveryManager —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }
}

export default DataRecoveryManager;