import { Sequelize } from 'sequelize';
import { DatabaseManager } from './DatabaseManager';
import { initializeModels, initializeSystemData } from './models';
import { initializeRepositories, RepositoryContainer } from './repositories';
import { MigrationManager } from './migrations/MigrationManager';
import { BackupManager } from './utils/BackupManager';
import { DatabaseMonitoring } from './utils/DatabaseMonitoring';
import DatabaseOptimizationSuite from './utils/DatabaseOptimizationSuite';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export class DatabaseSystem {
  private dbManager: DatabaseManager;
  private sequelize: Sequelize;
  private models: any;
  private repositories!: RepositoryContainer; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ initialize()
  private migrationManager: MigrationManager;
  private backupManager: BackupManager;
  private monitoring: DatabaseMonitoring;
  private optimizationSuite?: DatabaseOptimizationSuite; // –ù–û–í–´–ô: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  private isInitialized: boolean = false;
  private useOptimizations: boolean = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

  constructor(config?: any) {
    this.dbManager = new DatabaseManager(config);
    this.sequelize = this.dbManager.getSequelize();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    this.useOptimizations = config?.enableOptimizations !== false;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.migrationManager = new MigrationManager(this.sequelize);
    this.backupManager = new BackupManager(this.sequelize);
    this.monitoring = new DatabaseMonitoring(this.sequelize);
  }

  /**
   * –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è Database system already initialized');
      return;
    }

    try {
      console.log('üîÑ Initializing database system...');

      // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.dbManager.connect();
      console.log('‚úÖ Database connection established');

      // 2. –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
      await this.migrationManager.up();
      console.log('‚úÖ Database migrations completed');

      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
      this.models = initializeModels(this.sequelize);
      console.log('‚úÖ Database models initialized');

      // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await initializeSystemData();
      console.log('‚úÖ System data initialized');

      // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
      if (this.useOptimizations) {
        console.log('üöÄ Initializing optimization suite...');
        this.optimizationSuite = new DatabaseOptimizationSuite(process.env.DATABASE_URL!, {
          connectionPool: {
            minConnections: 5,
            maxConnections: 20,
            adaptivePooling: true,
            enableReadReplicas: false,
            warmupConnections: true
          },
          recovery: {
            enableIntegrityChecks: true,
            enableAutoRecovery: true,
            enableContinuousMonitoring: true,
            createRecoveryBackups: true
          },
          enableRedisCache: process.env.ENABLE_REDIS_CACHE === 'true',
          redis: {
            host: process.env.REDIS_HOST || 'localhost',
            port: parseInt(process.env.REDIS_PORT || '6379'),
            password: process.env.REDIS_PASSWORD,
            db: parseInt(process.env.REDIS_DB || '0'),
            keyPrefix: process.env.REDIS_KEY_PREFIX || 'mixer:',
            enableCluster: process.env.REDIS_ENABLE_CLUSTER === 'true',
            enableHealthChecks: true,
            enablePerformanceTracking: true,
            enableRateLimiting: true,
            enableAntiSpam: true
          },
          enablePerformanceMonitoring: true,
          enableAutomatedMaintenance: true,
          enableAlerting: true
        });

        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        await new Promise<void>((resolve) => {
          this.optimizationSuite!.once('initialized', resolve);
        });

        // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Å Redis –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        const optimizedRepos = process.env.ENABLE_REDIS_CACHE === 'true' 
          ? this.optimizationSuite.getRedisOptimizedRepositories()
          : this.optimizationSuite.getOptimizedRepositories();
          
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        const baseRepositories = initializeRepositories(this.models);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞
        Object.assign(baseRepositories, optimizedRepos);
        this.repositories = baseRepositories;
        console.log('‚úÖ Optimization suite initialized');
        console.log('‚úÖ Optimized repositories initialized');
      } else {
        // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        this.repositories = initializeRepositories(this.models);
        console.log('‚úÖ Standard repositories initialized');
      }

      // 6. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.monitoring.start();
      console.log('‚úÖ Database monitoring started');

      // 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
      this.setupAutomaticBackups();
      console.log('‚úÖ Backup system configured');

      this.isInitialized = true;
      console.log('üéâ Database system fully initialized!');

    } catch (error) {
      console.error('‚ùå Database system initialization failed:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
   */
  private setupAutomaticBackups(): void {
    // –ü–æ–ª–Ω—ã–µ –±—ç–∫–∞–ø—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    this.backupManager.scheduleBackups({
      full: '0 2 * * *',      // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00
      incremental: '0 */6 * * *'  // –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    });
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
   */
  async shutdown(): Promise<void> {
    console.log('üîÑ Shutting down database system...');

    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
      if (this.optimizationSuite) {
        await this.optimizationSuite.shutdown();
        console.log('‚úÖ Optimization suite stopped');
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      this.monitoring.stop();
      console.log('‚úÖ Monitoring stopped');

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø—ã
      this.backupManager.stopScheduledBackups();
      console.log('‚úÖ Scheduled backups stopped');

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
      await this.dbManager.disconnect();
      console.log('‚úÖ Database connection closed');

      this.isInitialized = false;
      console.log('‚úÖ Database system shutdown completed');

    } catch (error) {
      console.error('‚ùå Error during shutdown:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
   */
  getDatabaseManager(): DatabaseManager {
    return this.dbManager;
  }

  getSequelize(): Sequelize {
    return this.sequelize;
  }

  getModels(): any {
    this.ensureInitialized();
    return this.models;
  }

  getRepositories(): RepositoryContainer {
    this.ensureInitialized();
    return this.repositories;
  }

  getMigrationManager(): MigrationManager {
    return this.migrationManager;
  }

  getBackupManager(): BackupManager {
    return this.backupManager;
  }

  getMonitoring(): DatabaseMonitoring {
    return this.monitoring;
  }

  /**
   * –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  getOptimizationSuite(): DatabaseOptimizationSuite | undefined {
    return this.optimizationSuite;
  }

  /**
   * –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ Redis –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  getRedisComponents() {
    return this.optimizationSuite?.getRedisComponents() || null;
  }

  /**
   * –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  isOptimizationsEnabled(): boolean {
    return this.useOptimizations && !!this.optimizationSuite;
  }

  /**
   * –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ Redis –∫—ç—à
   */
  isRedisCacheEnabled(): boolean {
    return process.env.ENABLE_REDIS_CACHE === 'true' && !!this.optimizationSuite?.getRedisComponents();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  async getSystemHealth(): Promise<{
    status: 'healthy' | 'warning' | 'critical';
    components: Record<string, any>;
    timestamp: Date;
  }> {
    const timestamp = new Date();
    const components: Record<string, any> = {};

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
      components.database = await this.dbManager.getHealthStatus();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      components.monitoring = this.monitoring.getHealthReport();

      // –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      if (this.optimizationSuite) {
        components.optimization = this.optimizationSuite.getHealthStatus();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤
      const backups = this.backupManager.listBackups();
      components.backup = {
        lastBackup: backups.length > 0 ? backups[0].timestamp : null,
        totalBackups: backups.length
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      let overallStatus: 'healthy' | 'warning' | 'critical' = 'healthy';
      
      if (components.database.status !== 'healthy' || 
          components.monitoring.status === 'critical' ||
          (components.optimization && components.optimization.overall === 'CRITICAL')) {
        overallStatus = 'critical';
      } else if (components.monitoring.status === 'warning' ||
                 (components.optimization && components.optimization.overall === 'WARNING') ||
                 !components.backup.lastBackup ||
                 Date.now() - new Date(components.backup.lastBackup).getTime() > 48 * 60 * 60 * 1000) {
        overallStatus = 'warning';
      }

      return {
        status: overallStatus,
        components,
        timestamp
      };

    } catch (error) {
      return {
        status: 'critical',
        components: { error: error instanceof Error ? error.message : String(error) },
        timestamp
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private ensureInitialized(): void {
    if (!this.isInitialized) {
      throw new Error('Database system not initialized. Call initialize() first.');
    }
  }

  /**
   * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  static async create(config?: any): Promise<DatabaseSystem> {
    const system = new DatabaseSystem(config);
    await system.initialize();
    return system;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { DatabaseManager } from './DatabaseManager';
export { MigrationManager } from './migrations/MigrationManager';
export { BackupManager } from './utils/BackupManager';
export { DatabaseMonitoring } from './utils/DatabaseMonitoring';
export { initializeRepositories, RepositoryContainer } from './repositories';
export { initializeModels } from './models';

// –ù–û–í–´–ï –≠–ö–°–ü–û–†–¢–´: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
export { default as DatabaseOptimizationSuite } from './utils/DatabaseOptimizationSuite';
export { ConnectionPoolManager } from './utils/ConnectionPoolManager';
export { OptimizedQueryBuilder } from './utils/OptimizedQueryBuilder';
export { RedisOptimizedQueryBuilder } from './utils/RedisOptimizedQueryBuilder';
export { DataRecoveryManager } from './utils/DataRecoveryManager';
export { OptimizedMixRequestRepository } from './repositories/OptimizedMixRequestRepository';
export { OptimizedWalletRepository } from './repositories/OptimizedWalletRepository';

// –ù–û–í–´–ï –≠–ö–°–ü–û–†–¢–´: Redis –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
export { default as RedisMasterManager } from './cache/RedisMasterManager';
export { RedisConnectionManager } from './cache/RedisConnectionManager';
export { RedisCacheLayer } from './cache/RedisCacheLayer';
export { CriticalDataCacheManager } from './cache/CriticalDataCacheManager';
export { RedisSessionManager } from './cache/RedisSessionManager';

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
export * from './types';

// –≠–∫—Å–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
export { default as validators } from './validators';

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
export { DatabaseTestSuite } from './test-initialization';

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
let globalDatabaseSystem: DatabaseSystem | null = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –ë–î
 */
export function getGlobalDatabaseSystem(): DatabaseSystem {
  if (!globalDatabaseSystem) {
    throw new Error('Global database system not initialized. Call initializeGlobalDatabase() first.');
  }
  return globalDatabaseSystem;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
 */
export async function initializeGlobalDatabase(config?: any): Promise<DatabaseSystem> {
  if (globalDatabaseSystem) {
    console.log('‚ö†Ô∏è Global database system already initialized');
    return globalDatabaseSystem;
  }

  globalDatabaseSystem = await DatabaseSystem.create(config);
  return globalDatabaseSystem;
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
 */
export async function shutdownGlobalDatabase(): Promise<void> {
  if (globalDatabaseSystem) {
    await globalDatabaseSystem.shutdown();
    globalDatabaseSystem = null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default DatabaseSystem;