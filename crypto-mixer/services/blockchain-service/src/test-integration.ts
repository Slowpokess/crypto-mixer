#!/usr/bin/env ts-node

import { BlockchainManager } from './blockchain/manager';
import { TransactionMonitor } from './monitors/transaction.monitor';
import { Logger } from './utils/logger';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–ª–æ–∫—á–µ–π–Ω –Ω–æ–¥–∞–º–∏
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –Ω–æ–¥–∞–º –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–¥—Ä–µ—Å–æ–≤
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
 * - –í–∞–ª–∏–¥–∞—Ü–∏—é –∞–¥—Ä–µ—Å–æ–≤  
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∞—Ö –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

const logger = new Logger('IntegrationTest');

interface TestResults {
  [currency: string]: {
    connected: boolean;
    addressGeneration: boolean;
    balanceCheck: boolean;
    addressValidation: boolean;
    blockInfo: boolean;
    healthCheck: boolean;
    errors: string[];
  };
}

async function runIntegrationTests(): Promise<void> {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–ª–æ–∫—á–µ–π–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
  
  const results: TestResults = {};
  const blockchainManager = new BlockchainManager({
    enableSecureGeneration: false // –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  });

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫—á–µ–π–Ω–æ–≤
    logger.info('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫—á–µ–π–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');
    await blockchainManager.initialize();
    
    const supportedCurrencies = blockchainManager.getSupportedCurrencies();
    logger.info(`üí∞ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: ${supportedCurrencies.join(', ')}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤–∞–ª—é—Ç—É
    for (const currency of supportedCurrencies) {
      logger.info(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${currency}...`);
      results[currency] = await testCurrency(blockchainManager, currency);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    logger.info('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    await testTransactionMonitoring(blockchainManager);

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    printTestResults(results);

  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:', error as Error);
  } finally {
    await blockchainManager.shutdown();
  }
}

async function testCurrency(
  blockchainManager: BlockchainManager, 
  currency: string
): Promise<TestResults[string]> {
  const result: TestResults[string] = {
    connected: false,
    addressGeneration: false,
    balanceCheck: false,
    addressValidation: false,
    blockInfo: false,
    healthCheck: false,
    errors: []
  };

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  try {
    const healthStatus = await blockchainManager.getClientHealth(currency);
    result.connected = healthStatus?.connected || false;
    result.healthCheck = true;
    logger.info(`‚úÖ ${currency}: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞`);
  } catch (error) {
    result.errors.push(`Health check: ${(error as Error).message}`);
    logger.error(`‚ùå ${currency}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, error as Error);
  }

  // –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
  let testAddress = '';
  try {
    const addressInfo = await blockchainManager.generateAddress(currency);
    testAddress = addressInfo.address;
    result.addressGeneration = true;
    logger.info(`‚úÖ ${currency}: –ê–¥—Ä–µ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${testAddress.substring(0, 15)}...`);
  } catch (error) {
    result.errors.push(`Address generation: ${(error as Error).message}`);
    logger.error(`‚ùå ${currency}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:`, error as Error);
  }

  // –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
  if (testAddress) {
    try {
      const isValid = await blockchainManager.validateAddress(currency, testAddress);
      result.addressValidation = isValid;
      logger.info(`${isValid ? '‚úÖ' : '‚ùå'} ${currency}: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞: ${isValid}`);
    } catch (error) {
      result.errors.push(`Address validation: ${(error as Error).message}`);
      logger.error(`‚ùå ${currency}: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:`, error as Error);
    }
  }

  // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  if (testAddress) {
    try {
      const balance = await blockchainManager.getBalance(currency, testAddress);
      result.balanceCheck = true;
      logger.info(`‚úÖ ${currency}: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${balance}`);
    } catch (error) {
      result.errors.push(`Balance check: ${(error as Error).message}`);
      logger.error(`‚ùå ${currency}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:`, error as Error);
    }
  }

  // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–µ
  try {
    const latestBlock = await blockchainManager.getLatestBlock(currency);
    result.blockInfo = !!latestBlock;
    
    let blockHeight = 'unknown';
    if (currency === 'BTC') {
      blockHeight = latestBlock.height?.toString() || 'unknown';
    } else if (currency === 'ETH') {
      blockHeight = latestBlock.number?.toString() || 'unknown';
    } else if (currency === 'SOL') {
      blockHeight = latestBlock.parentSlot?.toString() || 'unknown';
    } else if (currency === 'TRX') {
      blockHeight = latestBlock.block_header?.raw_data?.number?.toString() || 'unknown';
    }
    
    logger.info(`‚úÖ ${currency}: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ –ø–æ–ª—É—á–µ–Ω–∞, –≤—ã—Å–æ—Ç–∞: ${blockHeight}`);
  } catch (error) {
    result.errors.push(`Block info: ${(error as Error).message}`);
    logger.error(`‚ùå ${currency}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–µ:`, error as Error);
  }

  return result;
}

async function testTransactionMonitoring(blockchainManager: BlockchainManager): Promise<void> {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const monitor = new TransactionMonitor({
      pollInterval: 5000, // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      maxRetries: 2,
      batchSize: 10,
      currencies: ['BTC', 'ETH', 'SOL', 'TRX']
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await monitor.start();
    logger.info('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–ø—É—â–µ–Ω');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const testAddresses = {
      BTC: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', // Genesis block address
      ETH: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe', // Ethereum Foundation
      SOL: '11111111111111111111111111111111', // System program
      TRX: 'TLsV52sRDL79HXGGm9yzwKibbQWkQy6Pl' // Tron Foundation
    };

    for (const [currency, address] of Object.entries(testAddresses)) {
      try {
        monitor.addAdvancedAddressMonitoring(currency, address);
        logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–¥—Ä–µ—Å ${currency} –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${address.substring(0, 15)}...`);
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ ${currency} –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:`, error as Error);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const stats = monitor.getMonitoringStats();
    logger.info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', stats);

    // –î–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    await new Promise(resolve => setTimeout(resolve, 10000));

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const updatedStats = monitor.getMonitoringStats();
    logger.info('üìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', updatedStats);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await monitor.stop();
    logger.info('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error as Error);
  }
}

function printTestResults(results: TestResults): void {
  logger.info('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í');
  logger.info('=' .repeat(50));

  let totalTests = 0;
  let passedTests = 0;
  
  for (const [currency, result] of Object.entries(results)) {
    logger.info(`\nüí∞ ${currency}:`);
    
    const tests = [
      { name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', passed: result.connected },
      { name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞', passed: result.addressGeneration },
      { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞', passed: result.balanceCheck },
      { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞', passed: result.addressValidation },
      { name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ', passed: result.blockInfo },
      { name: 'Health Check', passed: result.healthCheck }
    ];
    
    for (const test of tests) {
      totalTests++;
      if (test.passed) {
        passedTests++;
        logger.info(`  ‚úÖ ${test.name}`);
      } else {
        logger.info(`  ‚ùå ${test.name}`);
      }
    }
    
    if (result.errors.length > 0) {
      logger.info(`  üêõ –û—à–∏–±–∫–∏:`);
      result.errors.forEach(error => {
        logger.info(`    - ${error}`);
      });
    }
  }

  logger.info('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  logger.info(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
  logger.info(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
  logger.info(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}`);
  logger.info(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passedTests / totalTests) * 100).toFixed(1)}%`);

  if (passedTests === totalTests) {
    logger.info('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  } else {
    logger.info('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–æ–¥.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runIntegrationTests().catch(error => {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { runIntegrationTests };