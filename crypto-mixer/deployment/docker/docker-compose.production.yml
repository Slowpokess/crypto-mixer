# docker-compose.production.yml
version: '3.8'

services:
  # PostgreSQL Database with replication
  postgres-master:
    image: postgres:16-alpine3.19
    environment:
      POSTGRES_DB: mixer_db
      POSTGRES_USER: mixer_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - postgres-master-data:/var/lib/postgresql/data
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mixer-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'

  postgres-slave:
    image: postgres:16-alpine3.19
    environment:
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_PORT: 5432
      POSTGRES_USER: mixer_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - postgres-slave-data:/var/lib/postgresql/data
    networks:
      - mixer-network
    depends_on:
      - postgres-master

  # Redis Cluster
  redis-master:
    image: redis:7-alpine3.19
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - mixer-network
    deploy:
      resources:
        limits:
          memory: 1G

  # RabbitMQ for message queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine3.19
    environment:
      RABBITMQ_DEFAULT_USER: mixer
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.8
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - mixer-network
    deploy:
      resources:
        limits:
          memory: 2G

  # API Gateway (Kong)
  kong-database:
    image: postgres:16-alpine3.19
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD}
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    networks:
      - mixer-network

  kong-migration:
    image: kong:3.6-alpine
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
    networks:
      - mixer-network
    depends_on:
      - kong-database

  kong:
    image: kong:3.6-alpine
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PLUGINS: bundled,rate-limiting,cors,jwt,request-transformer
    ports:
      - "80:8000"
      - "443:8443"
    networks:
      - mixer-network
    depends_on:
      - kong-migration
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G

  # Mixer API Service
  mixer-api:
    build:
      context: ./services/mixer-api
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres-master
      DB_PORT: 5432
      DB_NAME: mixer_db
      DB_USER: mixer_user
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_URL: amqp://mixer:${RABBITMQ_PASSWORD}@rabbitmq:5672
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    networks:
      - mixer-network
    depends_on:
      - postgres-master
      - redis-master
      - rabbitmq
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Blockchain Service
  blockchain-service:
    build:
      context: ./services/blockchain-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres-master
      DB_PORT: 5432
      DB_NAME: mixer_db
      DB_USER: mixer_user
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_URL: amqp://mixer:${RABBITMQ_PASSWORD}@rabbitmq:5672
      BTC_NODE_HOST: ${BTC_NODE_HOST}
      BTC_RPC_USER: ${BTC_RPC_USER}
      BTC_RPC_PASSWORD: ${BTC_RPC_PASSWORD}
      ETH_RPC_URL: ${ETH_RPC_URL}
      SOL_RPC_URL: ${SOL_RPC_URL}
      TRON_API_URL: ${TRON_API_URL}
    volumes:
      - blockchain-keys:/app/keys:ro
    networks:
      - mixer-network
    depends_on:
      - postgres-master
      - redis-master
      - rabbitmq
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2'

  # Scheduler Service
  scheduler-service:
    build:
      context: ./services/scheduler-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: postgres-master
      DB_PORT: 5432
      DB_NAME: mixer_db
      DB_USER: mixer_user
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_URL: amqp://mixer:${RABBITMQ_PASSWORD}@rabbitmq:5672
    networks:
      - mixer-network
    depends_on:
      - postgres-master
      - redis-master
      - rabbitmq
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G

  # Wallet Service (with HSM support)
  wallet-service:
    build:
      context: ./services/wallet-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_HOST: postgres-master
      DB_PORT: 5432
      DB_NAME: mixer_db
      DB_USER: mixer_user
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      HSM_ENABLED: "true"
      HSM_PIN: ${HSM_PIN}
      MASTER_KEY: ${MASTER_KEY}
    volumes:
      - wallet-keys:/app/keys
      - /dev/bus/usb:/dev/bus/usb:ro  # For HSM USB device
    networks:
      - mixer-network
    privileged: true  # Required for HSM access
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.hsm == true

  # Frontend
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: /api/v1
    networks:
      - mixer-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M

  # Nginx
  nginx:
    image: nginx:1.25-alpine3.18
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    ports:
      - "443:443"
      - "80:80"
    networks:
      - mixer-network
    depends_on:
      - frontend
      - kong
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M

  # Tor Proxy
  tor-proxy:
    build:
      context: ./services/tor-proxy
      dockerfile: Dockerfile
    volumes:
      - tor-data:/var/lib/tor
      - ./tor/torrc:/etc/tor/torrc:ro
    networks:
      - mixer-network
    ports:
      - "9050:9050"
      - "9051:9051"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - mixer-network
    ports:
      - "9090:9090"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mixer-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus

  # Log aggregation - Loki
  loki:
    image: grafana/loki:latest
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mixer-network
    ports:
      - "3100:3100"

  # Log shipper - Promtail
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - mixer-network
    depends_on:
      - loki

  # Security Scanner
  security-scanner:
    build:
      context: ./services/security-scanner
      dockerfile: Dockerfile
    environment:
      SCAN_INTERVAL: 3600
      SLACK_WEBHOOK: ${SLACK_SECURITY_WEBHOOK}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mixer-network

volumes:
  postgres-master-data:
  postgres-slave-data:
  redis-data:
  rabbitmq-data:
  kong-db-data:
  blockchain-keys:
  wallet-keys:
  tor-data:
  prometheus-data:
  grafana-data:
  loki-data:
  nginx-cache:

networks:
  mixer-network:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"