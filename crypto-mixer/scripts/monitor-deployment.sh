#!/bin/bash

# ================================================================
# CRYPTO MIXER - DEPLOYMENT MONITORING SCRIPT
# ================================================================
# RUSSIAN: –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è production –¥–µ–ø–ª–æ—è
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤, –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫, –∞–ª–µ—Ä—Ç–∏–Ω–≥

set -euo pipefail
IFS=$'\n\t'

# ================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ================================================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_INTERVAL=${MONITORING_INTERVAL:-30}
ALERT_THRESHOLD_CPU=${ALERT_THRESHOLD_CPU:-80}
ALERT_THRESHOLD_MEMORY=${ALERT_THRESHOLD_MEMORY:-85}
ALERT_THRESHOLD_RESPONSE_TIME=${ALERT_THRESHOLD_RESPONSE_TIME:-5000}
WEBHOOK_URL=${WEBHOOK_URL:-}

# ================================================================
# –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ================================================================

log_info() {
    echo -e "${BLUE}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"
}

log_success() {
    echo -e "${GREEN}[OK]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"
}

log_warning() {
    echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"
}

log_alert() {
    echo -e "${PURPLE}[ALERT]${NC} $(date '+%Y-%m-%d %H:%M:%S') $1"
}

# ================================================================
# –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–†–í–ò–°–û–í
# ================================================================

check_service_health() {
    local stack_name="mixer"
    
    echo -e "\n${CYAN}üìä –°–û–°–¢–û–Ø–ù–ò–ï –°–ï–†–í–ò–°–û–í${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞
    if ! docker stack ls | grep -q "$stack_name"; then
        log_error "–°—Ç–µ–∫ $stack_name –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    local services_info=$(docker stack services $stack_name --format "table {{.Name}}\t{{.Mode}}\t{{.Replicas}}\t{{.Image}}")
    echo "$services_info"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    local failed_services=0
    local services=$(docker stack services $stack_name --format "{{.Name}}")
    
    echo -e "\n${CYAN}üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    for service in $services; do
        local replicas=$(docker service inspect $service --format "{{.Spec.Mode.Replicated.Replicas}}" 2>/dev/null || echo "0")
        local running=$(docker service ls --filter "name=$service" --format "{{.Replicas}}" | cut -d'/' -f1)
        local total=$(docker service ls --filter "name=$service" --format "{{.Replicas}}" | cut -d'/' -f2)
        
        if [ "$running" = "$total" ] && [ "$running" -gt 0 ]; then
            log_success "‚úì $service ($running/$total)"
        else
            log_error "‚úó $service ($running/$total)"
            failed_services=$((failed_services + 1))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            log_info "  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ $service:"
            docker service logs --tail 3 $service 2>/dev/null | sed 's/^/    /' || echo "    –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    done
    
    return $failed_services
}

# ================================================================
# –ü–†–û–í–ï–†–ö–ê HEALTH ENDPOINTS
# ================================================================

check_health_endpoints() {
    echo -e "\n${CYAN}üè• –ü–†–û–í–ï–†–ö–ê HEALTH ENDPOINTS${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
    local api_port=$(docker service inspect mixer_mixer-api --format '{{range .Endpoint.Ports}}{{if eq .TargetPort 5000}}{{.PublishedPort}}{{end}}{{end}}' 2>/dev/null || echo "5000")
    
    # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    local endpoints=(
        "http://localhost:${api_port}/health:Health Check"
        "http://localhost:${api_port}/ready:Readiness"
        "http://localhost:${api_port}/live:Liveness"
        "http://localhost:${api_port}/metrics:Metrics"
        "http://localhost:${api_port}/api/v1/security/status:Security Status"
    )
    
    local failed_endpoints=0
    
    for endpoint_info in "${endpoints[@]}"; do
        local url=$(echo "$endpoint_info" | cut -d':' -f1)
        local name=$(echo "$endpoint_info" | cut -d':' -f2)
        
        local start_time=$(date +%s%3N)
        if curl -sf "$url" > /dev/null 2>&1; then
            local end_time=$(date +%s%3N)
            local response_time=$((end_time - start_time))
            
            if [ $response_time -lt $ALERT_THRESHOLD_RESPONSE_TIME ]; then
                log_success "‚úì $name (${response_time}ms)"
            else
                log_warning "‚ö† $name (${response_time}ms - –º–µ–¥–ª–µ–Ω–Ω–æ!)"
            fi
        else
            log_error "‚úó $name - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            failed_endpoints=$((failed_endpoints + 1))
        fi
    done
    
    return $failed_endpoints
}

# ================================================================
# –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–°–£–†–°–û–í
# ================================================================

check_resource_usage() {
    echo -e "\n${CYAN}üìà –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–°–£–†–°–û–í${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local containers=$(docker ps --filter "label=com.docker.stack.namespace=mixer" --format "{{.Names}}")
    
    if [ -z "$containers" ]; then
        log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã mixer –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    fi
    
    echo -e "${BLUE}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä${NC}\t\t\t${BLUE}CPU%${NC}\t${BLUE}–ü–∞–º—è—Ç—å${NC}\t\t${BLUE}–°–µ—Ç—å I/O${NC}\t\t${BLUE}–î–∏—Å–∫ I/O${NC}"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    local high_cpu_count=0
    local high_memory_count=0
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    local stats_output=$(docker stats --no-stream --format "json" $containers)
    
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            local container=$(echo "$line" | jq -r '.Container // .Name')
            local cpu=$(echo "$line" | jq -r '.CPUPerc' | sed 's/%//')
            local memory=$(echo "$line" | jq -r '.MemUsage')
            local net_io=$(echo "$line" | jq -r '.NetIO')
            local block_io=$(echo "$line" | jq -r '.BlockIO')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            local cpu_num=$(echo "$cpu" | sed 's/[^0-9.]//g')
            if (( $(echo "$cpu_num > $ALERT_THRESHOLD_CPU" | bc -l) )); then
                high_cpu_count=$((high_cpu_count + 1))
                printf "${RED}%-30s\t%s%%\t%s\t%s\t%s${NC}\n" "$container" "$cpu" "$memory" "$net_io" "$block_io"
            elif (( $(echo "$cpu_num > 50" | bc -l) )); then
                printf "${YELLOW}%-30s\t%s%%\t%s\t%s\t%s${NC}\n" "$container" "$cpu" "$memory" "$net_io" "$block_io"
            else
                printf "${GREEN}%-30s\t%s%%\t%s\t%s\t%s${NC}\n" "$container" "$cpu" "$memory" "$net_io" "$block_io"
            fi
        fi
    done <<< "$stats_output"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    echo -e "\n${BLUE}üìÄ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –î–ò–°–ö–ê${NC}"
    df -h | grep -E "(Filesystem|/dev/)" | head -5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker volumes
    echo -e "\n${BLUE}üì¶ DOCKER VOLUMES${NC}"
    docker system df
    
    # –í—ã–≤–æ–¥—ã –∏ –∞–ª–µ—Ä—Ç—ã
    if [ $high_cpu_count -gt 0 ]; then
        log_alert "‚ö†Ô∏è $high_cpu_count –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π CPU (>$ALERT_THRESHOLD_CPU%)"
    fi
    
    if [ $high_memory_count -gt 0 ]; then
        log_alert "‚ö†Ô∏è $high_memory_count –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏"
    fi
}

# ================================================================
# –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–û–ô –°–í–Ø–ó–ù–û–°–¢–ò
# ================================================================

check_network_connectivity() {
    echo -e "\n${CYAN}üåê –°–ï–¢–ï–í–ê–Ø –°–í–Ø–ó–ù–û–°–¢–¨${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ç–µ–π
    local networks=$(docker network ls --filter "name=mixer" --format "{{.Name}}")
    
    for network in $networks; do
        local connected_containers=$(docker network inspect $network --format '{{len .Containers}}' 2>/dev/null || echo "0")
        if [ "$connected_containers" -gt 0 ]; then
            log_success "‚úì –°–µ—Ç—å $network - $connected_containers –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        else
            log_warning "‚ö† –°–µ—Ç—å $network - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏..."
    if timeout 5 curl -sf https://google.com > /dev/null 2>&1; then
        log_success "‚úì –í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "‚ö† –í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π"
    fi
}

# ================================================================
# –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í
# ================================================================

analyze_logs() {
    echo -e "\n${CYAN}üìã –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local services=$(docker stack services mixer --format "{{.Name}}")
    local time_filter="--since 5m"
    
    for service in $services; do
        log_info "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è $service..."
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        local error_count=$(docker service logs $service $time_filter 2>/dev/null | grep -ci "error\|critical\|fatal" || echo "0")
        local warning_count=$(docker service logs $service $time_filter 2>/dev/null | grep -ci "warn\|warning" || echo "0")
        
        if [ "$error_count" -gt 0 ]; then
            log_error "  ‚úó $service: $error_count –æ—à–∏–±–æ–∫, $warning_count –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            docker service logs $service $time_filter 2>/dev/null | grep -i "error\|critical\|fatal" | tail -2 | sed 's/^/    /'
        elif [ "$warning_count" -gt 5 ]; then
            log_warning "  ‚ö† $service: $warning_count –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        else
            log_success "  ‚úì $service: —á–∏—Å—Ç—ã–µ –ª–æ–≥–∏"
        fi
    done
}

# ================================================================
# –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# ================================================================

check_security_status() {
    echo -e "\n${CYAN}üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local api_port=$(docker service inspect mixer_mixer-api --format '{{range .Endpoint.Ports}}{{if eq .TargetPort 5000}}{{.PublishedPort}}{{end}}{{end}}' 2>/dev/null || echo "5000")
    local security_url="http://localhost:${api_port}/api/v1/security/status"
    
    if curl -sf "$security_url" > /dev/null 2>&1; then
        local security_data=$(curl -s "$security_url" 2>/dev/null || echo '{}')
        local status=$(echo "$security_data" | jq -r '.status // "unknown"')
        local blocked_requests=$(echo "$security_data" | jq -r '.statistics.general.blockedRequests // 0')
        local active_blocks=$(echo "$security_data" | jq -r '.statistics.rateLimiter.activeBlocks // 0')
        local ddos_attacks=$(echo "$security_data" | jq -r '.statistics.general.ddosAttacksDetected // 0')
        local emergency_mode=$(echo "$security_data" | jq -r '.emergencyMode // false')
        
        if [ "$status" = "active" ]; then
            log_success "‚úì –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞"
        else
            log_warning "‚ö† –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $status"
        fi
        
        log_info "  üìä –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: $blocked_requests"
        log_info "  üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP: $active_blocks"
        log_info "  üõ°Ô∏è DDoS –∞—Ç–∞–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: $ddos_attacks"
        
        if [ "$emergency_mode" = "true" ]; then
            log_alert "üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù!"
        else
            log_success "‚úì –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        local alerts_url="http://localhost:${api_port}/api/v1/security/alerts?active=true"
        if curl -sf "$alerts_url" > /dev/null 2>&1; then
            local active_alerts=$(curl -s "$alerts_url" | jq -r '.count // 0')
            if [ "$active_alerts" -gt 0 ]; then
                log_alert "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $active_alerts"
            else
                log_success "‚úì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            fi
        fi
        
    else
        log_error "‚úó –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# ================================================================
# –û–¢–ü–†–ê–í–ö–ê –ê–õ–ï–†–¢–û–í
# ================================================================

send_alert() {
    local message="$1"
    local severity="${2:-warning}"
    
    if [ -n "$WEBHOOK_URL" ]; then
        local payload=$(cat <<EOF
{
  "text": "üö® Crypto Mixer Alert",
  "attachments": [
    {
      "color": "$( [ "$severity" = "error" ] && echo "danger" || echo "warning" )",
      "fields": [
        {
          "title": "Message",
          "value": "$message",
          "short": false
        },
        {
          "title": "Severity",
          "value": "$severity",
          "short": true
        },
        {
          "title": "Timestamp",
          "value": "$(date -Iseconds)",
          "short": true
        }
      ]
    }
  ]
}
EOF
)
        
        curl -X POST -H 'Content-type: application/json' \
             --data "$payload" \
             "$WEBHOOK_URL" > /dev/null 2>&1 || true
    fi
}

# ================================================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê
# ================================================================

generate_status_report() {
    local timestamp=$(date -Iseconds)
    local report_file="${PROJECT_ROOT}/logs/monitoring-report-$(date +%Y%m%d_%H%M%S).json"
    
    mkdir -p "$(dirname "$report_file")"
    
    local report=$(cat <<EOF
{
  "timestamp": "$timestamp",
  "deployment_health": {
    "services_status": "$(check_service_health > /dev/null 2>&1 && echo "healthy" || echo "unhealthy")",
    "endpoints_status": "$(check_health_endpoints > /dev/null 2>&1 && echo "healthy" || echo "unhealthy")",
    "security_status": "active"
  },
  "resource_usage": $(docker stats --no-stream --format json $(docker ps --filter "label=com.docker.stack.namespace=mixer" --format "{{.Names}}") 2>/dev/null | jq -s '.' || echo '[]'),
  "docker_info": {
    "version": "$(docker version --format '{{.Server.Version}}' 2>/dev/null || echo 'unknown')",
    "containers_running": $(docker ps --filter "label=com.docker.stack.namespace=mixer" --format "{{.Names}}" | wc -l),
    "images_count": $(docker images --filter "reference=mixer/*" --format "{{.Repository}}" | wc -l)
  },
  "system_info": {
    "uptime": "$(uptime -p 2>/dev/null || echo 'unknown')",
    "load_average": "$(uptime | sed 's/.*load average: //' 2>/dev/null || echo 'unknown')",
    "disk_usage": "$(df -h / | tail -1 | awk '{print $5}' 2>/dev/null || echo 'unknown')"
  }
}
EOF
)
    
    echo "$report" > "$report_file"
    log_info "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# ================================================================
# CONTINUOUS MONITORING
# ================================================================

continuous_monitoring() {
    log_info "üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${MONITORING_INTERVAL}s)"
    log_info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    echo
    
    local iteration=0
    
    while true; do
        iteration=$((iteration + 1))
        
        echo -e "\n${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        echo -e "${PURPLE}üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–¢–ï–†–ê–¶–ò–Ø #$iteration - $(date)${NC}"
        echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        
        local issues=0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        if ! check_service_health; then
            issues=$((issues + 1))
            send_alert "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã" "error"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints
        if ! check_health_endpoints; then
            issues=$((issues + 1))
            send_alert "Health endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã" "error"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        check_resource_usage
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
        check_network_connectivity
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        check_security_status
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
        analyze_logs
        
        # –°–≤–æ–¥–∫–∞
        if [ $issues -eq 0 ]; then
            log_success "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        else
            log_alert "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $issues –ø—Ä–æ–±–ª–µ–º"
        fi
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∫–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π
        if [ $((iteration % 10)) -eq 0 ]; then
            generate_status_report
        fi
        
        echo -e "\nüí§ –û–∂–∏–¥–∞–Ω–∏–µ $MONITORING_INTERVAL —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
        sleep $MONITORING_INTERVAL
    done
}

# ================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ================================================================

show_help() {
    cat << 'EOF'
Crypto Mixer Deployment Monitoring

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    ./monitor-deployment.sh [–ö–û–ú–ê–ù–î–ê] [–û–ü–¶–ò–ò]

–ö–û–ú–ê–ù–î–´:
    status              –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    continuous          –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    health              –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ health endpoints
    resources           –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    security            –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    logs                –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    report              –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

–û–ü–¶–ò–ò:
    --interval SECONDS  –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)
    --webhook URL       URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    --cpu-threshold N   –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞ CPU –≤ % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80)
    --memory-threshold N –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ –≤ % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 85)
    --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    ./monitor-deployment.sh
    ./monitor-deployment.sh continuous --interval 60
    ./monitor-deployment.sh health
    ./monitor-deployment.sh --webhook https://hooks.slack.com/...

–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:
    MONITORING_INTERVAL         –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ (—Å–µ–∫—É–Ω–¥—ã)
    ALERT_THRESHOLD_CPU         –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞ CPU (%)
    ALERT_THRESHOLD_MEMORY      –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ (%)
    WEBHOOK_URL                 URL –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
EOF
}

# ================================================================
# –ü–ê–†–°–ò–ù–ì –ê–†–ì–£–ú–ï–ù–¢–û–í
# ================================================================

COMMAND="status"

while [[ $# -gt 0 ]]; do
    case $1 in
        status|continuous|health|resources|security|logs|report)
            COMMAND="$1"
            shift
            ;;
        --interval)
            MONITORING_INTERVAL="$2"
            shift 2
            ;;
        --webhook)
            WEBHOOK_URL="$2"
            shift 2
            ;;
        --cpu-threshold)
            ALERT_THRESHOLD_CPU="$2"
            shift 2
            ;;
        --memory-threshold)
            ALERT_THRESHOLD_MEMORY="$2"
            shift 2
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# ================================================================
# –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î
# ================================================================

case $COMMAND in
    status)
        log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ production –¥–µ–ø–ª–æ—è"
        check_service_health
        check_health_endpoints  
        check_resource_usage
        check_security_status
        ;;
    continuous)
        continuous_monitoring
        ;;
    health)
        check_health_endpoints
        ;;
    resources)
        check_resource_usage
        ;;
    security)
        check_security_status
        ;;
    logs)
        analyze_logs
        ;;
    report)
        generate_status_report
        ;;
esac