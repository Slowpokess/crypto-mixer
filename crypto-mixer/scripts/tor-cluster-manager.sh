#!/bin/bash

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ Tor –¥–ª—è CryptoMixer
# –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ Tor instances:
# - –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
# - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —É–∑–ª–æ–≤
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ failover –ø—Ä–∏ —Å–±–æ—è—Ö
# - –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ –≤–æ –≤—Å–µ—Ö instances
# - –°–±–æ—Ä –ª–æ–≥–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DOCKER_COMPOSE_FILE="$PROJECT_ROOT/docker/docker-compose.tor-cluster.yml"
LOG_DIR="/opt/cryptomixer/logs/tor-cluster"
DATA_DIR="/opt/cryptomixer/data/tor"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")  echo -e "${GREEN}[INFO]${NC}  [$timestamp] $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC}  [$timestamp] $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} [$timestamp] $message" ;;
        "DEBUG") echo -e "${BLUE}[DEBUG]${NC} [$timestamp] $message" ;;
        *)       echo -e "[$timestamp] $message" ;;
    esac
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª
    mkdir -p "$LOG_DIR"
    echo "[$level] [$timestamp] $message" >> "$LOG_DIR/tor-cluster-manager.log"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "INFO" "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    local deps=("docker" "docker-compose" "curl" "nc" "jq")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log "ERROR" "‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $dep"
            exit 1
        fi
    done
    
    log "INFO" "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    log "INFO" "üìÅ –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    
    local dirs=(
        "/opt/cryptomixer/data/tor/primary"
        "/opt/cryptomixer/data/tor/backup1"
        "/opt/cryptomixer/data/tor/backup2"
        "/opt/cryptomixer/data/tor/emergency"
        "/opt/cryptomixer/logs/tor/primary"
        "/opt/cryptomixer/logs/tor/backup1"
        "/opt/cryptomixer/logs/tor/backup2"
        "/opt/cryptomixer/logs/tor/emergency"
        "/opt/cryptomixer/logs/tor-monitor"
        "/opt/cryptomixer/shared/tor"
    )
    
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            sudo mkdir -p "$dir"
            sudo chown -R 1000:1000 "$dir"  # tor user in container
            log "INFO" "üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
        fi
    done
}

# –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞ Tor
start_cluster() {
    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä Tor..."
    
    setup_directories
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å control port –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [[ -z "${TOR_CONTROL_PASSWORD:-}" ]]; then
        export TOR_CONTROL_PASSWORD=$(openssl rand -base64 32)
        log "INFO" "üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è control port"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ services
    docker-compose -f "$DOCKER_COMPOSE_FILE" up -d tor-primary tor-backup1 tor-backup2 tor-lb tor-monitor
    
    log "INFO" "‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Tor instances..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
    if check_cluster_health; then
        log "INFO" "‚úÖ –ö–ª–∞—Å—Ç–µ—Ä Tor —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        show_cluster_status
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞"
        show_logs
        exit 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
stop_cluster() {
    log "INFO" "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä Tor..."
    
    docker-compose -f "$DOCKER_COMPOSE_FILE" down
    
    log "INFO" "‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞
restart_cluster() {
    log "INFO" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä Tor..."
    
    stop_cluster
    sleep 5
    start_cluster
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–ª–∞—Å—Ç–µ—Ä–∞
check_cluster_health() {
    log "INFO" "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
    
    local instances=("tor-primary:9050" "tor-backup1:9060" "tor-backup2:9070")
    local healthy_count=0
    
    for instance in "${instances[@]}"; do
        local host=$(echo "$instance" | cut -d: -f1)
        local port=$(echo "$instance" | cut -d: -f2)
        
        if check_tor_instance "$host" "$port"; then
            log "INFO" "‚úÖ $host:$port –∑–¥–æ—Ä–æ–≤"
            ((healthy_count++))
        else
            log "WARN" "‚ö†Ô∏è $host:$port –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
    
    if [[ $healthy_count -ge 2 ]]; then
        log "INFO" "‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –∑–¥–æ—Ä–æ–≤ ($healthy_count/3 instances)"
        return 0
    else
        log "ERROR" "‚ùå –ö–ª–∞—Å—Ç–µ—Ä –Ω–µ–∑–¥–æ—Ä–æ–≤ ($healthy_count/3 instances)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Tor instance
check_tor_instance() {
    local host="$1"
    local port="$2"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SOCKS –ø–æ—Ä—Ç
    if nc -z "$host" "$port" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
show_cluster_status() {
    log "INFO" "üìä –°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞ Tor:"
    
    echo -e "\n${CYAN}=== –°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ===${NC}"
    docker-compose -f "$DOCKER_COMPOSE_FILE" ps
    
    echo -e "\n${CYAN}=== –ó–î–û–†–û–í–¨–ï TOR INSTANCES ===${NC}"
    local instances=("primary:9050" "backup1:9060" "backup2:9070" "emergency:9080")
    
    for instance in "${instances[@]}"; do
        local name=$(echo "$instance" | cut -d: -f1)
        local port=$(echo "$instance" | cut -d: -f2)
        local container_name="cryptomixer-tor-$name"
        
        if docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
            if check_tor_instance "localhost" "$port"; then
                echo -e "  ${GREEN}‚úÖ${NC} $name (port $port) - –ó–¥–æ—Ä–æ–≤"
            else
                echo -e "  ${RED}‚ùå${NC} $name (port $port) - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
        else
            echo -e "  ${YELLOW}‚ö†Ô∏è${NC} $name (port $port) - –ù–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    done
    
    echo -e "\n${CYAN}=== LOAD BALANCER ===${NC}"
    if curl -s http://localhost:8080/stats >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ${NC} HAProxy load balancer –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8080/stats"
    else
        echo -e "  ${RED}‚ùå${NC} HAProxy load balancer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    echo -e "\n${CYAN}=== ONION –ê–î–†–ï–°–ê ===${NC}"
    show_onion_addresses
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ onion –∞–¥—Ä–µ—Å–æ–≤
show_onion_addresses() {
    local instances=("primary" "backup1" "backup2" "emergency")
    
    for instance in "${instances[@]}"; do
        local container_name="cryptomixer-tor-$instance"
        
        if docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
            echo -e "\n  ${PURPLE}üìç $instance:${NC}"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å onion –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            local services=("mixer_web" "mixer_api" "mixer_admin" "mixer_monitoring")
            
            for service in "${services[@]}"; do
                local hostname_file="/var/lib/tor/$service/hostname"
                local onion_address
                
                onion_address=$(docker exec "$container_name" cat "$hostname_file" 2>/dev/null || echo "–ù–µ –≥–æ—Ç–æ–≤")
                
                if [[ "$onion_address" != "–ù–µ –≥–æ—Ç–æ–≤" ]]; then
                    echo -e "    ${GREEN}üßÖ${NC} $service: $onion_address"
                else
                    echo -e "    ${YELLOW}‚è≥${NC} $service: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è..."
                fi
            done
        fi
    done
}

# –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ –≤–æ –≤—Å–µ—Ö instances
rotate_circuits() {
    log "INFO" "üîÑ –†–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫–∏ –≤–æ –≤—Å–µ—Ö Tor instances..."
    
    local instances=("primary:9053" "backup1:9063" "backup2:9073")
    local success_count=0
    
    for instance in "${instances[@]}"; do
        local name=$(echo "$instance" | cut -d: -f1)
        local port=$(echo "$instance" | cut -d: -f2)
        local container_name="cryptomixer-tor-$name"
        
        if docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
            log "INFO" "üîÑ –†–æ—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫–∏ –≤ $name..."
            
            if rotate_instance_circuits "$container_name"; then
                log "INFO" "‚úÖ –¶–µ–ø–æ—á–∫–∏ –≤ $name —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω—ã"
                ((success_count++))
            else
                log "WARN" "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫–∏ –≤ $name"
            fi
        fi
    done
    
    log "INFO" "üîÑ –†–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ($success_count instances)"
}

# –†–æ—Ç–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º instance
rotate_instance_circuits() {
    local container_name="$1"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º NEWNYM –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ control port
    docker exec "$container_name" bash -c '
        echo "AUTHENTICATE \"$TOR_CONTROL_PASSWORD\"
SIGNAL NEWNYM
QUIT" | nc localhost $(echo $TOR_CONTROL_PORT || echo 9053)
    ' 2>/dev/null
    
    return $?
}

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è emergency instance
activate_emergency() {
    log "INFO" "üö® –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º emergency Tor instance..."
    
    docker-compose -f "$DOCKER_COMPOSE_FILE" up -d tor-emergency
    
    sleep 15
    
    if check_tor_instance "localhost" "9080"; then
        log "INFO" "‚úÖ Emergency instance –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    else
        log "ERROR" "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å emergency instance"
        return 1
    fi
}

# –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è emergency instance
deactivate_emergency() {
    log "INFO" "üõë –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º emergency Tor instance..."
    
    docker-compose -f "$DOCKER_COMPOSE_FILE" stop tor-emergency
    
    log "INFO" "‚úÖ Emergency instance –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
}

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
show_logs() {
    local instance="${1:-all}"
    local lines="${2:-50}"
    
    if [[ "$instance" == "all" ]]; then
        log "INFO" "üìú –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –≤—Å–µ—Ö services..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" logs --tail="$lines" -f
    else
        log "INFO" "üìú –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ $instance..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" logs --tail="$lines" -f "tor-$instance"
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_cluster() {
    log "INFO" "üëÅÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
    
    while true; do
        clear
        echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${CYAN}‚ïë               TOR CLUSTER MONITOR                    ‚ïë${NC}"
        echo -e "${CYAN}‚ïë              $(date '+%Y-%m-%d %H:%M:%S')                     ‚ïë${NC}"
        echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        
        show_cluster_status
        
        echo -e "\n${CYAN}=== –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´ ===${NC}"
        echo -e "  ${BLUE}üìä${NC} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep cryptomixer-tor
        
        echo -e "\n${YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞${NC}"
        sleep 10
    done
}

# –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
collect_metrics() {
    log "INFO" "üìà –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
    
    local metrics_file="$LOG_DIR/tor-cluster-metrics-$(date +%Y%m%d_%H%M%S).json"
    
    {
        echo "{"
        echo "  \"timestamp\": \"$(date -Iseconds)\","
        echo "  \"cluster_status\": {"
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        echo "    \"containers\": ["
        docker-compose -f "$DOCKER_COMPOSE_FILE" ps --format json | jq -s '.'
        echo "    ],"
        
        # –ó–¥–æ—Ä–æ–≤—å–µ instances
        echo "    \"health\": {"
        local instances=("primary:9050" "backup1:9060" "backup2:9070" "emergency:9080")
        local first=true
        
        for instance in "${instances[@]}"; do
            local name=$(echo "$instance" | cut -d: -f1)
            local port=$(echo "$instance" | cut -d: -f2)
            
            if [[ "$first" == "true" ]]; then
                first=false
            else
                echo ","
            fi
            
            echo -n "      \"$name\": {"
            echo -n "\"port\": $port, "
            
            if check_tor_instance "localhost" "$port"; then
                echo -n "\"status\": \"healthy\""
            else
                echo -n "\"status\": \"unhealthy\""
            fi
            echo -n "}"
        done
        
        echo ""
        echo "    }"
        echo "  }"
        echo "}"
    } > "$metrics_file"
    
    log "INFO" "üìà –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $metrics_file"
}

# Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
backup_configs() {
    local backup_dir="$DATA_DIR/backups/$(date +%Y%m%d_%H%M%S)"
    
    log "INFO" "üíæ –°–æ–∑–¥–∞–µ–º backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    
    mkdir -p "$backup_dir"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cp -r "$PROJECT_ROOT/security/tor" "$backup_dir/"
    cp "$DOCKER_COMPOSE_FILE" "$backup_dir/"
    cp "$PROJECT_ROOT/docker/haproxy-tor.cfg" "$backup_dir/"
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    tar -czf "$backup_dir.tar.gz" -C "$(dirname "$backup_dir")" "$(basename "$backup_dir")"
    rm -rf "$backup_dir"
    
    log "INFO" "üíæ Backup —Å–æ–∑–¥–∞–Ω: $backup_dir.tar.gz"
}

# –ü–æ–º–æ—â—å
show_help() {
    cat << EOF

üßÖ CryptoMixer Tor Cluster Manager

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 <–∫–æ–º–∞–Ω–¥–∞> [–æ–ø—Ü–∏–∏]

–ö–û–ú–ê–ù–î–´:
    start                 –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä Tor
    stop                  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä Tor
    restart               –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä Tor
    status                –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞
    health                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
    rotate                –†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫–∏ –≤–æ –≤—Å–µ—Ö instances
    emergency-on          –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å emergency instance
    emergency-off         –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å emergency instance
    logs [instance] [n]   –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (instance: primary|backup1|backup2|emergency|all)
    monitor               –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    metrics               –°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
    backup                –°–æ–∑–¥–∞—Ç—å backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    onion                 –ü–æ–∫–∞–∑–∞—Ç—å onion –∞–¥—Ä–µ—Å–∞
    help                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    $0 start              # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä
    $0 logs primary 100   # –ü–æ–∫–∞–∑–∞—Ç—å 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ primary instance
    $0 monitor            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

EOF
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command="${1:-help}"
    
    case "$command" in
        "start")
            check_dependencies
            start_cluster
            ;;
        "stop")
            stop_cluster
            ;;
        "restart")
            restart_cluster
            ;;
        "status")
            show_cluster_status
            ;;
        "health")
            if check_cluster_health; then
                log "INFO" "‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –∑–¥–æ—Ä–æ–≤"
            else
                log "ERROR" "‚ùå –ö–ª–∞—Å—Ç–µ—Ä –Ω–µ–∑–¥–æ—Ä–æ–≤"
                exit 1
            fi
            ;;
        "rotate")
            rotate_circuits
            ;;
        "emergency-on")
            activate_emergency
            ;;
        "emergency-off")
            deactivate_emergency
            ;;
        "logs")
            show_logs "${2:-all}" "${3:-50}"
            ;;
        "monitor")
            monitor_cluster
            ;;
        "metrics")
            collect_metrics
            ;;
        "backup")
            backup_configs
            ;;
        "onion")
            show_onion_addresses
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            log "ERROR" "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log "INFO" "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"; exit 0' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"