#!/bin/bash

# =============================================================================
# Crypto Mixer - –°–∫—Ä–∏–ø—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
# =============================================================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

PROJECT_ROOT="/Users/macbook/Documents/CM/crypto-mixer"
cd "$PROJECT_ROOT"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p logs

show_help() {
    echo "========================================"
    echo "  Crypto Mixer - View Logs"
    echo "========================================"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò] [–°–ï–†–í–ò–°]"
    echo
    echo "–°–µ—Ä–≤–∏—Å—ã:"
    echo "  mixer-api          - Mixer API —Å–µ—Ä–≤–∏—Å"
    echo "  blockchain         - Blockchain —Å–µ—Ä–≤–∏—Å"
    echo "  scheduler          - Scheduler —Å–µ—Ä–≤–∏—Å"
    echo "  frontend           - Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  all                - –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo
    echo "–û–ø—Ü–∏–∏:"
    echo "  -f, --follow       - –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  -n, --lines NUM    - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ NUM —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)"
    echo "  -e, --errors       - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏"
    echo "  -s, --status       - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  -h, --help         - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 mixer-api             - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ mixer-api"
    echo "  $0 -f all               - –°–ª–µ–¥–∏—Ç—å –∑–∞ –≤—Å–µ–º–∏ –ª–æ–≥–∞–º–∏"
    echo "  $0 -n 100 blockchain    - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ blockchain"
    echo "  $0 -e scheduler         - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ scheduler"
}

show_status() {
    echo "========================================"
    echo "  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "========================================"
    echo
    
    SERVICES=(
        "mixer-api:3000:/health"
        "blockchain-service:3001:/health"
        "scheduler-service:3002:/"
        "frontend:3000:/"
    )
    
    for service_info in "${SERVICES[@]}"; do
        IFS=':' read -r service port path <<< "$service_info"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PID —Ñ–∞–π–ª–∞
        pid_file="logs/${service}.pid"
        if [[ -f "$pid_file" ]]; then
            pid=$(cat "$pid_file")
            if kill -0 "$pid" 2>/dev/null; then
                status="üü¢ RUNNING (PID: $pid)"
            else
                status="üî¥ STOPPED (stale PID)"
                rm -f "$pid_file"
            fi
        else
            status="üî¥ STOPPED"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ HTTP
        if curl -s -o /dev/null -w "%{http_code}" "http://localhost:${port}${path}" 2>/dev/null | grep -q "200\|404"; then
            http_status="‚úÖ HTTP OK"
        else
            http_status="‚ùå HTTP FAIL"
        fi
        
        printf "%-20s %s %s\n" "$service" "$status" "$http_status"
    done
    
    echo
    
    # Docker —Å–µ—Ä–≤–∏—Å—ã
    echo "Docker —Å–µ—Ä–≤–∏—Å—ã:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(postgres|redis|rabbitmq)" || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
}

show_logs() {
    local service=$1
    local lines=${LINES:-50}
    local follow=$2
    local errors_only=$3
    
    local log_file="logs/${service}.log"
    
    if [[ ! -f "$log_file" ]]; then
        log_warning "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $log_file"
        return 1
    fi
    
    echo "========================================"
    echo "  –õ–æ–≥–∏: $service"
    echo "========================================"
    
    if [[ "$errors_only" == "true" ]]; then
        if [[ "$follow" == "true" ]]; then
            tail -f "$log_file" | grep -i --line-buffered "error\|fail\|exception"
        else
            tail -n "$lines" "$log_file" | grep -i "error\|fail\|exception"
        fi
    else
        if [[ "$follow" == "true" ]]; then
            tail -f "$log_file"
        else
            tail -n "$lines" "$log_file"
        fi
    fi
}

show_all_logs() {
    local lines=${LINES:-50}
    local follow=$1
    local errors_only=$2
    
    SERVICES=(
        "mixer-api"
        "blockchain-service"
        "scheduler-service"
        "frontend"
    )
    
    if [[ "$follow" == "true" ]]; then
        log_info "–°–ª–µ–¥–∏–º –∑–∞ –≤—Å–µ–º–∏ –ª–æ–≥–∞–º–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
        echo
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        for service in "${SERVICES[@]}"; do
            log_file="logs/${service}.log"
            if [[ -f "$log_file" ]]; then
                if [[ "$errors_only" == "true" ]]; then
                    tail -f "$log_file" | sed "s/^/[$service] /" | grep -i --line-buffered "error\|fail\|exception" &
                else
                    tail -f "$log_file" | sed "s/^/[$service] /" &
                fi
            fi
        done
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        wait
    else
        for service in "${SERVICES[@]}"; do
            log_file="logs/${service}.log"
            if [[ -f "$log_file" ]]; then
                echo
                echo "========================================"
                echo "  $service (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫)"
                echo "========================================"
                
                if [[ "$errors_only" == "true" ]]; then
                    tail -n "$lines" "$log_file" | grep -i "error\|fail\|exception" || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                else
                    tail -n "$lines" "$log_file"
                fi
            else
                log_warning "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $log_file"
            fi
        done
    fi
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
FOLLOW=false
LINES=50
ERRORS_ONLY=false
SHOW_STATUS=false
SERVICE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--follow)
            FOLLOW=true
            shift
            ;;
        -n|--lines)
            LINES="$2"
            shift 2
            ;;
        -e|--errors)
            ERRORS_ONLY=true
            shift
            ;;
        -s|--status)
            SHOW_STATUS=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        mixer-api|blockchain|scheduler|frontend|all)
            SERVICE="$1"
            shift
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if [[ "$SHOW_STATUS" == "true" ]]; then
    show_status
    exit 0
fi

if [[ -z "$SERVICE" ]]; then
    show_help
    exit 1
fi

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–≤
case "$SERVICE" in
    blockchain)
        SERVICE="blockchain-service"
        ;;
    scheduler)
        SERVICE="scheduler-service"
        ;;
esac

if [[ "$SERVICE" == "all" ]]; then
    show_all_logs "$FOLLOW" "$ERRORS_ONLY"
else
    show_logs "$SERVICE" "$LINES" "$FOLLOW" "$ERRORS_ONLY"
fi