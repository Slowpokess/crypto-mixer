import React, { useState } from 'react';
import {
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  TextField,
  Button,
  InputAdornment,
  Chip,
  Fade,
  Zoom,
  Tooltip,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import {
  AccountBalanceWallet as WalletIcon,
  TrendingUp as TrendingIcon,
  Security as SecurityIcon,
  Speed as SpeedIcon,
} from '@mui/icons-material';
import { themeHelpers } from '../theme/theme';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Å—É–º–º—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º Material-UI –¥–∏–∑–∞–π–Ω–æ–º
 * 
 * –†–£–°–°–ö–ò–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å:
 * - –ö—Ä–∞—Å–∏–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤–∞–ª—é—Ç —Å –∏–∫–æ–Ω–∫–∞–º–∏
 * - –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –∏ hover —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–æ–π –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
 * - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º
 */
const CurrencySelector = ({ 
  currency, 
  setCurrency, 
  amount, 
  setAmount, 
  fees, 
  onNext 
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [selectedCurrencyInfo, setSelectedCurrencyInfo] = useState(null);

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
  const currencies = [
    { 
      code: 'BTC', 
      name: 'Bitcoin', 
      icon: '‚Çø',
      color: '#F7931A',
      description: '–ü–µ—Ä–≤–∞—è –∏ —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
      features: ['üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'üíé –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏', 'üåç –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ']
    },
    { 
      code: 'ETH', 
      name: 'Ethereum', 
      icon: 'Œû',
      color: '#627EEA',
      description: '–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ DeFi —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞',
      features: ['‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'üèóÔ∏è –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã', 'üí± DeFi –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è']
    },
    { 
      code: 'USDT', 
      name: 'Tether', 
      icon: '‚ÇÆ',
      color: '#26A17B',
      description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫ USD',
      features: ['üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã', 'üí∞ 1:1 –∫ –¥–æ–ª–ª–∞—Ä—É', 'üè¶ –†–µ–∑–µ—Ä–≤—ã –±–∞–Ω–∫–æ–≤']
    },
    { 
      code: 'SOL', 
      name: 'Solana', 
      icon: '‚óé',
      color: '#14F195',
      description: '–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω',
      features: ['üöÄ –°–≤–µ—Ä—Ö—Å–∫–æ—Ä–æ—Å—Ç—å', 'üí° –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏', 'üéÆ NFT –∏ –∏–≥—Ä—ã']
    },
    { 
      code: 'LTC', 
      name: 'Litecoin', 
      icon: '≈Å',
      color: '#BEBEBE',
      description: '–°–µ—Ä–µ–±—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
      features: ['‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏', 'üí∏ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏', '‚õèÔ∏è –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å–µ—Ç—å']
    },
    { 
      code: 'DASH', 
      name: 'Dash', 
      icon: 'ƒê',
      color: '#008CE7',
      description: '–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      features: ['üîê PrivateSend', '‚ö° InstantSend', 'üéØ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è']
    },
    { 
      code: 'ZEC', 
      name: 'Zcash', 
      icon: '‚ì©',
      color: '#ECB244',
      description: '–ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      features: ['üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', 'üî¨ Zero-knowledge', 'üé≠ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å']
    },
    { 
      code: 'XMR', 
      name: 'Monero', 
      icon: '…±',
      color: '#FF6600',
      description: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∏ –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      features: ['üïµÔ∏è –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å', 'üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', 'üí´ –ù–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ—Å—Ç—å']
    }
  ];

  const calculateFee = () => {
    if (!amount || !fees[currency]) return 0;
    const feePercent = fees[currency]?.percentage || 1.5;
    const minFee = fees[currency]?.minimum || 0;
    const calculatedFee = parseFloat(amount) * (feePercent / 100);
    return Math.max(calculatedFee, minFee).toFixed(8);
  };

  const calculateReceiveAmount = () => {
    if (!amount) return 0;
    const fee = calculateFee();
    const receiveAmount = parseFloat(amount) - parseFloat(fee);
    return Math.max(receiveAmount, 0).toFixed(8);
  };

  const handleCurrencySelect = (currencyData) => {
    setCurrency(currencyData.code);
    setSelectedCurrencyInfo(currencyData);
  };

  const renderCurrencyGrid = () => (
    <Grid container spacing={2} sx={{ mb: 4 }}>
      {currencies.map((curr, index) => (
        <Grid item xs={6} sm={4} md={3} key={curr.code}>
          <Zoom in={true} timeout={300 + index * 100}>
            <Card
              onClick={() => handleCurrencySelect(curr)}
              sx={{
                cursor: 'pointer',
                border: currency === curr.code 
                  ? `2px solid ${curr.color}` 
                  : '1px solid rgba(124, 58, 237, 0.2)',
                background: currency === curr.code 
                  ? `linear-gradient(135deg, ${curr.color}15, ${curr.color}25)`
                  : 'rgba(26, 27, 58, 0.6)',
                backdropFilter: 'blur(10px)',
                transition: 'all 0.3s ease',
                transform: currency === curr.code ? 'scale(1.05)' : 'scale(1)',
                '&:hover': {
                  transform: 'scale(1.05) translateY(-4px)',
                  boxShadow: `0px 8px 32px ${curr.color}40`,
                  border: `2px solid ${curr.color}`,
                },
              }}
            >
              <CardContent sx={{ textAlign: 'center', p: 2 }}>
                <Box
                  sx={{
                    fontSize: '2rem',
                    mb: 1,
                    color: curr.color,
                    textShadow: `0px 0px 10px ${curr.color}80`,
                  }}
                >
                  {curr.icon}
                </Box>
                <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                  {curr.code}
                </Typography>
                <Typography variant="caption" sx={{ color: 'text.secondary', fontSize: '0.7rem' }}>
                  {curr.name}
                </Typography>
                <Box sx={{ mt: 1 }}>
                  <Chip
                    size="small"
                    label={`${fees[curr.code]?.percentage || '1.5'}%`}
                    sx={{
                      fontSize: '0.6rem',
                      height: 20,
                      backgroundColor: `${curr.color}20`,
                      color: curr.color,
                      border: `1px solid ${curr.color}40`,
                    }}
                  />
                </Box>
              </CardContent>
            </Card>
          </Zoom>
        </Grid>
      ))}
    </Grid>
  );

  const selectedCurrency = currencies.find(c => c.code === currency);

  return (
    <Box sx={{ space: 4 }}>
      <Typography 
        variant="h4" 
        sx={{ 
          mb: 3, 
          fontWeight: 600,
          ...themeHelpers.gradientText(),
        }}
      >
        –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏ —Å—É–º–º—É
      </Typography>

      {/* Currency Selection Grid */}
      {renderCurrencyGrid()}

      {/* Selected Currency Info */}
      {selectedCurrency && (
        <Fade in={!!selectedCurrency}>
          <Card
            sx={{
              mb: 4,
              background: `linear-gradient(135deg, ${selectedCurrency.color}10, ${selectedCurrency.color}20)`,
              border: `1px solid ${selectedCurrency.color}40`,
              backdropFilter: 'blur(10px)',
            }}
          >
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Box
                  sx={{
                    fontSize: '2rem',
                    mr: 2,
                    color: selectedCurrency.color,
                  }}
                >
                  {selectedCurrency.icon}
                </Box>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    {selectedCurrency.name} ({selectedCurrency.code})
                  </Typography>
                  <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                    {selectedCurrency.description}
                  </Typography>
                </Box>
              </Box>
              
              <Grid container spacing={1}>
                {selectedCurrency.features.map((feature, index) => (
                  <Grid item xs={12} sm={4} key={index}>
                    <Chip
                      label={feature}
                      size="small"
                      sx={{
                        backgroundColor: `${selectedCurrency.color}20`,
                        color: 'text.primary',
                        border: `1px solid ${selectedCurrency.color}40`,
                        fontSize: '0.75rem',
                      }}
                    />
                  </Grid>
                ))}
              </Grid>
            </CardContent>
          </Card>
        </Fade>
      )}

      {/* Amount Input */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h6" sx={{ mb: 2, fontWeight: 500 }}>
          –°—É–º–º–∞ –¥–ª—è –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
        </Typography>
        
        <TextField
          fullWidth
          type="number"
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          placeholder={`0.0 ${currency}`}
          inputProps={{
            step: "0.00000001",
            min: "0"
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <WalletIcon sx={{ color: 'primary.main' }} />
              </InputAdornment>
            ),
            endAdornment: (
              <InputAdornment position="end">
                <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                  {currency}
                </Typography>
              </InputAdornment>
            ),
          }}
          sx={{
            '& .MuiOutlinedInput-root': {
              fontSize: '1.2rem',
              fontWeight: 500,
            },
          }}
        />

        {/* Fee Information */}
        {amount && parseFloat(amount) > 0 && (
          <Fade in={true}>
            <Card
              sx={{
                mt: 2,
                ...themeHelpers.glass(0.6),
                border: '1px solid rgba(124, 58, 237, 0.2)',
              }}
            >
              <CardContent sx={{ p: 2 }}>
                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                        –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞
                      </Typography>
                      <Typography variant="h6" sx={{ color: 'warning.main', fontWeight: 600 }}>
                        {calculateFee()} {currency}
                      </Typography>
                      <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                        {fees[currency]?.percentage || '1.5'}% (–º–∏–Ω: {fees[currency]?.minimum || '0.001'})
                      </Typography>
                    </Box>
                  </Grid>
                  <Grid item xs={6}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                        –í—ã –ø–æ–ª—É—á–∏—Ç–µ
                      </Typography>
                      <Typography variant="h6" sx={{ color: 'success.main', fontWeight: 600 }}>
                        {calculateReceiveAmount()} {currency}
                      </Typography>
                      <Typography variant="caption" sx={{ color: 'text.secondary' }}>
                        –ü–æ—Å–ª–µ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          </Fade>
        )}
      </Box>

      {/* Security Features */}
      <Box sx={{ mb: 4 }}>
        <Grid container spacing={2}>
          {[
            { icon: SecurityIcon, title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', desc: '–í–æ–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è' },
            { icon: SpeedIcon, title: '–°–∫–æ—Ä–æ—Å—Ç—å', desc: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ 1-6 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π' },
            { icon: TrendingIcon, title: '–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å', desc: '99.9% –∞–ø—Ç–∞–π–º —Å–µ—Ä–≤–∏—Å–∞' },
            { icon: WalletIcon, title: '–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', desc: '–ù—É–ª–µ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤' },
          ].map((feature, index) => (
            <Grid item xs={6} md={3} key={index}>
              <Tooltip title={feature.desc} arrow>
                <Card
                  sx={{
                    textAlign: 'center',
                    ...themeHelpers.glass(0.4),
                    cursor: 'pointer',
                    '&:hover': {
                      transform: 'translateY(-2px)',
                      ...themeHelpers.glowShadow(),
                    },
                  }}
                >
                  <CardContent sx={{ p: 2 }}>
                    <feature.icon 
                      sx={{ 
                        fontSize: '2rem', 
                        color: 'primary.main', 
                        mb: 1 
                      }} 
                    />
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      {feature.title}
                    </Typography>
                  </CardContent>
                </Card>
              </Tooltip>
            </Grid>
          ))}
        </Grid>
      </Box>

      {/* Continue Button */}
      <Button
        fullWidth
        variant="contained"
        size="large"
        onClick={onNext}
        disabled={!amount || parseFloat(amount) <= 0}
        sx={{
          py: 2,
          fontSize: '1.1rem',
          fontWeight: 600,
          background: selectedCurrency
            ? `linear-gradient(135deg, ${selectedCurrency.color}, #7C3AED)`
            : 'linear-gradient(135deg, #7C3AED, #EC4899)',
          '&:hover': {
            background: selectedCurrency
              ? `linear-gradient(135deg, ${selectedCurrency.color}DD, #6D28D9)`
              : 'linear-gradient(135deg, #6D28D9, #DB2777)',
            transform: 'translateY(-2px)',
            boxShadow: `0px 8px 32px ${selectedCurrency?.color || '#7C3AED'}60`,
          },
          '&:disabled': {
            background: 'rgba(124, 58, 237, 0.3)',
            color: 'rgba(255, 255, 255, 0.5)',
          },
        }}
      >
        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      </Button>
    </Box>
  );
};

export default CurrencySelector;